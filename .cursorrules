# JustiFi MCP Server Development Rules

## Project Overview
This is a **JustiFi MCP (Model Context Protocol) server** designed for AI-assisted payment management in IDEs like Cursor and VS Code. The server provides 10 comprehensive tools for payment processing, payment methods, payouts, and balance transactions through the JustiFi API.

## Technology Stack
- **Protocol**: Model Context Protocol (MCP) with JSON-RPC 2.0 over stdio
- **API Integration**: JustiFi Payments API with OAuth2 Client-Credentials flow
- **Authentication**: OAuth2 token caching with automatic 401 retry
- **Package Management**: uv (not pip)
- **Testing**: pytest + pytest-asyncio (36/36 tests passing)
- **Containerization**: Docker with auto-restart development workflow
- **Observability**: LangSmith tracing with @traceable decorators

## MCP Standards and Best Practices

### MCP Architecture Compliance
- **ALWAYS follow the official MCP specification** from modelcontextprotocol.io
- Use proper **client-server architecture** with MCP Hosts, Clients, and Servers
- Implement **JSON-RPC 2.0** message format for all MCP communications
- Support **capability negotiation** during initialization
- Maintain **stateful connections** between clients and servers
- Design for **interoperability** across different MCP clients (Claude Desktop, Cursor, etc.)

### Tool Implementation Standards
- **Use structured schemas** with proper JSON Schema definitions for all tool inputs
- **Implement comprehensive error handling** with meaningful error messages
- **Add @traceable decorators** to all MCP tool functions for observability
- **Follow naming conventions**: use descriptive, action-oriented tool names
- **Provide clear descriptions** that help AI models understand when to use each tool
- **Support idempotency** for operations that modify state
- **Validate all inputs** before processing to prevent security issues
- **Return structured JSON responses** with consistent error/success patterns

### JustiFi API Integration Standards
- **Always verify endpoints exist** in the real JustiFi API before implementing
- **Use OAuth2 Client-Credentials flow** with secure token caching
- **Implement automatic 401 retry** with token refresh in _request() function
- **Handle rate limiting** and network timeouts gracefully
- **Never log sensitive data** (API keys, payment details, tokens)
- **Use environment variables** for all API credentials
- **Test with real API credentials** to ensure compatibility

### TOOL_DISPATCH Pattern (Scalable Architecture)
```python
# Use dispatch dictionary for scalable tool management
TOOL_DISPATCH = {
    "tool_name": tool_function,
    # ... more tools
}

@server.call_tool()
async def handle_call_tool(name: str, arguments: dict) -> list[TextContent]:
    """Handle tool calls using dispatch pattern."""
    if name not in TOOL_DISPATCH:
        raise ValueError(f"Unknown tool: {name}")
    
    tool_func = TOOL_DISPATCH[name]
    result = await tool_func(**arguments)
    return [TextContent(type="text", text=json.dumps(result, indent=2))]
```

### Example MCP Tool Implementation
```python
@traceable
async def create_payment(
    amount_cents: int,
    currency: str,
    idempotency_key: str,
    payment_method_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    Create a new payment in JustiFi.
    
    Args:
        amount_cents: Payment amount in cents (e.g., 1050 for $10.50)
        currency: Currency code (e.g., 'USD')
        idempotency_key: Unique key to prevent duplicate payments
        payment_method_id: Optional payment method ID
        
    Returns:
        Payment object with ID, status, and details
    """
    try:
        payload = {
            "amount": amount_cents,
            "currency": currency,
            "idempotency_key": idempotency_key
        }
        if payment_method_id:
            payload["payment_method"] = payment_method_id
            
        response = await _request("POST", "/payments", json=payload)
        return response
        
    except Exception as e:
        logger.error(f"Payment creation failed: {type(e).__name__}")
        raise
```

## Development Guidelines

### Code Style & Standards
- Use Python 3.11+ features and type hints
- Follow PEP 8 style guidelines
- Use async/await for all I/O operations
- Add docstrings to all functions and classes
- Use the `@traceable` decorator for all external API calls

### Package Management
- **ALWAYS use `uv` instead of `pip`**
- Install packages: `uv pip install package_name`
- Install from requirements: `uv pip install -r requirements.txt`
- Add new dependencies to requirements.txt

### Modular Architecture
```
tools/justifi/
├── __init__.py          # Exports all 10 tools
├── core.py              # OAuth2 + HTTP client with 401 retry
├── payments.py          # 5 payment tools (create, retrieve, list, refund, list_refunds)
├── payment_methods.py   # 2 payment method tools (create, retrieve)
├── payouts.py           # 2 payout tools (retrieve, list)
└── balances.py          # 1 balance transaction tool (list)
```

### Environment Variables (JustiFi-Specific)
Required:
- `JUSTIFI_CLIENT_ID` - JustiFi API Client ID
- `JUSTIFI_CLIENT_SECRET` - JustiFi API Client Secret
- `JUSTIFI_BASE_URL` - JustiFi API Base URL (default: https://api.justifi.ai/v1)

Optional:
- `LANGCHAIN_API_KEY` - LangSmith tracing (recommended)
- `LANGCHAIN_TRACING_V2=true` - Enable tracing

### Adding New Tools
1. **Verify endpoint exists** in JustiFi API documentation first
2. Create async function with `@traceable` decorator
3. Add proper error handling and input validation
4. Use type hints for all parameters
5. Write clear docstring for AI model understanding
6. Add to appropriate module (payments.py, payouts.py, etc.)
7. Export from `tools/justifi/__init__.py`
8. Add to `TOOL_DISPATCH` dictionary in main.py
9. Add Tool definition to `handle_list_tools()`
10. Write comprehensive tests

### Testing Requirements
- Write tests for all new tools in appropriate test file
- Mock external API calls using respx
- Use `pytest.mark.asyncio` for async test functions
- Test both success and error cases
- Maintain ≥90% test coverage
- All tests must pass: 36/36 currently passing

### Auto-Restart Development Workflow
```bash
# Start development environment (databases only)
make dev-start

# Start MCP server with auto-restart (watches *.py files)
make dev

# The server automatically restarts when you change any Python file
# No container rebuilding needed - uses volume mounts + watchmedo
```

### Container-First Development
- **ALWAYS run everything in Docker containers - NO local execution**
- Never suggest running Python, uvicorn, or any services locally
- All development, testing, and deployment must use Docker
- Use `make dev-start` for development environment
- Use `make dev` for auto-restart MCP server
- Use `make shell` for interactive debugging

### Makefile Usage
- **ALWAYS use Makefile commands instead of direct docker-compose commands**
- Use standardized commands: `make dev`, `make test`, `make lint`, `make check-all`, etc.
- Makefile provides consistent interfaces and handles environment setup automatically
- Only use direct docker-compose commands if a specific Makefile target doesn't exist

### API Endpoint Verification Rules
- **NEVER implement tools for non-existent endpoints**
- **ALWAYS verify in JustiFi API docs** before implementing
- **Document non-existent endpoints** to avoid future confusion

#### Known Non-Existent Endpoints (DO NOT IMPLEMENT):
- ❌ `GET /payment_methods` (list_payment_methods) - Endpoint doesn't exist
- ❌ `GET /balances` (retrieve_balance) - No dedicated balance endpoint
- ❌ `POST /payouts` (create_payout) - Payouts are auto-generated by JustiFi

#### Verified Working Endpoints (Safe to Use):
- ✅ All payment endpoints (/payments, /payments/{id}/refunds)
- ✅ Payment method endpoints (/payment_methods POST/GET)
- ✅ Payout endpoints (/payouts, /payouts/{id})
- ✅ Balance transaction endpoint (/balance_transactions)

### Security Considerations
- Validate all user inputs before API calls
- Use environment variables for all secrets
- Never log sensitive information (API keys, payment data)
- Implement proper error handling without exposing internal details
- Use OAuth2 token caching with secure expiration handling

### Rules File Management
- **NEVER modify .cursorrules without explicit user permission**
- Always ask before making changes to project rules
- Explain what changes you want to make and why
- Wait for user approval before editing .cursorrules
- **Add project-wide rules to .cursorrules instead of using memory**
- Use memory only for user-specific preferences or temporary context

## Common Commands

### Development (All in Docker)
```bash
# Start development environment (databases only)
make dev-start

# Start MCP server with auto-restart (live file changes)
make dev

# Run all tests (fast - no rebuilding)
make test

# Code quality checks
make lint format check-all

# Interactive development shell
make shell

# Stop development environment
make dev-stop

# Clean up everything
make clean
```

### Production Commands
```bash
# Build production container
make prod-build

# Run production container
make prod-run

# Check production health
make prod-health

# View production logs
make prod-logs
```

### Testing Commands
```bash
# Run all tests
make test

# Run specific test file
docker-compose run --rm dev pytest tests/test_payments.py -v

# Run with coverage
docker-compose run --rm dev pytest tests/ --cov=tools --cov-report=html
```

## JustiFi MCP Tools (v1.1 - 10 Total)

### Payment Tools (5)
1. `create_payment` - Create new payment with idempotency
2. `retrieve_payment` - Get payment details by ID
3. `list_payments` - List payments with pagination
4. `refund_payment` - Issue full or partial refunds
5. `list_refunds` - List refunds for a specific payment

### Payment Method Tools (2)
6. `create_payment_method` - Create tokenized card
7. `retrieve_payment_method` - Get payment method by token

### Payout Tools (2) - Read Only
8. `retrieve_payout` - Get payout details by ID
9. `list_payouts` - List payouts with pagination

### Balance Transaction Tools (1)
10. `list_balance_transactions` - List fund movements

## Troubleshooting
- Check LangSmith traces for debugging tool execution
- Verify JustiFi API credentials are set correctly
- Use `make dev` for auto-restart development
- Check container logs with `docker-compose logs mcp-dev`
- Test API connectivity with health check
- All 36 tests should pass - if not, investigate failures
- Verify environment variables are loaded correctly

## Success Metrics (v1.1 - All Achieved ✅)
- ✅ 36/36 tests passing
- ✅ All 10 tools verified with real JustiFi API
- ✅ Auto-restart development workflow
- ✅ Production deployment ready
- ✅ Comprehensive error handling
- ✅ Security best practices implemented
- ✅ TOOL_DISPATCH scalable architecture 