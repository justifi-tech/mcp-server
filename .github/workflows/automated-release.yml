name: Automated Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.1

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for setuptools-scm
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION_NO_V=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Run tests
        run: |
          pytest tests/ -v
      
      - name: Update NPM package.json
        if: env.NPM_TOKEN != ''
        run: |
          cd npx-wrapper
          npm version ${{ steps.version.outputs.version_no_v }} --no-git-tag-version
          cd ..
          echo "‚úÖ NPM version updated to ${{ steps.version.outputs.version_no_v }}"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Validate version synchronization
        run: |
          ./scripts/check-version-sync.sh
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Commit version sync
        if: env.NPM_TOKEN != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add npx-wrapper/package.json
          git commit -m "chore: sync NPM version to ${{ steps.version.outputs.version_no_v }} for release
          
          ‚Ä¢ Updated package.json version to match Git tag
          ‚Ä¢ Python version auto-derived from Git tag via setuptools-scm
          ‚Ä¢ Automated by GitHub Actions release workflow"
          git push origin HEAD:main
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.ref.replace('refs/tags/', '');
            const versionNoV = version.replace(/^v/, '');
            
            // Generate release notes
            const releaseNotes = `## JustiFi MCP Server ${version}
            
            ### üéØ Single Source of Truth Versioning
            - **Git Tag**: ${version} (authoritative source)
            - **Python Version**: ${versionNoV} (auto-derived via setuptools-scm)
            - **NPM Version**: ${process.env.NPM_TOKEN ? versionNoV + ' (synced)' : 'not updated (NPM_TOKEN not set)'}
            
            ### üì¶ Installation
            \`\`\`bash
            # Python package
            pip install git+https://github.com/justifi-tech/mcp-server.git@${version}
            
            # NPM package${process.env.NPM_TOKEN ? '' : ' (manual update required)'}
            npx @justifi/mcp-server@${versionNoV}
            \`\`\`
            
            ### üîÑ Automated Release Process
            This release was created automatically by GitHub Actions when the \`${version}\` tag was pushed.
            
            **Generated by**: GitHub Actions Automated Release Workflow
            **Triggered by**: Tag push
            **Timestamp**: ${new Date().toISOString()}
            `;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `JustiFi MCP Server ${version}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to NPM
        if: env.NPM_TOKEN != ''
        run: |
          cd npx-wrapper
          npm publish
          echo "üéâ Successfully published @justifi/mcp-server@${{ steps.version.outputs.version_no_v }} to NPM!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Post-release summary
        run: |
          echo "üéâ Release ${{ steps.version.outputs.version }} completed successfully!"
          echo ""
          echo "üìã Version Summary:"
          echo "  Git Tag: ${{ steps.version.outputs.version }} (single source of truth)"
          echo "  Python: ${{ steps.version.outputs.version_no_v }} (auto-derived via setuptools-scm)"
          if [ -n "$NPM_TOKEN" ]; then
            echo "  NPM: ${{ steps.version.outputs.version_no_v }} (synced and published)"
          else
            echo "  NPM: ‚ö†Ô∏è  not updated (NPM_TOKEN not set)"
          fi
          echo ""
          echo "üîó Links:"
          echo "  Release: https://github.com/justifi-tech/mcp-server/releases/tag/${{ steps.version.outputs.version }}"
          echo "  Python: pip install git+https://github.com/justifi-tech/mcp-server.git@${{ steps.version.outputs.version }}"
          if [ -n "$NPM_TOKEN" ]; then
            echo "  NPM: npx @justifi/mcp-server@${{ steps.version.outputs.version_no_v }}"
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }} 