# Claude PR Implementation Workflow
#
# PURPOSE: Allows Claude to make code changes directly to an existing PR branch
#
# TRIGGERS:
#   - Comment "@claude implement [description]" on any PR
#   - Comment "@claude fix [issue description]" on any PR  
#   - Comment "@claude update [what to update]" on any PR
#
# WHAT IT DOES:
#   - Checks out the PR branch
#   - Makes the requested code changes
#   - Runs tests if available
#   - Commits and pushes changes back to the PR branch
#   - Comments on the PR explaining what was implemented
#
# EXAMPLES:
#   - "@claude implement the error handling suggested in the review"
#   - "@claude fix the TypeScript errors"
#   - "@claude update the documentation for these new functions"
#
# PERMISSIONS:
#   - Full write access to repository contents
#   - Write PR comments and reviews
#   - Push commits to PR branches

name: Claude PR Implementation

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  implement-changes:
    # Only run on PR comments requesting implementation/fixes/updates
    if: |
      github.event.issue.pull_request && 
      (contains(github.event.comment.body, '@claude implement') || 
       contains(github.event.comment.body, '@claude fix') ||
       contains(github.event.comment.body, '@claude update'))
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Get PR details
      id: pr-details
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          return {
            ref: pr.data.head.ref,
            sha: pr.data.head.sha
          };
    
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ fromJson(steps.pr-details.outputs.result).ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Claude Implementation
      uses: anthropics/claude-code-action@beta
      timeout-minutes: 10
      continue-on-error: false
      with:
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        allowed_tools: 'Bash'
        
        # Configure Claude to actively make changes based on requests
        custom_instructions: |
          You are implementing code changes for the JustiFi MCP Server project.
          
          üîß IMPORTANT: Read and follow ALL conventions in CLAUDE.md, especially:
          - Commit message conventions (use format specified)
          - Package management requirements (use uv, not pip)
          - Testing requirements (all tests must pass)
          - Code standards and documentation requirements
          
          Project Context:
          - This is a JustiFi MCP server with comprehensive payment tools
          - Uses OAuth2 Client-Credentials flow with token caching
          - All tests must pass (pytest + pytest-asyncio)
          - Use `uv` package manager, not pip
          - Run `make test` and `make lint` before completing

          üö® CRITICAL VERIFICATION PROCESS:
          After making ANY file changes, you MUST:
          1. Use `git diff` to verify your changes were actually applied to files
          2. Use `git status` to see which files were modified
          3. Use `Read` tool to verify file contents match your intended changes
          4. ONLY proceed to testing/committing if changes are confirmed applied
          5. If changes weren't applied, retry the file modifications

          Implementation Process:
          1. üìñ Read CLAUDE.md for project conventions
          2. üîç Analyze the PR feedback and requested changes
          3. üíª Make the requested changes to files
          4. ‚úÖ **VERIFY CHANGES APPLIED** using git diff and file reading
          5. üß™ Run tests (`make test` or `pytest`)
          6. üîß Run linting (`make lint` or linting tools)
          7. üìù Commit with proper message format from CLAUDE.md
          8. üöÄ Push changes to complete the implementation

          NEVER commit or push without first verifying that your file changes were actually applied!
