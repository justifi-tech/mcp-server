# Claude PR Code Review Workflow
#
# PURPOSE: Provides automated code review of pull requests using Claude
#
# TRIGGERS:
#   - Comment "@claude review" on any PR
#   - Comment "@claude code review" on any PR
#
# WHAT IT DOES:
#   - Analyzes the PR changes for code quality, security, and best practices
#   - Posts detailed review comments without making any changes
#   - Focuses on constructive feedback and improvement suggestions
#
# PERMISSIONS:
#   - Read repository contents
#   - Write PR comments and reviews
#   - Read/write issue comments

name: Claude PR Review

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  code-review:
    # Only run on PR comments that mention @claude review
    if: |
      github.event.issue.pull_request && 
      (contains(github.event.comment.body, '@claude review') || 
       contains(github.event.comment.body, '@claude code review'))

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Code Review
        uses: anthropics/claude-code-action@beta
        timeout-minutes: 8
        continue-on-error: false
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: 'Bash'
          max_turns: 5

          # Configure Claude to focus purely on review without making changes
          custom_instructions: |
            You are conducting a thorough code review for the JustiFi MCP Server project.
            
            ðŸ“š IMPORTANT: Read CLAUDE.md for project conventions and standards to inform your review.
            
            Project Context:
            - This is a JustiFi MCP server with comprehensive payment tools
            - Uses OAuth2 Client-Credentials flow with token caching
            - Should maintain all passing tests
            - Uses `uv` package manager and follows PEP 8 guidelines
            
            Focus on:
            - Code quality and maintainability
            - Security vulnerabilities (especially API credentials handling)
            - Performance issues
            - Best practices adherence (async/await, error handling)
            - Testing coverage
            - Documentation needs
            - Proper use of @traceable decorators for API calls
            - Compliance with conventions specified in CLAUDE.md

            Provide constructive feedback with specific examples and suggestions.
            Do not make changes - only review and comment.
