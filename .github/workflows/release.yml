name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Validate Release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format. Expected: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          if git tag -l | grep -q "^v${{ steps.validate.outputs.version }}$"; then
            echo "❌ Tag v${{ steps.validate.outputs.version }} already exists"
            exit 1
          fi
          echo "✅ Tag v${{ steps.validate.outputs.version }} is available"

  # Job 2: Run Full Test Suite
  full-test-suite:
    name: Full Test Suite
    needs: validate-release
    uses: ./.github/workflows/ci.yml

  # Job 3: Build and Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release environment file
        run: |
          cp env.example .env
          echo "JUSTIFI_ACCOUNT_ID=placeholder" >> .env
          echo "JUSTIFI_API_KEY=placeholder" >> .env
          echo "JUSTIFI_ENVIRONMENT=production" >> .env

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.validate-release.outputs.version }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ needs.validate-release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Update Version in Files
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = ".*"/version = "${{ needs.validate-release.outputs.version }}"/' pyproject.toml

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          git push

  # Job 5: Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, full-test-suite, build-and-push, update-version]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "Using provided release notes"
            NOTES="${{ github.event.inputs.release_notes }}"
          else
            echo "Generating automatic release notes"
            NOTES="## 🚀 JustiFi MCP Server v${{ needs.validate-release.outputs.version }}

### What's New
- This release includes the latest features and bug fixes
- Docker images are available at: \`ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}\`

### Installation
\`\`\`bash
# Using pip
pip install justifi-mcp-server==${{ needs.validate-release.outputs.version }}

# Using Docker
docker pull ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
\`\`\`

### Changes
$(git log --oneline --pretty=format:'- %s' $(git describe --tags --abbrev=0)..HEAD | head -20)

### Documentation
- [API Documentation](https://docs.justifi.ai/mcp)
- [GitHub Repository](https://github.com/${{ github.repository }})

---
**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0)...v${{ needs.validate-release.outputs.version }}"
          fi
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag -a "v${{ needs.validate-release.outputs.version }}" -m "Release v${{ needs.validate-release.outputs.version }}"
          git push origin "v${{ needs.validate-release.outputs.version }}"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: JustiFi MCP Server v${{ needs.validate-release.outputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}

  # Job 6: Post-Release Cleanup
  post-release:
    name: Post-Release Cleanup
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    steps:
      - name: Release summary
        run: |
          echo "## 🎉 Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:latest\` (production)" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}\` (production)" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:dev\` (development)" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:dev-${{ needs.validate-release.outputs.version }}\` (development)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Update documentation if needed" >> $GITHUB_STEP_SUMMARY
          echo "- Notify users of the new release" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for any issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Release created by JustiFi MCP Server Release Pipeline_" >> $GITHUB_STEP_SUMMARY