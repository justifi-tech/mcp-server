name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  # Job 1: CodeQL Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Job 2: Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system -e ".[dev]"

      - name: Run safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Job 3: Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cp env.example .env
          echo "JUSTIFI_ACCOUNT_ID=test_account" >> .env
          echo "JUSTIFI_API_KEY=test_key" >> .env
          echo "JUSTIFI_ENVIRONMENT=test" >> .env

      - name: Build Docker image
        run: |
          docker build --target production -t justifi-mcp-server:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'justifi-mcp-server:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'justifi-mcp-server:security-scan'
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: 'trivy-results.json'

  # Job 4: Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog secret scan
        run: |
          trufflehog git file://. --json --no-update > trufflehog-results.json || true

      - name: Check for secrets in environment files
        run: |
          if [ -f .env ]; then
            echo "⚠️ .env file found - checking for potential secrets"
            grep -E "(api_key|password|secret|token)" .env || echo "No obvious secrets found in .env"
          fi

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: trufflehog-results.json

  # Job 5: SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install SAST tools
        run: |
          pip install bandit semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r python/ modelcontextprotocol/ -f json -o bandit-results.json -v || true

      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-results.json python/ modelcontextprotocol/ || true

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-results
          path: |
            bandit-results.json
            semgrep-results.json

  # Job 6: Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan, sast-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL Analysis**: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scan**: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SAST Scan**: ${{ needs.sast-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Available Reports:" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability reports (Safety, pip-audit)" >> $GITHUB_STEP_SUMMARY
          echo "- Container security scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- Secret scanning (TruffleHog)" >> $GITHUB_STEP_SUMMARY
          echo "- Static analysis (Bandit, Semgrep)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Next Steps:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.dependency-scan.result }}" = "failure" ]; then
            echo "- 🔴 Review dependency vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.container-scan.result }}" = "failure" ]; then
            echo "- 🔴 Address container security issues" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.secret-scan.result }}" = "failure" ]; then
            echo "- 🔴 Investigate potential secret leaks" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.sast-scan.result }}" = "failure" ]; then
            echo "- 🔴 Fix static analysis security findings" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Security Checklist:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Review and update dependencies regularly" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor security advisories" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Rotate API keys and secrets" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update base Docker images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Generated by JustiFi MCP Server Security Pipeline_" >> $GITHUB_STEP_SUMMARY