version: '3.8'

services:
  # PostgreSQL Database (for future conversation history if needed)
  postgres:
    image: postgres:15
    container_name: mcp-servers-postgres-1
    environment:
      POSTGRES_DB: mcp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"  # Use 5434 to avoid conflicts with local postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mcp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (for future session management if needed)
  redis:
    image: redis:7-alpine
    container_name: mcp-servers-redis-1
    ports:
      - "6380:6379"  # Use 6380 to avoid conflicts with local redis
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-servers-pgadmin-1
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mcp_network
    depends_on:
      postgres:
        condition: service_healthy

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcp-servers-redis-commander-1
    environment:
      REDIS_HOSTS: redis:redis:6379
    ports:
      - "8082:8081"
    networks:
      - mcp_network
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  mcp_network:
    driver: bridge 