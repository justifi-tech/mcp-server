openapi: 3.0.0
servers:
- url: https://api.justifi.ai/v1
  description: JustiFi API
info:
  description: "## Introduction\nThe JustiFi API is a REST-based payment processing\
    \ API. Our API has predictable, resource-oriented URLs, accepts JSON, and returns\
    \ JSON. We use HTTP status codes and supply detailed error codes whenever possible.\
    \ We'll provide you with both a `test` and `live` account with which to use our\
    \ API. Each account will have its own API key, and the key you use to authenticate\
    \ each request will determine whether to use your `test` or `live` account. When\
    \ you use your `test` account, it won't affect your `live` data or move any real\
    \ money.\n\n## Getting Started\nTo process a payment with JustiFi, follow these\
    \ steps\n\n- [Get Your Accounts](#get-your-accounts)\n- [Get Your API Keys](#get-your-api-keys)\n\
    - [Authenticate With JustiFi](#authenticate-with-justifi)\n- For Platforms, [Create\
    \ and Onboard Your Sub Accounts](https://docs.justifi.tech/api-spec#tag/Sub-Accounts)\n\
    - [Create a Payment](https://docs.justifi.tech/api-spec#tag/Payments/operation/CreatePayment)\n\
    \n<br>\n\n### Get Your Accounts\nOur customer onboarding team will work with you\
    \ to create your `test` and `live` accounts. For platforms, our team will also\
    \ guide you through setting up your sub accounts onboarding. Once you're up and\
    \ running, you'll have access to the JustiFi API as well as the admin features\
    \ at https://app.justifi.ai where you can see your account overview, payments,\
    \ payouts, issue refunds, etc.\n\n<br>\n\n### Get Your API Keys\nOnce your `test`\
    \ and `live` accounts have been created, you'll have access to generate your API\
    \ keys in the Developer Tools section of the app. You'll need a `test` key and\
    \ a `live` key. Each key will provide you with a client id and a client secret,\
    \ which you'll use to authenticate your API requests. Requests authenticated with\
    \ your `test` key will use your `test` account; requests authenticated with your\
    \ `live` key will use your `live` account. Make sure to store your client secrets\
    \ somewhere secure (like a password manager) because this is the only time they'll\
    \ display in the UI.\n\nAdditionally, we can provide access to a sandbox environment\
    \ upon request.\n\n<br>\n\n### Authenticate With JustiFi\n<PullRight>\n\n#####\
    \ Example OAuth Client Credentials Grant Request\n```sh\ncurl -X POST https://api.justifi.ai/oauth/token\
    \ \\\n    -H 'Content-Type: application/json' \\\n    --data '{\"client_id\":\"\
    [your client id]\",\"client_secret\":\"[your client secret]\"}'\n```\n  #####\
    \ Example Authenticated Response\n```json\n{\n  \"access_token\": \"... this will\
    \ be a very long string and is valid for 24 hours\"\n}\n```\n##### Example Authenticated\
    \ Request\n```sh\ncurl -X POST https://api.justifi.ai/v1/payments \\\n    -H 'Authorization:\
    \ Bearer [access_token]' \\\n    -H 'Content-Type: application/json'\n    -H 'Idempotency-Key:\
    \ a-unique-string-for-the-transaction'\n```\n</PullRight>\n\nJustiFi uses the\
    \ OAuth Client Credentials authentication flow. To access, use your JustiFi client\
    \ id and client secret to POST to https://api.justifi.ai/oauth/token. These are\
    \ valid for 24 hours. The test key is prepended with `test_` and the live key\
    \ is prepended with `live_`.\n\nNext, take the access token in that response and\
    \ pass it in all subsequent requests as the `Authorization` header.\n\nThis token\
    \ is valid for 24 hours, so be sure to handle a `401 - Unauthorized` response\
    \ by getting a new access token via the client credentials grant API.\n\n## Idempotent\
    \ Requests\n<PullRight>\n\n##### Example Request with Idempotency-Key Header\n\
    ```sh\ncurl -X POST https://api.justifi.ai/v1/payments \\\n    -H 'Authorization:\
    \ Bearer [access_token]' \\\n    -H 'Accept: application/json'\n    -H 'Idempotency-Key:\
    \ a-unique-string-for-the-transaction'\n```\n</PullRight>\n\nIn order to guarantee\
    \ that payments and other important transactions are only ever processed a single\
    \ time, we leverage the `Idempotency-Key` header in our payments APIs. This means\
    \ that you MUST provide an `Idempotency-Key` header along with your request, otherwise\
    \ you'll receive an error. If a second request with same idempotent key is processed\
    \ concurrently, it will result in a `409` error instead of double processing.\n\
    \nIf these requests fail with a network timeout or a `5XX` error, they should\
    \ be retried with the same exact parameters. Once they're fully successful, you'll\
    \ receive a `2XX` response. If you POST the same request and `Idempotency-Key`\
    \ again, you'll get the response you originally received back. If you receive\
    \ a `4XX` error, do not retry the request, unless the response code is a `409`.\n\
    \nIf you try the same `Idempotency-Key` with different parameters, your request\
    \ will error and won't be possible to process. The `Idempotency-Key` header is\
    \ only meant for a single transaction; it's there to protect against processing\
    \ the same exact thing more than once. Once the parameters change, a request is\
    \ considered distinct from the original request.\n\nYou may use any string to\
    \ identify your `Idempotency-Key`; we generally recommend using a generated uuid,\
    \ but you may use any unique string.\n\n## Pagination\n<PullRight>\n\n##### Example\
    \ Paginated Request\n```sh\ncurl -X GET https://api.justifi.ai/v1/payments?limit=25&after_cursor=token-from-page-info\
    \ \\\n    -H 'Authorization: Bearer [access_token]' \\\n    -H 'Accept: application/json'\n\
    ```\n##### Example Paginated Response\n```sh\n{\n    \"id\": null,\n    \"type\"\
    : \"array\",\n    \"data\":[\n        { \"id\":\"py_438xBom2Drh55kE1WfyGLg\",\n\
    \          \"amount\": 1000,\n          ... additional response attributes based\
    \ on resource schema\n        }\n    ],\n    \"page_info\": {\n      \"has_previous\"\
    : false,\n      \"has_next\": true,\n      \"start_cursor\": \"WyIyMDIyLTAxLTExIDE1OjI3OjM2LjAyNzc3MDAwMCIsImNhNjQwMTk1LTEzYzMtNGJlZi1hZWQyLTU3ZjA1MzhjNjNiYSJd\"\
    ,\n      \"end_cursor\": \"WyIyMDIyLTAxLTExIDEyOjU5OjQwLjAwNTkxODAwMCIsImQ0Njg5MGE2LTJhZDItNGZjNy1iNzdkLWFiNmE3MDJhNTg3YSJd\"\
    \n    }\n}\n```\n</PullRight>\nAll top-level API resources have support for bulk\
    \ fetches via `array` API methods. JustiFi uses cursor-based pagination, which\
    \ supports `limit`, `before_cursor` and `after_cursor`. Each response will have\
    \ a `page_info` object that contains the `has_next` and `has_previous` fields,\
    \ which tells you if there are more items before or after the current page.  The\
    \ `page_info` object also includes `start_cursor` and `end_cursor` values which\
    \ can be used in conjunction with `before_cursor` and `after_cursor` to retrieve\
    \ items from the API one page at a time.\n\n#### Standard `array` API Request\
    \ Parameters\n\n<table layout=\"fixed\">\n    <tr>\n        <th style=\"width:\
    \ 200px\">Parameter</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n\
    \        <td style=\"vertical-align: top\"><code>limit</code></td>\n        <td>\n\
    \            The number of resources to retrieve.<br />\n            <b>type</b>:\
    \ <code>integer</code><br />\n            <b>default</b>: <code>25</code><br />\n\
    \            <b>minimum</b>: <code>1</code><br />\n            <b>maximum</b>:\
    \ <code>100</code>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align:\
    \ top\"><code>after_cursor</code></td>\n        <td>\n            Token to fetch\
    \ the next page of a list.<br />\n            <b>type</b>: <code>string</code><br\
    \ />\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align:\
    \ top\"><code>before_cursor</code></td>\n        <td>\n            Token to fetch\
    \ the previous page of a list.<br />\n            <b>type</b>: <code>string</code><br\
    \ />\n        </td>\n    </tr>\n</table>\n\nThe `after_cursor`/`before_cursor`\
    \ parameter determines which page of results will be returned.\nIf `after_cursor`\
    \ is the encoded `id` of the last record in the collection `has_next` will be\
    \ false and you'll get an empty array response. If `before_cursor` is the encoded\
    \ `id` of the first record in the collection `has_previous` will be false and\
    \ you'll get an empty array response.\n\nThe `limit` parameter determines the\
    \ maximum number of results included in each response. If there are fewer\nrecords\
    \ available than the `limit` value, the response will include all available records.\
    \ The maximum value\nallowed is 100 with a default value of 25. If the `limit`\
    \ value is an invalid type, the default value of 25 is used.\n\n#### Standard\
    \ API Response Structure\nAll of our responses are contained in the same envelope,\
    \ for arrays the id field will be null\nand the object will be an array.\n\n<table\
    \ layout=\"fixed\">\n    <tr>\n        <th style=\"width: 200px\">Attribute</th>\n\
    \        <th>Description</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align:\
    \ top\"><code>id</code></td>\n        <td>\n            The id of the object returned.\
    \ Will be null for arrays.<br />\n            <b>type</b>: <code>string</code><br\
    \ />\n            <b>default</b>: <code>\"a uuid\"</code>\n        </td>\n   \
    \ </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>type</code></td>\n\
    \        <td>\n            The type of object returned.<br />\n            <b>type</b>:\
    \ <code>string</code><br />\n            <b>default</b>: <code>\"array\"</code>\n\
    \        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"\
    ><code>data</code></td>\n        <td>\n            The resource OR an array of\
    \ the requested resources.<br />\n            <b>type</b>: <code>array | object</code><br\
    \ />\n            <b>Notes</b>: May be an empty array <code>[]</code> if no resources\
    \ are available.<br />\n        </td>\n    </tr>\n    <tr>\n        <td style=\"\
    vertical-align: top\"><code>page_info</code></td>\n        <td>\n            The\
    \ object containing pagination information.<br />\n            <b>type</b>: <code>object</code><br\
    \ />\n            <b>Notes</b>: Contains <code>has_previous</code>, <code>has_next</code>,\
    \ <code>start_cursor</code> and <code>end_cursor</code>\n        </td>\n    </tr>\n\
    </table>\n\n## Testing\nUse these card numbers to test successful transactions\
    \ as well as various error scenarios. Make sure to authenticate your requests\
    \ using your `test` API key (these cards won't work for `live` payments).\n\n\
    #### Successful Test Cards\n<table layout=\"fixed\">\n  <tr>\n    <th style=\"\
    width: 200px\">Number</th>\n    <th>Brand</th>\n    <th>CVC</th>\n    <th>Date</th>\n\
    \  </tr>\n  <tr>\n    <td><code>4242424242424242</code></td>\n    <td>Visa</td>\n\
    \    <td>Any 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>4000056655665556</code></td>\n    <td>Visa (debit)</td>\n    <td>Any\
    \ 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n    <td><code>5555555555554444</code></td>\n\
    \    <td>Mastercard</td>\n    <td>Any 3 digits</td>\n    <td>Any future date</td>\n\
    \  </tr>\n  <tr>\n    <td><code>2223003122003222</code></td>\n    <td>Mastercard\
    \ (2-series)</td>\n    <td>Any 3 digits</td>\n    <td>Any future date</td>\n \
    \ </tr>\n    <tr>\n    <td><code>5200828282828210</code></td>\n    <td>Mastercard\
    \ (debit)</td>\n    <td>Any 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n\
    \    <tr>\n    <td><code>5105105105105100</code></td>\n    <td>Mastercard (prepaid)</td>\n\
    \    <td>Any 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>378282246310005</code></td>\n    <td>American Express</td>\n    <td>Any\
    \ 4 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n    <td><code>371449635398431</code></td>\n\
    \    <td>American Express</td>\n    <td>Any 4 digits</td>\n    <td>Any future\
    \ date</td>\n  </tr>\n  <tr>\n    <td><code>6011000990139424</code></td>\n   \
    \ <td>Discover</td>\n    <td>Any 3 digits</td>\n    <td>Any future date</td>\n\
    \  </tr>\n  <tr>\n    <td><code>3056930009020004</code></td>\n    <td>Diners Club</td>\n\
    \    <td>Any 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>36227206271667</code></td>\n    <td>Diners Club (14 digit card)</td>\n\
    \    <td>Any 3 digits</td>\n    <td>Any future date</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>3566002020360505</code></td>\n    <td>JCB</td>\n    <td>Any 3 digits</td>\n\
    \    <td>Any future date</td>\n  </tr>\n  <tr>\n    <td><code>6200000000000005</code></td>\n\
    \    <td>UnionPay</td>\n    <td>Any 3 digits</td>\n    <td>Any future date</td>\n\
    \  </tr>\n</table>\n\n#### Declined Test Cards\n<table layout=\"fixed\">\n  <tr>\n\
    \    <th style=\"width: 200px\">Number</th>\n    <th>Description</th>\n  </tr>\n\
    \  <tr>\n    <td><code>4000000000000101</code></td>\n    <td>\n      If a CVC\
    \ number is provided, the cvc_check fails.\n    </td>\n  </tr>\n  <tr>\n    <td><code>4000000000000341</code></td>\n\
    \    <td>\n      Tokenizing this card succeeds, but attempts to make a payment\
    \ fail.\n    </td>\n  </tr>\n  <tr>\n    <td><code>4000000000000002</code></td>\n\
    \    <td>Payment is declined with a card_declined code.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>4000000000009995</code></td>\n    <td>\n      Payment is declined\
    \ with a card_declined code. The decline_code attribute is insufficient_funds.\n\
    \    </td>\n  </tr>\n  <tr>\n    <td><code>4000000000009987</code></td>\n    <td>\n\
    \      Payment is declined with a card_declined code. The decline_code attribute\
    \ is lost_card.\n    </td>\n  </tr>\n  <tr>\n    <td><code>4000000000009979</code></td>\n\
    \    <td>\n      Payment is declined with a card_declined code. The decline_code\
    \ attribute is stolen_card.\n    </td>\n  </tr>\n  <tr>\n    <td><code>4000000000000069</code></td>\n\
    \    <td>Payment is declined with an expired_card code.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>4000000000000127</code></td>\n    <td>Payment is declined with\
    \ an invalid_cvc code.</td>\n  </tr>\n  <tr>\n    <td><code>4000000000000119</code></td>\n\
    \    <td>Payment is declined with a gateway_error code.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>4242424242424241</code></td>\n    <td>\n      Payment is declined\
    \ with an card_number_invalid code as the card number fails the Luhn check.\n\
    \    </td>\n  </tr>\n</table>\n\n#### Successful Bank Account (ACH)\n<table layout=\"\
    fixed\">\n  <tr>\n    <th>Routing Number</th>\n    <th>Account Number</th>\n \
    \ </tr>\n  <tr>\n    <td><code>110000000</code></td>\n    <td><code>000123456789</code></td>\n\
    \  </tr>\n</table>\n\n#### Declined Bank Accounts (ACH)\n<table layout=\"fixed\"\
    >\n  <tr>\n    <th>Routing Number</th>\n    <th>Account Number</th>\n    <th>Payment\
    \ Error</th>\n  </tr>\n  <tr>\n    <td><code>110000000</code></td>\n    <td><code>000222222227</code></td>\n\
    \    <td>\n      Insufficient Funds\n    </td>\n  </tr>\n  <tr>\n    <td><code>110000000</code></td>\n\
    \    <td><code>000333333335</code></td>\n    <td>\n      The account doesn't support\
    \ debits\n    </td>\n  </tr>\n  <tr>\n    <td><code>110000000</code></td>\n  \
    \  <td><code>000111111113</code></td>\n    <td>\n      The account is closed\n\
    \    </td>\n  </tr>\n  <tr>\n    <td><code>110000000</code></td>\n    <td><code>000111111116</code></td>\n\
    \    <td>\n      The account doesn't exist\n    </td>\n  </tr>\n</table>\n\n##\
    \ HTTP Errors\nThe JustiFi API may return a number of standard HTTP errors due\
    \ to invalid requests. Some common errors are described\nbelow to help you build\
    \ with JustiFi.\n\n#### Bad Request\nThe server cannot process the request. This\
    \ error is most likely due to malformed request syntax.\n- code: `400`\n- status:\
    \ `Bad Request`\n\n#### Unauthorized\nSimilar to a `403 Forbidden`, but specifically\
    \ when authentication is provided and has failed, or has not been provided.\n\
    This error is most likely due to not including your API key in the request header.\n\
    - code: `401`\n- status: `Unauthorized`\n\n#### Payment Required\nThere was an\
    \ error processing the payment. This response is returned when errors occur while\
    \ tokenizing the payment method, such\nas an invalid cvc or an expiration date\
    \ in the past. This can also occur when making a payment and the card is declined.\n\
    In that case, the error message will provide more specific information about why\
    \ the request was declined.\n- code: `402`\n- status: `Payment Required`\n\n####\
    \ Forbidden\nThe request was valid, but you are unable to execute the request.\
    \ This error is most likely due to the API key that\nwas used not having the necessary\
    \ permissions, or attempting a prohibited action such as creating a duplicate\n\
    record where one already exists.\n- code: `403`\n- status: `Forbidden`\n\n####\
    \ Not Found\nThe requested resource could not be found, but may be available in\
    \ the future. This error is most likely due to\nrequesting a resource by `id`\
    \ that doesn't exist. You'll want to double check that you're referencing the\
    \ correct\n`id` and that it exists on your account.\n- code: `404`\n- status:\
    \ `Not Found`\n\n#### Concurrent Request Error\nThe request has an identical `Idempotency-Key`\
    \ header for another request which either failed OR is processing at the same\
    \ time. You can retry these requests without risk of double processing.\n- code:\
    \ `409`\n- status: `Conflict`\n\n#### Unprocessable Entity\nThe request was well-formed,\
    \ but was unable to be processed due to semantic errors. This error is most likely\
    \ due to\nincluding invalid data in `POST`, `PATCH`, and `PUT` requests. Double\
    \ check the request documentation to make sure\nyou're supplying the required\
    \ attributes, and that the attribute types are correct.\n- code: `422`\n- status:\
    \ `Unprocessable Entity`\n\n#### Internal Server Error\nAn internal server error\
    \ occurred due to an unexpected condition. This error is most likely due to an\
    \ issue with our\nservers.\n- code: `500`\n- status: `Internal Server Error`\n\
    \n#### Error Codes\n\nMany of our `4XX` errors will provide an error code in addition\
    \ to their HTTP status. Here is a list of our error codes and a brief description\
    \ of the error to provide more context when applicable.\n\n<table layout=\"fixed\"\
    >\n  <tr>\n    <th style=\"width: 300px\">Error Code</th>\n    <th>Description</th>\n\
    \  </tr>\n  <tr>\n    <td><code>acct_last_four_required</code></td>\n    <td>Missing\
    \ required parameter: acct_last_four</td>\n  </tr>\n  <tr>\n    <td><code>amount_below_minimum</code></td>\n\
    \    <td>Amount must be greater than 50</td>\n  </tr>\n  <tr>\n    <td><code>amount_must_be_an_integer</code></td>\n\
    \    <td>Amount must be an integer</td>\n  </tr>\n  <tr>\n    <td><code>amount_required</code></td>\n\
    \    <td>Missing required parameter: amount</td>\n  </tr>\n  <tr>\n    <td><code>amount_above_maximum</code></td>\n\
    \    <td>Amount must be lower than 100000000 ($1,000,000.00)</td>\n  </tr>\n \
    \ <tr>\n    <td><code>amount_below_minimum</code></td>\n    <td>Amount must be\
    \ greater than 50</td>\n  </tr>\n  <tr>\n    <td><code>application_fee_rate_id_required</code></td>\n\
    \    <td>Missing required parameter: application_fee_rate_id</td>\n  </tr>\n \
    \ <tr>\n    <td><code>application_fee_required</code></td>\n    <td>Missing required\
    \ parameter: application_fee</td>\n  </tr>\n  <tr>\n    <td><code>brand_required</code></td>\n\
    \    <td>Missing required parameter: brand</td>\n  </tr>\n  <tr>\n    <td><code>capture_strategy_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: capture_strategy</td>\n  </tr>\n  <tr>\n\
    \    <td><code>card_decline_rate_limit_exceeded</code></td>\n    <td>This card\
    \ has been declined too many times. You can try to charge this card again after\
    \ 24 hours. We suggest reaching out to your customer to make sure they have entered\
    \ all of their information correctly and that there are no issues with their card.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>card_declined</code></td>\n    <td>The card has\
    \ been declined. When a card is declined, the error includes a decline_code attribute\
    \ specifying the reason for the decline, and a network_decline_code provided by\
    \ the card network, if available.</td>\n  </tr>\n  <tr>\n    <td><code>card_name_required</code></td>\n\
    \    <td>Missing required parameter: card_name</td>\n  </tr>\n  <tr>\n    <td><code>card_number_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: card_number</td>\n  </tr>\n  <tr>\n\
    \    <td><code>card_number_required</code></td>\n    <td>Missing required parameter:\
    \ card_number</td>\n  </tr>\n  <tr>\n    <td><code>charge_expired_for_capture</code></td>\n\
    \    <td>The charge cannot be captured as the authorization has expired. Auth\
    \ and capture charges must be captured within 7 days.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>country_invalid</code></td>\n    <td>Format is invalid for parameter:\
    \ country</td>\n  </tr>\n  <tr>\n    <td><code>currency_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: currency</td>\n  </tr>\n  <tr>\n   \
    \ <td><code>currency_required</code></td>\n    <td>Missing required parameter:\
    \ currency</td>\n  </tr>\n  <tr>\n    <td><code>customer_id_required</code></td>\n\
    \    <td>Missing required parameter: customer_id</td>\n  </tr>\n  <tr>\n    <td><code>customer_max_payment_methods</code></td>\n\
    \    <td>The maximum number of PaymentMethods for this Customer has been reached.\
    \ Either detach some PaymentMethods from this Customer or proceed with a different\
    \ Customer.</td>\n  </tr>\n  <tr>\n    <td><code>email_invalid</code></td>\n \
    \   <td>The email address is invalid (e.g., not properly formatted). Check that\
    \ the email address is properly formatted and only includes allowed characters.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>email_required</code></td>\n    <td>Missing required\
    \ parameter: email</td>\n  </tr>\n  <tr>\n    <td><code>expired_card</code></td>\n\
    \    <td>The card has expired. Please check the expiration date or try a different\
    \ card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>gateway_account_id_required</code></td>\n\
    \    <td>Missing required parameter: gateway_account_id</td>\n  </tr>\n  <tr>\n\
    \    <td><code>gateway_authentication_error</code></td>\n    <td>The payment network\
    \ returned an authentication error</td>\n  </tr>\n  <tr>\n    <td><code>gateway_error</code></td>\n\
    \    <td>There was an issue processing your payment with the gateway. Please try\
    \ again later.</td>\n  </tr>\n  <tr>\n    <td><code>gateway_idempotency_error</code></td>\n\
    \    <td>The gateway detected concurrent requests using this idempotency key</td>\n\
    \  </tr>\n  <tr>\n    <td><code>gateway_rate_limit_error</code></td>\n    <td>Too\
    \ many requests hit the API too quickly. We recommend an exponential back-off\
    \ of your requests.</td>\n  </tr>\n  <tr>\n    <td><code>gateway_ref_id_required</code></td>\n\
    \    <td>Missing required parameter: gateway_ref_id</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>gateway_timeout_error</code></td>\n    <td>There was a timeout with\
    \ the gateway, we recommend retrying using the Should-Retry header</td>\n  </tr>\n\
    \  <tr>\n    <td><code>idempotency_concurrent_request</code></td>\n    <td>We\
    \ detected concurrent requests using this idempotency key</td>\n  </tr>\n  <tr>\n\
    \    <td><code>idempotency_key_required</code></td>\n    <td>Idempotency-Key is\
    \ a required header</td>\n  </tr>\n  <tr>\n    <td><code>idempotency_params_mismatch</code></td>\n\
    \    <td>The request parameters do not match those of a previous request using\
    \ this idempotency key</td>\n  </tr>\n  <tr>\n    <td><code>idempotency_request_in_progress</code></td>\n\
    \    <td>Another request using this idempotency key is currently in progress</td>\n\
    \  </tr>\n  <tr>\n    <td><code>internal_server_error</code></td>\n    <td>An\
    \ unexpected error has occurred. JustiFi engineers will investigate the error\
    \ and contact you if any remediation steps are necessary.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>invalid_address</code></td>\n    <td>The card\u2019s address is\
    \ incorrect. Please check the address or try a different card or payment method.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>invalid_card_number</code></td>\n    <td>The card\u2019\
    s number is incorrect. Please check the number or try a different card or payment\
    \ method.</td>\n  </tr>\n  <tr>\n    <td><code>invalid_card_brand</code></td>\n\
    \    <td>The card\u2019s brand is not supported. Please use Visa, Mastercard,\
    \ American Express, or Discover, or try a different payment method.</td>\n  </tr>\n\
    \  <tr>\n    <td><code>invalid_characters</code></td>\n    <td>This value provided\
    \ to the field contains characters that are unsupported by the field.</td>\n \
    \ </tr>\n  <tr>\n    <td><code>invalid_charge_amount</code></td>\n    <td>Your\
    \ transaction was declined because the payment amount is outside the limits set\
    \ by your card issuer. Please try a different card or payment method.</td>\n \
    \ </tr>\n  <tr>\n    <td><code>invalid_cvc</code></td>\n    <td>The card\u2019\
    s security code is incorrect. Please check the security code or try a different\
    \ card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>invalid_expiry_month</code></td>\n\
    \    <td>The card\u2019s expiration month is incorrect. Please check the expiration\
    \ date or try a different card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>invalid_expiry_year</code></td>\n\
    \    <td>The card\u2019s expiration year is incorrect. Please check the expiration\
    \ date or try a different card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>invalid_expiry_date</code></td>\n\
    \    <td>The provided expiration date is invalid. Please check the expiration\
    \ date or try a different card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>invalid_zip_code</code></td>\n\
    \    <td>The card\u2019s postal code is incorrect. Please check the postal code\
    \ or try a different card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>month_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: month</td>\n  </tr>\n  <tr>\n    <td><code>not_authenticated</code></td>\n\
    \    <td>Not authenticated</td>\n  </tr>\n  <tr>\n    <td><code>not_authorized</code></td>\n\
    \    <td>Not authorized</td>\n  </tr>\n  <tr>\n    <td><code>parameter_missing</code></td>\n\
    \    <td>Missing required parameter</td>\n  </tr>\n  <tr>\n    <td><code>payment_fully_refunded</code></td>\n\
    \    <td>The refund cannot be processed because the associated payment is fully\
    \ refunded</td>\n  </tr>\n  <tr>\n    <td><code>payment_intent_cannot_be_captured</code></td>\n\
    \    <td>Payment Intent status is '%{status}' so it cannot be captured</td>\n\
    \  </tr>\n  <tr>\n    <td><code>payment_intent_not_found</code></td>\n    <td>Payment\
    \ intent not found</td>\n  </tr>\n  <tr>\n    <td><code>payment_intent_unexpected_state</code></td>\n\
    \    <td>You cannot provide a new payment method to a PaymentIntent when it has\
    \ a status of requires_capture, canceled, or succeeded</td>\n  </tr>\n  <tr>\n\
    \    <td><code>payment_method_not_found</code></td>\n    <td>Payment method not\
    \ found</td>\n  </tr>\n  <tr>\n    <td><code>payment_method_required</code></td>\n\
    \    <td>Missing required parameter: payment_method</td>\n  </tr>\n  <tr>\n  \
    \  <td><code>payment_method_token_required</code></td>\n    <td>Missing required\
    \ parameter: payment_method_token</td>\n  </tr>\n  <tr>\n    <td><code>payment_outside_refund_window</code></td>\n\
    \    <td>The refund cannot be processed because the associated payment is outside\
    \ the refund window</td>\n  </tr>\n  <tr>\n    <td><code>postal_code_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: postal_code</td>\n  </tr>\n  <tr>\n\
    \    <td><code>refund_error</code></td>\n    <td>An error occurred during refunding\
    \ your payment, JustiFi engineers have been alerted and are working on a solution</td>\n\
    \  </tr>\n  <tr>\n    <td><code>refund_exceeds_amount_available</code></td>\n\
    \    <td>The refund cannot be processed because the refund amount exceeds the\
    \ available funds</td>\n  </tr>\n  <tr>\n    <td><code>refund_exceeds_payment_amount</code></td>\n\
    \    <td>The refund cannot be processed because the refund amount exceeds the\
    \ associated payment amount</td>\n  </tr>\n  <tr>\n    <td><code>refund_reason_invalid</code></td>\n\
    \    <td>Refund reason must be one of the following: %{Refund::REASONS}</td>\n\
    \  </tr>\n  <tr>\n    <td><code>resource_not_found</code></td>\n    <td>Resource\
    \ not found</td>\n  </tr>\n  <tr>\n    <td><code>state_invalid</code></td>\n \
    \   <td>Format is invalid for parameter: state</td>\n  </tr>\n  <tr>\n    <td><code>token_already_used</code></td>\n\
    \    <td>The token provided has already been used. You must create a new token\
    \ before you can retry this request.</td>\n  </tr>\n  <tr>\n    <td><code>token_in_use</code></td>\n\
    \    <td>The token provided is currently being used in another request. This occurs\
    \ if your integration is making duplicate requests simultaneously.</td>\n  </tr>\n\
    \  <tr>\n    <td><code>transfer_required</code></td>\n    <td>Missing required\
    \ parameter: transfer</td>\n  </tr>\n  <tr>\n    <td><code>unexpected_parameter</code></td>\n\
    \    <td>Unexpected parameter for this request</td>\n  </tr>\n  <tr>\n    <td><code>verification_invalid</code></td>\n\
    \    <td>Format is invalid for parameter: verification</td>\n  </tr>\n  <tr>\n\
    \    <td><code>year_invalid</code></td>\n    <td>Format is invalid for parameter:\
    \ year</td>\n  </tr>\n  <tr>\n    <td><code>service_not_allowed</code></td>\n\
    \    <td>This account is not permitted to process the type of transaction being\
    \ requested, or the surcharge amount is invalid</td>\n  </tr>\n  <tr>\n    <td><code>do_not_honor</code></td>\n\
    \    <td>This card has been rejected by the issuing bank. Please try a different\
    \ card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>do_not_retry</code></td>\n\
    \    <td>This card has been rejected. Please try a different card or payment method.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>refund_in_progress</code></td>\n    <td>A refund\
    \ for this payment is already in progress</td>\n  </tr>\n  <tr>\n    <td><code>invalid_sub_account</code></td>\n\
    \    <td>The sub account cannot process a payment for this card. Please contact\
    \ customer support.</td>\n  </tr>\n  <tr>\n    <td><code>new_card_issued</code></td>\n\
    \    <td>The transaction was denied because the issuing bank has issued a new\
    \ card. Please try a different card or payment method.</td>\n  </tr>\n  <tr>\n\
    \    <td><code>account_closed</code></td>\n    <td>The account associated with\
    \ this payment method is been closed. Please try a different card or payment method.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>restricted_card</code></td>\n    <td>This card\
    \ has a restriction preventing approval for this transaction. Please try a different\
    \ card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>restricted_card</code></td>\n\
    \    <td>This card has a restriction preventing approval for this transaction.\
    \ Please try a different card or payment method.</td>\n  </tr>\n  <tr>\n    <td><code>insufficient_funds</code></td>\n\
    \    <td>This card has insufficient funds. Please try a different card or payment\
    \ method.</td>\n  </tr>\n  <tr>\n    <td><code>exceeds_card_limit</code></td>\n\
    \    <td>The payment amount would exceed a limit placed on this card.</td>\n \
    \ </tr>\n  <tr>\n    <td><code>pin_tries_exceeded</code></td>\n    <td>The number\
    \ of PIN retries has been exceeded.</td>\n  </tr>\n  <tr>\n    <td><code>incorrect_pin</code></td>\n\
    \    <td>The entered PIN is incorrect.</td>\n  </tr>\n  <tr>\n    <td><code>pin_required</code></td>\n\
    \    <td>A PIN is required.</td>\n  </tr>\n  <tr>\n    <td><code>payment_outside_void_window</code></td>\n\
    \    <td>The void cannot be processed because the associated payment is outside\
    \ the void window. Try a refund instead.</td>\n  </tr>\n  <tr>\n    <td><code>issuer_not_available</code></td>\n\
    \    <td>The card issuer is not available. Please try again later.</td>\n  </tr>\n\
    \  <tr>\n    <td><code>amount_too_small</code></td>\n    <td>The specified amount\
    \ is less than the minimum amount allowed. Use a higher amount and try again.</td>\n\
    \  </tr>\n  <tr>\n    <td><code>amount_too_large</code></td>\n    <td>The specified\
    \ amount is less than the minimum amount allowed. Use a higher amount and try\
    \ again.</td>\n  </tr>\n  <tr>\n    <td><code>gateway_error_please_retry</code></td>\n\
    \    <td>There was a temporary issue processing this payment. Please try again.</td>\n\
    \  </tr>\n</table>\n\n## Network Errors\nWe provide the network error code, and\
    \ the network error category to help inform you how to handle a decline. These\
    \ are only returned when a transaction fails while trying to process on the card\
    \ network. Please take a look at each section. The network error category is especially\
    \ relevant for recurring payments. It can reduce retries on transactions which\
    \ will never succeed.\n\n### Network Error Codes\n\nIn addition to the standard\
    \ error codes provided by JustiFi, some errors may include a `network_error_code`\
    \ that provides more specific information about the error from the payment network.\
    \ Here's a list of common `network_error_code` values and their meanings:\n\n\
    | Code | Description | Customer Impact & Suggested Actions |\n|------|--------------|--------------------------------------|\n\
    | 005  | Do not honor (Declined by card association) | The payment was declined\
    \ by the card association. The customer should try a different payment method\
    \ or contact the card issuer for more information. |\n| 100  |  Do not honor (Declined\
    \ by card association) | The payment was declined by the card association. The\
    \ customer should try a different payment method or contact the card issuer for\
    \ more information. |\n| 101  | Expired card | The provided card has expired.\
    \ The customer needs to update with a new, non-expired card or provide a different\
    \ payment method. |\n| 102  | Suspected Fraud | The payment was flagged as potentially\
    \ fraudulent activity. The customer should contact the card issuer to verify the\
    \ transaction. |\n| 104  | Restricted card | The provided card is restricted and\
    \ cannot be used for this transaction type. The customer needs to use a different\
    \ payment method or contact the card issuer. |\n| 106  | Allowable PIN tries exceeded\
    \ | The maximum allowable PIN entry attempts have been exceeded. The customer\
    \ should verify the PIN and try again, or use a different payment method. |\n\
    | 110  | Invalid amount | The payment amount entered is invalid. The customer\
    \ needs to recheck the amount and retry the transaction. |\n| 116  | Not sufficient\
    \ funds | There are insufficient funds in the account to cover this payment. The\
    \ customer should add funds to the account or use a different payment method.\
    \ |\n| 117  | Incorrect PIN or PIN length error | The entered PIN is incorrect\
    \ or has an invalid length. The customer should re-enter the correct PIN and try\
    \ again. |\n| 119  | Transaction not permitted to cardholder | This transaction\
    \ is not permitted for the provided card/account. The customer should contact\
    \ the card issuer or use a different payment method. |\n| 121  | Exceeds withdrawal\
    \ amount limit | The payment amount exceeds the maximum allowed withdrawal limit.\
    \ The customer should try a smaller amount or use a different payment method.\
    \ |\n| 122  | Security violation | A security violation was detected with this\
    \ payment. The customer should contact the card issuer for assistance. |\n| 123\
    \  | Exceeds withdrawal frequency limit | The maximum number of allowed withdrawals\
    \ within the set time period has been exceeded. The customer should try again\
    \ later or use a different payment method. |\n| 124  | Violation of law | This\
    \ payment violates applicable laws or regulations and cannot be processed. The\
    \ customer needs to use a different payment method. |\n| 129  | Suspected counterfeit\
    \ card | The card has been flagged as potentially counterfeit. The customer should\
    \ contact the card issuer immediately. |\n| 131  | Invalid account number | The\
    \ provided account number is invalid. The customer needs to verify the account\
    \ details and try again with the correct information. |\n| 132  | Unmatched card\
    \ expiry date | The provided expiration date does not match the card issuer's\
    \ records. The customer should confirm the correct expiry date and retry. |\n\
    | 134  | Not sufficient funds | There are insufficient funds in the account to\
    \ cover this payment. The customer should add funds to the account or use a different\
    \ payment method. |\n| 152  | Exceeds limit | The payment amount exceeds the maximum\
    \ limit allowed. The customer should try a smaller amount or use a different payment\
    \ method. |\n| 154  | Over monthly limit | The maximum monthly payment limit has\
    \ been exceeded. The customer should try again next month or use a different payment\
    \ method. |\n| 208  | Lost Card / Lost Check | The card or check was reported\
    \ as lost. The customer needs to use a different, valid payment method. |\n| 209\
    \  | Stolen card | The card was reported as stolen. The customer should contact\
    \ the card issuer immediately and use a different payment method. |\n| 213  |\
    \ Invalid account number for card type | The provided account number is invalid\
    \ for the specified card type. The customer needs to verify the account details\
    \ and retry with the correct information. |\n| 231  | Stop payment requested for\
    \ all payments | A stop payment has been requested on this account, so no payments\
    \ can be processed. The customer should contact the card issuer for assistance.\
    \ |\n| 232  | Stop all payments \u2013 account closed | This account has been\
    \ closed, so no payments can be processed. The customer needs to use a different\
    \ payment method or contact support to update the account details. |\n| 237  |\
    \ Deny \u2013 new card issued | A new card has been issued for this account. The\
    \ customer needs to update the payment method with the new card details and retry.\
    \ |\n| 302  | Account closed | The account the customer is trying to pay from\
    \ is closed and cannot be used. The customer needs to update with a different,\
    \ valid payment method. |\n| 317  | Max balance exceeded | This payment would\
    \ cause the account balance to exceed the maximum allowed limit. The customer\
    \ should try a smaller amount or use a different payment method. |\n| 351  | Customer\
    \ PIN authentication required | The customer must authenticate this payment by\
    \ entering the PIN. The customer should follow the prompts to complete PIN authentication.\
    \ |\n| 414  | Void/Full Reversal request unable to process due to network cut-off\
    \ window elapsed | The void or reversal request could not be processed because\
    \ the network cut-off time has passed. A refund may be required instead. |\n|\
    \ 503  | New Account Information | New account information is available for this\
    \ payment method. The customer needs to update the account details and retry the\
    \ payment. |\n| 504  | Do not try again | This payment was declined and should\
    \ not be retried with this payment method. The customer needs to use an alternative\
    \ method. |\n| 505  | Please retry | There was a temporary issue processing this\
    \ payment. The customer should retry the same payment again. |\n| 512  | Service\
    \ not allowed or invalid surcharge amount | This service or surcharge amount is\
    \ not permitted for the account. The customer needs to verify the account details\
    \ or try a different payment type. |\n| 516  | Please retry \u2013 Reasons include:\
    \ Format Error, Unable to route transaction, Switch or issuer unavailable, System\
    \ Busy, Timeout | A temporary issue caused this payment to fail, the customer\
    \ should retry. If it continues to fail, the card issuer should be contacted.\
    \ |\n| 517  | CVV2 Declined | The entered CVV2/CVC security code was declined.\
    \ The customer should verify the code and retry with the correct information.\
    \ |\n| 531  | Retry with 3DS data - 3D Secure authentication is required for this\
    \ transaction, but not supported at this time | This card requires 3D Secure authentication\
    \ which is not currently supported. The customer should use an alternative payment\
    \ method or contact the card issuer. |\n| 528  | Debit/EBT transaction count exceeds\
    \ pre-determined limit in specified time/ Withdrawal limit exceeded | The maximum\
    \ allowed debit/EBT transaction count or withdrawal limit for the given time period\
    \ has been exceeded. The customer should try again later or use a different payment\
    \ method. |\n| 902  | Invalid Transaction | The payment transaction data was invalid\
    \ and could not be processed. The customer needs to verify the payment details\
    \ and retry. |\n| 907  | Card issuer or switch inoperative or processor not available\
    \ | There was an issue with the card issuer's systems or payment processor during\
    \ this transaction. The customer should retry later or use another payment method.\
    \ |\n\n### Network Error Category\nBoth Visa and Mastercard send additional information\
    \ about how to handle a declined payment for recurring payments. Effective May\
    \ 30th, 2025 we pass through this information to help handle failures. We have\
    \ added the `network` and `network_error_category` attributes to declined payments,\
    \ when we get the additional information from the card networks. We are working\
    \ on further classification of errors, for now please only respond to those documented\
    \ here.\n\n| network | network_error_category | Definition |\n|------|--------------|--------------------------------------|\n\
    | VISA | 1 | Issuer will never approve. Do not attempt again. This indicates the\
    \ card is invalid, never existed or block. Cardholders can contact their bank\
    \ for more information. |\n| VISA | 2 | Issuer cannot approve at this time. They\
    \ may try again at another time. This could be related to credit risk, velocity\
    \ controls, or system issues. |\n| VISA | 3 | Issuer cannot approve based on the\
    \ details provided. This might be an invalid cvv, expiration date, etc. Do not\
    \ try again without attempting to obtain additional information. |\n| VISA | R00/R01\
    \ | Recurring payment not allowed on card. Do not attempt again. |\n| MASTERCARD\
    \ | 01 | Updated information needed. Similar to Visa code 3. |\n| MASTERCARD |\
    \ 02 | Try again later. Similar to Visa code 2. |\n| MASTERCARD | 03 | Do not\
    \ try again.  Do not attempt again. Similar to Visa code 1. |"
  version: v1
  title: JustiFi API Documentation
  termsOfService: https://justifi.ai/terms-and-conditions
  x-logo:
    url: https://justifi-brand-assets.s3.us-east-2.amazonaws.com/justifi-light-bg.png
  contact:
    email: api-development@justifi.ai
tags:
- name: Payments
  description: 'To charge a payment method the desired amount, you''ll use a payment.

    You can choose whether to charge a payment method that''s already been

    tokenized or tokenize a new one when you create the payment.

    If a payment fails, the status will reflect it and an error code will be returned.

    You can retrieve information about your payments and refund them if needed.

    '
- name: Payment Intents (use checkouts)
  description: '**We no longer allow new platforms to use this API. Use the [Checkout
    API](https://docs.justifi.tech/api-spec#tag/Checkouts) instead. This API will
    be retired in the future as existing integrators migrate.**


    *Note: Payment Intents do NOT support dynamic fees. A platform may set a custom
    application fee amount that applies to a payment using [Create a Payment](https://docs.justifi.tech/api-spec#tag/Payments/operation/CreatePayment)
    directly.*

    '
- name: Payment Methods
  description: 'Payment methods refer to the specific form of payment each customer
    uses

    (e.g. their credit card). Payment methods are tokenized, then charged at time
    of payment.

    '
- name: Tokenize via Component
  description: "The Tokenize Payment Method web component allows you to securely collect\
    \ your customers' credit card and ACH (bank accout) payment methods without any\
    \ sensitive data entering your system. \n\nThe following guide takes you through\
    \ the few simple steps of integrating the [Tokenize Payment Method web component](https://storybook.justifi.ai/?path=/docs/payment-facilitation-tokenize-payment-method--docs)\
    \ on your platform. We assume you have an activated sub account for payment processing.\n\
    \n*Note: If you want to charge a payment at time of payment method tokenization\
    \ consider using the [Unified Fintech Checkout\u2122 web component](https://docs.justifi.tech/api-spec#tag/Checkout-via-Component)\
    \ instead.*\n\n1. Get an access token\n2. Generate a web component token\n3. Render\
    \ the web component\n4. Handle success/failure events\n5. Listen to payment method\
    \ events\n\n\n### Get an access token\nOn your backend, using your client id and\
    \ client secret from the Developer > API keys section of the JustiFi dashboard,\
    \ generate an [access token](https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken).\n\
    \n```\nfunction getToken() {\n  return fetch('https://api.justifi.ai/oauth/token',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n\
    \    },\n    body: JSON.stringify({\n      \"client_id\": \"YOUR CLIENT ID\",\n\
    \      \"client_secret\": \"YOUR CLIENT SECRET\"\n    })\n  })\n    .then(response\
    \ => response.json())\n    .then(data => data.access_token);\n}\n\nconst token\
    \ = await getToken();\n```\n\n### Generate a web component token\nTo render the\
    \ web component you need to generate a web component token. This is a short lived\
    \ token which is meant to grant short term, fine grained access. The Tokenize\
    \ Payment Method web component requires the role of `write:tokenize:{accountId}`\
    \ with the sub account id you are saving the payment method for. \n\n*Note: Consider\
    \ setting up a [Platform Wallet Account](https://docs.justifi.tech/api-spec#tag/Platform-Wallet-Accounts)\
    \ if your customers will use payment methods accross different sub accounts on\
    \ your platform.*\n```\nasync function getWebComponentToken(token, accountId)\
    \ {\n  const response = await fetch('https://api.justifi.ai/v1/web_component_tokens',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n\
    \      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n\
    \      \"resources\": [`write:tokenize:${accountId}]\n    })\n  });\n  const data\
    \ = await response.json();\n  return data.access_token;\n}\n\nconst webComponentToken\
    \ = await getWebComponentToken(token, subAccountId);\n```\n\n### Render the web\
    \ component\nUse the web component token generated above and the sub account id\
    \ passed to the web component token API to render the [Tokenize Payment Method\
    \ web component](https://storybook.justifi.ai/?path=/docs/payment-facilitation-tokenize-payment-method--docs).\
    \ This will allow you to collect a customer's credit card or ACH payment method.\
    \ It will not process a payment.\n\n```\n<justifi-tokenize-payment-method auth-token=\"\
    ${webComponentToken}\" account-id=\"${subAccountId}\"></justifi-tokenize-payment-method>\n\
    ```\n\n### Handle success/failure events\nThe web component will emit a `submitted`\
    \ event when a payment method is submitted. This event will contain the response\
    \ of the [Create Payment Method API](https://docs.justifi.tech/api-spec#tag/Payment-Methods/operation/CreatePaymentMethod)\
    \ which includes the payment method `token` attribute.\nTo charge a payment to\
    \ the newly tokenized payment method pass this token as payment method token to\
    \ the [Payments API](https://docs.justifi.tech/api-spec#tag/Payments/operation/CreatePayment).\
    \ \n\nAn `error` event means there was an issue with the Tokenize Payment Method\
    \ web component, connecting to the network, etc.\n\n```\n<script>\n  const justifiTokenizePaymentMethod\
    \ = document.querySelector('justifi-tokenize-payment-method');\n  justifiTokenizePaymentMethod.addEventListener('submit-event',\
    \ (event) => {\n    console.log('Submitted data:', event.detail);\n  });\n  justifiTokenizePaymentMethod.addEventListener('error-event',\
    \ (event) => {\n    console.error('error-event:', event.detail);\n  });\n</script>\n\
    ```\n\nAt this point, the payment method has been tokenized and can be used for\
    \ future payments!\n\n### Listen to payment method events\nIn addition to the\
    \ web component events you can listen to [payment method specific events](https://docs.justifi.tech/api-spec#tag/Events)\
    \ via event publisher. To set up an event publisher go to the Developer > Event\
    \ Pubslisher section of the JustiFi dashboard. "
- name: Payment Method Groups
  description: 'Payment method groups are a way to associate payment methods to a
    single group for easy access.

    '
- name: Refunds
  description: 'When you refund a payment, a refund object is created. You can retrieve

    information about the refunds you''ve issued.

    '
- name: Disputes
  description: 'A customer may dispute their payment with the card issuer/bank if
    they believe

    the charge is erroneous. When this happens, a dispute record is created and

    associated with their original payment.

    '
- name: Payouts
  description: 'Each day, a payout containing that day''s funds is automatically created
    for the

    purpose of distributing those funds to the active bank account. Payout amounts
    are calculated by

    summing the associated balance transactions for that specific day.


    Payouts are processed each day at 11:30am US/Central time. A Platform can also
    configure each

    sub account to have an expedited payout priority. If this is enabled, the payout
    will be settled on the

    day the payout is generated. Otherwise, standard payouts will settle the next
    business day.

    '
- name: Balance Transactions
  description: 'Balance transactions are the reflection of any movement of funds that
    affects the balance of an account.

    Oftentimes, a single financial transaction (like a payment) will result in the
    creation of many balance

    transactions in order to document the flow of funds between multiple accounts.
    Other financial transactions

    that result in balance transactions include refunds, disputes, and payouts.

    '
- name: Ach Return Fees
  description: 'ACH return fees are fees charged by financial institutions when an
    ACH (Automated Clearing House) transaction

    is returned due to insufficient funds or other reasons.

    If an ACH transaction is returned for any reason, the financial institution may
    charge a fee to the sender of the transaction.

    These fees can vary depending on the policies of the financial institution and
    the reason for the return.

    '
- name: Sub Accounts
  description: 'Sub Accounts are the representation of your platform''s customers
    for payment processing in JustiFi and are associated with your platform account.

    To gain approval for payment processing each of your customers need to be onboarded
    as a business via [web compoenent](https://docs.justifi.tech/api-spec#tag/Onboarding-via-Component),
    [hosted onboarding](https://docs.justifi.tech/api-spec#tag/Hosted-Onboarding)
    or [API](https://docs.justifi.tech/api-spec#tag/Onboarding-via-API).

    During the onboarding process a sub account is automatically created for each
    business and updated along the way.

    Payments can be processed through a sub account once it''s status is `enabled`.

    | Status             | Description |

    | -----------        | ----------- |

    | created            | this sub account has been created (via Sub Accounts API),
    but we haven''t received their onboarding entry yet |

    | submitted          | we''ve received this sub account''s onboarding entry (via
    hosted onboarding or API) and we''re reviewing their information |

    | information_needed | we reviewed this sub account''s onboarding entry and found
    an issue; we need more information before we can enable this account |

    | enabled            | this sub account is approved to process payments _note:
    test accounts are automatically enabled_ |

    | rejected           | this sub account didn''t pass approval, so they won''t
    be able to process payments |

    | disabled           | this sub account was previously approved, but has since
    become ineligible to process payments (e.g. due to fraud) |

    | archived           | this sub account has been archived; they won''t be able
    to process payments (but their record will remain for historical reasons) |

    '
- name: Platform Wallet Accounts
  description: "A Platform Wallet Account allows you to store payment methods centrally\
    \ and use them across multiple sub accounts within your platform.\nThis feature\
    \ enables you to maintain a single source of stored payment methods while processing\
    \ payments through different sub accounts.\n\n## Enable a Platform Wallet Account\n\
    *Note: You can choose a sub account as your platform_wallet_account once it is\
    \ underwritten and enabled for payments.*\n\nContact us at [customer_success@justifi.tech](mailto:customer_success@justifi.tech)\
    \ to enable the `platform_wallet_account` setting for your designated platform\
    \ wallet account.\n\n## Key Features\nOnce enabled, you can:\n- Store payment\
    \ methods in the designated platform wallet account\n- Use these payment methods\
    \ across your platform's sub accounts\n- Group payment methods for easier management\
    \ using [PaymentMethodGroups](https://docs.justifi.tech/api-spec#tag/Payment-Method-Groups),\
    \ to associate multiple payment methods to your customer\n\n## Using Platform\
    \ Wallet Payment Methods\n*Note: While the PaymentMethods and Payments API allow\
    \ you to tokenize a payment method we strongly suggest using the [Unified Fintech\
    \ Checkout](https://storybook.justifi.ai/?path=/docs/payment-facilitation-unified-fintech-checkout%E2%84%A2--docs)\
    \ or [Tokenize Payment Method](https://storybook.justifi.ai/?path=/docs/payment-facilitation-tokenize-payment-method--docs)\
    \ web components instead to avoid PCI scope*\n\n### 1. Manage Payment Methods\n\
    Create and organize payment methods in your platform wallet account. All payment\
    \ method operations require the platform wallet account ID in the Sub-Account\
    \ header.\n\n```\n// Example: Create payment method group\nconst group = await\
    \ fetch('https://api.justifi.ai/v1/payment_method_groups', {\n  method: 'POST',\n\
    \  headers: {\n    'Authorization': `Bearer ${token}`,\n    'Sub-Account': platformWalletAccountId,\
    \  // Platform wallet account\n    'Content-Type': 'application/json'\n  }\n});\n\
    \n// Example: Add payment methods to group\nconst updatedGroup = await fetch(`https://api.justifi.ai/v1/payment_method_groups/${groupId}`,\
    \ {\n  method: 'PATCH',\n  headers: {\n    'Authorization': `Bearer ${token}`,\n\
    \    'Sub-Account': platformWalletAccountId,  // Platform wallet account\n   \
    \ 'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    \"payment_method_ids\"\
    : [\"pm_walletaccxyz\", \"pm_walletaccabc\"]\n  })\n});\n```\n\n### 2. Process\
    \ Payments\nYou can process payments using wallet payment methods either through\
    \ the [Unified Fintech Checkout web component](https://storybook.justifi.ai/?path=/docs/payment-facilitation-unified-fintech-checkout%E2%84%A2--docs)\
    \ or via API\n\n#### Via Checkout Component\n[Checkout via Component Walkthrough](https://docs.justifi.tech/api-spec#tag/Checkout-via-Component)\n\
    ```\n// Create checkout\nconst checkout = await fetch('https://api.justifi.ai/v1/checkouts',\
    \ {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${token}`,\n\
    \    'Sub-Account': processingSubAccountId,  // Processing sub account\n    'Content-Type':\
    \ 'application/json'\n  },\n  body: JSON.stringify({\n    \"amount\": 1799,\n\
    \    \"description\": \"Example item\",\n    \"payment_method_group_id\": \"pmg_walletGroupId\"\
    , // Group from wallet account\n    \"origin_url\": \"http://localhost:3000\"\
    \  // Required for component\n  })\n});\n\n// Render component\n<justifi-checkout\n\
    \  auth-token=\"${webComponentToken}\"\n  checkout-id=\"${checkout.id}\">\n</justifi-checkout>\n\
    ```\n\n#### Via API\n```\n// Create checkout\nconst checkout = await fetch('https://api.justifi.ai/v1/checkouts',\
    \ {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${token}`,\n\
    \    'Sub-Account': processingSubAccountId,  // Processing sub account\n    'Content-Type':\
    \ 'application/json'\n  },\n  body: JSON.stringify({\n    \"amount\": 1799,\n\
    \    \"description\": \"Example item\",\n    \"payment_method_group_id\": \"pmg_walletGroupId\"\
    \ // Group from wallet account\n  })\n});\n\n// Complete checkout with wallet\
    \ payment method\nconst completion = await fetch(`https://api.justifi.ai/v1/checkouts/${checkoutId}/complete`,\
    \ {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${token}`,\n\
    \    'Sub-Account': processingSubAccountId,  // Processing sub account\n    'Content-Type':\
    \ 'application/json'\n  },\n  body: JSON.stringify({\n    \"payment_token\": \"\
    pm_walletPaymentMethodToken\"\n  })\n});\n```\n\n## Updating Wallet Payment Methods\n\
    - You can update a payment method via the [payment methods API](https://docs.justifi.tech/api-spec#tag/Payment-Methods/operation/UpdatePaymentMethod)\n\
    - Updates should always be made to the payment method in the platform wallet account\n\
    - Any changes made to the platform wallet payment method automatically propagate\
    \ to all cloned payment methods across sub accounts\n- Available update options\
    \ include:\n  - Card expiration date\n  - Payment method metadata\n- The system\
    \ maintains consistency by:\n  - Automatically syncing updates to all cloned versions\
    \ of the payment method\n\n## Important Notes\n- Header Requirements:\n  - Use\
    \ **platform wallet account ID** for:\n    - Creating/managing payment methods\n\
    \    - Creating/managing payment method groups\n  - Use **processing sub account\
    \ ID** for:\n    - Creating checkouts\n    - Completing payments\n- The system\
    \ automatically:\n  - Validates wallet payment method access\n  - Creates payment\
    \ method clones for processing sub accounts\n  - Returns new sub account specific\
    \ tokens in responses\n- All sub accounts must be on the same platform as the\
    \ platform wallet account\n\nFor complete details on specific endpoints, see:\n\
    - [Checkout via Component](https://docs.justifi.tech/api-spec#tag/Checkout-via-Component)\n\
    - [Checkout via API](https://docs.justifi.tech/api-spec#tag/Checkouts/operation/CreateCheckout)\n\
    - [Payments API](https://docs.justifi.tech/api-spec#tag/Payments/operation/CreatePayment)\n"
- name: Onboarding via Component
  description: "In order to process payments, each of your customers must be onboarded\
    \ on the JustiFi platform. Once they are added they go through an approval process.\
    \ JustiFi's [PaymentProvisioning web component](https://storybook.justifi.ai/?path=/docs/entities-payment-provisioning--docs)\
    \ allows you to collect the required business and financial information from each\
    \ of your customers. Once approved, your customer can process payments through\
    \ JustiFi.\n\nTo onboard a new business via PaymentProvisioning web component\n\
    \n1. Get an access token\n2. Create a business\n3. Generate a Web Component Token\n\
    4. Render the PaymentProvisioning web component\n5. Handle success/failure events\
    \ of the web component\n6. Check the sub account's status\n\n\n### Get an access\
    \ token\nOn your backend, using your client id and client secret from the Developer\
    \ > API keys section of the JustiFi dashboard, generate an [access token](https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken).\n\
    \n```\nfunction getToken() {\n  return fetch('https://api.justifi.ai/oauth/token',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n\
    \    },\n    body: JSON.stringify({\n      \"client_id\": \"YOUR CLIENT ID\",\n\
    \      \"client_secret\": \"YOUR CLIENT SECRET\"\n    })\n  })\n  .then(response\
    \ => response.json())\n  .then(data => data.access_token);\n}\n\nconst token =\
    \ await getToken();\n```\n\n### Create a Business\nFrom your backend create a\
    \ business using the [Business API](https://docs.justifi.tech/api-spec#tag/Business/operation/CreateBusiness).\
    \ A business only requires one parameter (e.g. `legal_name`) but you can pass\
    \ as much information about your customer as you have. When you render the web\
    \ component all the data you passed to the business will be pre-filled in the\
    \ form and can be updated by your customer. \n```\nasync function createBusiness(token)\
    \ {\n  const response = await fetch('https://api.justifi.ai/v1/entities/business',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n\
    \      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n\
    \      \"legal_name\": \"First Business\"\n    })\n  });\n  const data = await\
    \ response.json();\n  return data;\n}\n\nconst business = await createBusiness(token);\n\
    ```\n\n### Generate a Web Component Token\nTo render the PaymentProvisioning web\
    \ component, you must generate a web component token. This is a short lived token\
    \ which is meant to grant short term, fine grained access. The web component requires\
    \ the role of `write:business:${businessId}` with the id of the business you created\
    \ in the previous step.\n```\nasync function getWebComponentToken(token, businessId)\
    \ {\n  const response = await fetch('https://api.justifi.ai/v1/web_component_tokens',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n\
    \      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n\
    \      \"resources\": [`write:business:${businessId}`]\n    })\n  });\n  const\
    \ data = await response.json();\n  return data.access_token;\n}\n\nconst webComponentToken\
    \ = await getWebComponentToken(token, business.id);\n```\n\n### Render the PaymentProvisioning\
    \ web component\nUsing the web component token generated above and the business\
    \ id, render the [PaymentProvisioning web component](https://storybook.justifi.ai/?path=/docs/entities-payment-provisioning--docs).\
    \ This will allow your customer to provide all business information required for\
    \ payment processing\n```\n<justifi-payment-provisioning auth-token=\"${webComponentToken}\"\
    \ business-id=\"${business.id}\"></justifi-payment-provisioning>\n```\n\n### Handle\
    \ success/failure events of the web component\nThe web component makes an API\
    \ request every time the user moves to a `Next` step and when the user submits\
    \ the form. Whenever the web component receives an API response it emits a `submitted`\
    \ event that contains the API response.\n\nWhen the form is submitted we provision\
    \ the business and create a sub account for the business. The `submitted` event\
    \ data will contain the response from the [Provisioning API request](https://docs.justifi.tech/api-spec#tag/Provisioning/operation/ProductProvisioning).\
    \ If the provisioning request was successful the response will include the `sub_account_id`\
    \ attribute of that newly created sub account. Otherwise, an error message can\
    \ be presented to the user. Our example below covers both.\n\nThe `error` event\
    \ means there was an issue with the PaymentProvisioning form connecting to the\
    \ network, etc.\n\n```\n<script>\n  const justifiPaymentProvisioning = document.querySelector('justifi-payment-provisioning');\n\
    \  justifiPaymentProvisioning.addEventListener('submit-event', (event) => {\n\
    \    if (event.details.data) {\n      console.log(\"Form sumbission succeeded!\"\
    );\n    } else {\n      console.log(\"An error occured\")\n    }\n  });\n  justifiPaymentProvisioning.addEventListener('error-event',\
    \ (event) => {\n    console.log(event);\n  });\n</script>\n```\n\n### Check the\
    \ sub account's status\nOnce your business submits the onboarding form\n1. We\
    \ will provision your business for payment processing and create a `sub account`\
    \ for this business as mentioned above. This sub account is the representation\
    \ of your business for payment processing.\n2. We'll review the submitted information.\
    \ This underwriting process can take up to a few business days. Once approved\
    \ the status of the sub account will be updated to `enabled` and payments can\
    \ be processed. \n\nIn order to check the account's onboarding status, call the\
    \ [Get a Sub Account endpoint](https://docs.justifi.tech/api-spec#tag/Sub-Accounts/operation/GetSubAccount)\
    \ or use an event publisher to subscribe to the [`sub_account.updated` events](https://docs.justifi.tech/api-spec#tag/Events/operation/subAccountEvent)\n\
    \n#### Retrieve a sub account\n\n```\nasync function getBusiness(token, accountId)\
    \ {\n  const response = await fetch(`https://api.justifi.ai/v1/sub_accounts/${accountId}`,\
    \ {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n\
    \      'Authorization': `Bearer ${token}`\n    }\n  });\n  const data = await\
    \ response.json();\n  return data;\n}\n\nconst business = await getBusiness(toke,\
    \ account.id);\n```"
- name: Hosted Onboarding
  x-traitTag: true
  description: "In order to process payments, each of your customers (whom we refer\
    \ to as `businesses`) will have to be onboarded on our platform. Once they are\
    \ added they go through an approval process. JustiFi's hosted onboarding provides\
    \ you with an easy-to-implement, user-friendly way to collect the required business\
    \ and financial information from each business within your platform. Once approved,\
    \ your business can process payments through JustiFi.\n\nTo onboard a new business\
    \ via hosted onboarding\n1. Create a business\n2. Include JustiFi hosted onboarding\
    \ in your application\n3. (optional) Listen to success/fail message\n4. Check\
    \ the underwriting status of the sub account connected to the business\n\n\n\n\
    ### Create a business\n\n#### Create a business\n```sh\ncurl -X POST \\\n  https://api.justifi.ai/v1/entities/business\
    \ \\\n  -H 'Authorization: Bearer {access_token}' \\\n  -H 'Content-Type: application/json'\
    \ \\\n  -d '{\n    \"legal_name\": \"legal business name\"\n  }'\n```\n\nUse the\
    \ entities API to [create a business](https://docs.justifi.tech/api-spec#tag/Business/operation/CreateBusiness)\
    \ on JustiFi that is associated with your platform. You will need the `business_id`\
    \ from the business you create for the next step.\n\n### Include JustiFi hosted\
    \ onboarding in your application\nTo present the JustiFi hosted onboarding form\
    \ to your user, create an iframe with a source of `https://onboarding.justifi.ai/v1/provisioning/BUSINESS_ID`,\
    \ where `BUSINESS_ID` is the `business_id` that was created in the previous step.\
    \ This iframe will present your user with a multi-step form where they can enter\
    \ the business and financial information needed for approval. Upon submission,\
    \ a success message will display.\n\n(*Note: Passing a `sub_account_id` to the\
    \ iframe instead of a `business_id` is still supported but will be deprecated\
    \ soon*)\n\n### (optional) Listen to success/fail message\n\n#### Listen to success/fail\
    \ message\n```js\nconst handleOnboardingCompletion = (e) => {\n  const { eventType\
    \ } = e.data;\n  if (eventType === 'submitSuccess') {\n    // Handle successful\
    \ onboarding\n  }\n  if (eventType === 'submitFailure') {\n    // Handle failed\
    \ onboarding\n  }\n};\n\nwindow.addEventListener('message', handleOnboardingCompletion);\n\
    ```\n\nWhen the onboarding is completed, success or failure, the JustiFi iframe\
    \ will send a postMessage. This allows your platform to take a next step, for\
    \ example closing a modal, or redirecting to another page.\n\n### Check the underwriting\
    \ status of the sub account connected to the business\n\nOnce your business submits\
    \ the onboarding form\n1. We will provision your business for payment processing\
    \ and create a `sub account` for this business. This sub account is the representation\
    \ of your business for payment processing.\n2. We'll review the submitted information.\
    \ This approval process can take up to a few business days. In order to check\
    \ the account's onboarding status, call the [Get a Sub Account endpoint](https://docs.justifi.tech/api-spec#tag/Sub-Accounts/operation/GetSubAccount)\
    \ or use an event publisher to subscribe to the [`sub_account.updated` events](https://docs.justifi.tech/api-spec#tag/Events/operation/subAccountEvent)\n\
    \n#### Retrieve a sub account\n```sh\ncurl -X GET https://api.justifi.ai/v1/sub_accounts/ACCOUNT_ID\
    \ \\\n    -H 'Authorization: Bearer [access_token]' \\\n    -H 'Accept: application/json'\n\
    ```\n\n\n"
- name: Onboarding via API
  description: "In order to process payments, each of your customers (whom we refer\
    \ to as `businesses`) will have to be onboarded on the JustiFi platform. Once\
    \ they are added they go through an approval process. JustiFi's onboarding API\
    \ allows you to utilize your own onboarding frontend to collect the required business\
    \ and financial information from each of your businesses. Once approved, your\
    \ business can process payments through JustiFi.\n\nTo onboard a new business\
    \ via the API\n1. Create a business\n2. Create a bank account\n3. Upload documents\n\
    4. Accept terms and conditions\n5. Provision the business\n6. Check the sub account's\
    \ status\n\n\n### Create a business\n\n#### Create a business\n```sh\ncurl -X\
    \ POST \\\n  https://api.justifi.ai/v1/entities/business \\\n  -H 'Authorization:\
    \ Bearer {access_token}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n\
    \    \"legal_name\": \"Business name\"\n  }'\n```\n\nUse the business API to [create\
    \ a business](https://docs.justifi.tech/api-spec#tag/Business/operation/CreateBusiness)\
    \ on JustiFi that is associated with your platform. The create business API endpoint\
    \ does not require any parameters but they will be required when the business\
    \ is provisioned (see step 5).\nYou will need the ID from the business you create\
    \ for the next steps.\n\n\n### Create a bank account\nUse the bank account API\
    \ to [create a bank account](https://docs.justifi.tech/api-spec#tag/Bank-Account/operation/CreateBankAccount).\
    \ This bank account will be used to pay out earnings for payment processing to\
    \ the business.\n\n\n### Upload documents\nUse the document API to [upload a document](https://docs.justifi.tech/api-spec#tag/Document/operation/CreateDocument).\
    \ The minimum document requirement (for small businesses and sole proprietors)\
    \ is a voided check.\n\n\n### Accepte terms and conditions\nUse the terms and\
    \ conditions API to [accept terms for payment processing](https://docs.justifi.tech/api-spec#tag/Terms-and-Conditions/operation/TermsAndConditions).\
    \ \n\n### Provision the business\n\n#### Provision the business for payment processing\n\
    ```sh\ncurl -X POST \\\n  https://api.justifi.ai/v1/entities/provisioning \\\n\
    \  -H 'Authorization: Bearer {access_token}' \\\n  -H 'Content-Type: application/json'\
    \ \\\n  -d '{\n      \"business_id\": \"biz_123\",\n      \"product_category\"\
    : \"payment\"\n      }'\n```\n\nOnce you have submitted all business related information\
    \ use the provisioning API to [provision the business for payment processing](https://docs.justifi.tech/api-spec#tag/Provisioning/operation/ProductProvisioning).\
    \ At this point all required parameters for payment processing are validated.\
    \ An error is returned if any fields are missing. \nIf successful, the product\
    \ provisioning request will create a sub account associated with the business.\n\
    The response will include the ID of that associated sub account. It is required\
    \ for any payment processing related API requests.\n\n### Check the sub account\
    \ status\n\n#### Retrieve a sub account\n```sh\ncurl -X GET https://api.justifi.ai/v1/sub_accounts/ACCOUNT_ID\
    \ \\\n    -H 'Authorization: Bearer [access_token]' \\\n    -H 'Accept: application/json'\n\
    ```\n\nOnce you have provisioned the busiess, we'll review their information.\
    \ This approval process can take up to a few business days. In order to check\
    \ the associated sub account's onboarding status, call the [Get a Sub Account\
    \ endpoint](https://docs.justifi.tech/api-spec#tag/Sub-Accounts/operation/GetSubAccount)\
    \ or use an event publisher to subscribe to the `sub_account.updated` events.\n"
- name: Proceeds
  description: 'Proceeds represent your platform''s take-home portion of the fees
    from your sub account''s financial transactions.

    Proceeds are batched together according to the payout schedule configured on your
    account, then transferred

    to your active bank account.

    '
- name: EventBridge (AWS) Delivery
  x-traitTag: true
  description: "Integrate your app with Amazon EventBridge (https://aws.amazon.com/eventbridge)\
    \ to manage large volumes of\nevent notifications and receive JustiFi events using\
    \ an event bus.\n\nEventBridge lets you process events at the rate that works\
    \ for your tech stack without getting\noverwhelmed. It is highly scalable and\
    \ resilient, and lets you accept more webhook traffic while\nreducing your infrastructure\
    \ cost and complexity.\n\n**When you're ready to get started:**\n\n- Go to EventBridge\
    \ in your AWS Console\n- Create an Event Bus to allow events from another account\n\
    - Add the specified policy as a resource-policy to the event bus\n```\n{\n  \"\
    Version\": \"2012-10-17\",\n  \"Statement\": [{\n    \"Sid\": \"allow_justifi_account_to_put_events\"\
    ,\n    \"Effect\": \"Allow\",\n    \"Principal\": {\n      \"AWS\": \"arn:aws:iam::<justifi-account-id>:root\"\
    \n    },\n    \"Action\": \"events:PutEvents\",\n    \"Resource\": \"arn:aws:events:<aws-region>:<aws-account-id>:event-bus/<aws-event-bus-name>\"\
    \n  }]\n}\n```\n\n*Contact JustiFi to get our AWS account id*\n\n\nEventBridge\
    \ allows events to be sent to multiple targets.\nThe following example will send\
    \ those events to a Cloudwatch Log Group\n\n- Go to CloudWatch in your AWS Console\n\
    - Create a Log Group\n\n\nBack on EventBridge:\n- Create an Event Rule to receive\
    \ JustiFi Events inside previously created event bus\n- Add the following event\
    \ pattern \n```\n{\n  \"source\": [\"justifi.events\"]\n}\n```\n- Add CloudWatch\
    \ Log Group as a target\n- You can either type the log group name or select it\
    \ in the list\n\nIn the Developer Tools section of the JustiFi app:\n- Add an\
    \ event publisher with EventBridge delivery method and enter the ARN for your\
    \ event bus (you\u2019ll also choose which event types will publish). We recommend\
    \ starting with a test account.\n- Test the publisher by prompting one of the\
    \ event types you chose and making sure you receive the published event\n"
- name: Webhook Delivery
  x-traitTag: true
  description: "In addition to direct EventBridge publishing, we offer event delivery\
    \ to your app via webhooks.\nWebhooks are a reliable method to subscribe to our\
    \ published events via an API endpoint.\n\nWebhooks are secured by signature verification,\
    \ which you will need to verify by generating a SHA-256 hex using the following\
    \ information:\n\n| Parameter  | Header            | Value                   \
    \                                        |\n|------------|-------------------|-----------------------------------------------------------------|\n\
    | Timestamp  | JUSTIFI-TIMESTAMP | ISO string format                         \
    \                      |\n| Signature  | JUSTIFI-SIGNATURE | String          \
    \                                                |\n| Algorithm  | -----------------\
    \ | SHA-256                                                         |\n| Secret\
    \ Key | ----------------- | Found in your event publisher's page             \
    \               |\n| Message    | ----------------- | String in the format `<timestamp_header>.<received_event_json>`\
    \ |\n\nTo verify the signature simply compare the generated SHA-256 hex against\
    \ it; if it is successful the webhook signature is valid.\n\nHere is a code example\
    \ for reference:\n```ruby\ndef webhook_signature_valid?(signature, received_event,\
    \ timestamp, secret_key)\n  timestamp_payload = \"#{timestamp}.#{received_event.to_json}\"\
    \n  algorithm = OpenSSL::Digest.new(\"sha256\")\n  hex = OpenSSL::HMAC.hexdigest(algorithm,\
    \ secret_key, timestamp_payload)\n\n  signature == hex\nend\n```\n\nIf you are\
    \ using any of our SDKs, we provide a convenient method for validating the signature.\n\
    \nAfter validating, you must respond with a `200 OK` with in **5 seconds**. In\
    \ the event of a non-200 response or a delay of more than 5 seconds, delivery\
    \ will be\nattempted again. For live accounts, webhooks are retried 10 times over\
    \ 24 hours.\nFor test accounts, webhooks are retried 3 times over 1 hour.\n\n\
    **When you're ready to get started:**\n\n- Create the endpoint on your server\
    \ that will receive published events\n- Add an event publisher with webhook delivery\
    \ method in the Developer Tools section of the app (you\u2019ll subscribe your\
    \ endpoint to the event types of your choice). We recommend starting with a test\
    \ account.\n- Test the publisher by prompting one of the event types you chose\
    \ and making sure your subscribed endpoint receives the published event\n"
- name: JustiFi Web Components
  description: 'JustiFi Web Components offer an expanding collection of components
    that can be used in virtually any application,

    no matter the tech stack. They can be installed using NPM, or included via CDN
    using a script tag. To learn more,

    see the documentation in [our public GitHub repositiory](https://github.com/justifi-tech/web-component-library#documentation).

    '
- name: JustiFi SDK
  description: 'We offer support for using our API via a Ruby SDK and a Node SDK.
    The projects are

    open source and available on Github. You can view full documentation on usage
    there.

    As more languages are supported, they will be added to this list:


    - [JustiFi Ruby SDK](https://github.com/justifi-tech/justifi-ruby)

    - [JustiFi Node SDK](https://github.com/justifi-tech/justifi-node)

    - [JustiFi Mobile SDK](https://github.com/justifi-tech/justifi-react-native-sdk)

    '
- name: Events
  description: 'Our event publishing system allows you to subscribe to certain events
    on the JustiFi platform.

    Once subscribed, your application will be notified anytime those events occur,
    so you can react

    accordingly in real time. We support two event-delivery mechanisms; you can receive
    them via

    webhooks or directly to an AWS Eventbridge event bus.


    We will publish the following events:


    - payment.created

    - payment.succeeded

    - payment.failed

    - payment.pending

    - payment.authorized

    - payment.captured

    - payment.canceled

    - payment.refunded

    - payment.refund.updated

    - payment.dispute.created

    - payment.dispute.closed

    - payment_method.created

    - payment_method.updated

    - payment_method.bin_mapped

    - payment_intent.attached

    - payment_intent.created

    - payment_intent.requires_capture

    - payment_intent.succeeded

    - payout.bank_account.activated

    - payout.created

    - payout.paid

    - payout.failed

    - proceeds.payout.created

    - sub_account.updated

    - application_fee_rate.created

    - application_fee_rate.updated

    - entity.business.created

    - entity.business.updated

    - entity.identity.created

    - entity.identity.updated

    - entity.address.created

    - entity.address.updated

    - entity.document.created

    - entity.document.uploaded

    - entity.bank_account.created

    - checkout.created

    - checkout.completed

    - checkout.completion.succeeded

    - checkout.completion.failed

    - account.payment_setting.updated

    - account.payout_setting.updated

    - terminal_order.created

    - terminal_order.updated

    '
- name: Business
  description: 'Creating a business entity is an essential step in integrating your
    business operations with JustiFi.

    It is also necessary to comply with local laws and regulations governing your
    operations.

    To create a new business entity, you will need to provide basic information such
    as the business name, website, business type, business structure, and your industry.

    You may also add details like the legal address, tax ID, and ownership structure.

    Providing detailed and accurate information about the business entity is essential
    for ensuring legal compliance, financial accuracy, and it can also help avoid
    potential legal and financial issues.


    Business classification encompasses both the type of business and its operational
    structure.

    Use the following table to map your current business type and structure to the
    correct business classification:


    | Business Type     | Business Structure                    | Business Classification
    |

    | -------------     | ------------------                    | -----------------------
    |

    | individual        | *                                     | sole_proprietor         |

    | for_profit        | unincorporated_association            | sole_proprietor         |

    | for_profit        | sole_proprietorship                   | sole_proprietor         |

    | for_profit        | public_partnership                    | partnership             |

    | for_profit        | private_partnership                   | partnership             |

    | for_profit        | private_corporation                   | corporation             |

    | for_profit        | public_corporation                    | public_company          |

    | for_profit        | multi_llc                             | limited                 |

    | for_profit        | single_llc                            | limited                 |

    | non_profit        | incorporated                          | non_profit              |

    | non_profit        | unincorporated                        | non_profit              |

    | government_entity | government_unit                       | government              |

    | government_entity | government_instrumentality            | government              |

    | government_entity | tax_exempt_government_instrumentality | government              |


    Please, choose whether you want to use the business classification (preferred)
    or the business type and structure (deprecated), but not both. Business classification
    is a simplification of business type and structure with the same goals.


    _Note: If you use the classification, it will not have the exact same correspondence
    with the business type and structure from the previous table because there are
    fewer classifications than types/structures._

    '
- name: Identity
  description: 'Creating an identity establishes a unique identification for people
    associated with your business. Accurately providing your information is crucial
    in ensuring that your identity is properly verified and maintained, and can have
    important consequences for a variety of financial and legal transactions. Our
    platform has a secure database for storing identity information, encryption and
    other security measures to protect your sensitive data.

    '
- name: Address
  description: 'Creating an Address entity provides the necessary information to identify
    and locate a physical address. It may be associated with an Identity entity or
    Business entity to provide a more complete picture of the parties involved.

    '
- name: Document
  description: 'Create/manage documents attached to your businesses and identities.
    When a document record

    is created using this API the response object returns a presigned url used to
    upload this

    document to an encrypted bucket. The presigned url can then be used to upload
    directly to an

    AWS s3 bucket, with a command like `curl -X PUT -T /path/to/file.pdf "insert presigned
    url"`.

    You must use the PUT method. This can also be accomplished from a backend or mobile
    app, from the browser or using our web components.

    After upload is complete the status changes from `pending` to `uploaded`.

    '
- name: Bank Account
  description: 'Create/manage bank accounts for your businesses. These accounts are
    used for paying out earnings for usage of various products, for example card processing.

    '
- name: Terms and Conditions
  description: 'Legally binding rules and agreements that outline the rights, responsibilities,
    and limitations governing the use of the platform.

    '
- name: Provisioning
  description: 'Provisioning API for Products serves as an automated interface to
    configure resources based on your current entities informations, for example creating
    an account for card processing.

    '
- name: Payment Method Migration
  description: '## Data Import

    JustiFi enables you to transfer your existing customer data and payment methods.  Please
    contact our [Customer Success Department](mailto:customer_success@justifi.tech)
    to begin work with your existing processor to securely transfer your information.


    ### PGP Encryption

    Many processors utilize PGP to encrypt sensative data.  You can find useful information
    about PGP by looking over the [GPG](http://gnupg.org/) documentation.

    Once you understand the basics, you will want to [import a public key](http://www.gnupg.org/gph/en/manual.html#AEN84).  Please
    contact our [Customer Success Department](mailto:customer_success@justifi.tech)
    if you have any questions.


    #### JusitiFi''s PGP migration key


    |  |  |

    |--|--|

    |**Key ID** |`A4546473910D638E`|

    |**User ID**|`JustiFi Import Key (PCI) support-migrations@justifi.tech`|

    |**Fingerprint**|`0E7C 2E45 F62D 98D7 F7B8 776B A454 6473 910D 638E`|

    |**Key Type**|`RSA`|

    |**Key Size**|4096|



    ##### Public Key

    ```bash

    -----BEGIN PGP PUBLIC KEY BLOCK-----


    mQINBGS+8MwBEACibKFR3bZb4huE7piU0fX3zbLpIq+Jnvs79v5ywVMYvu1kgzbb

    XcA0Td2IO0PXuG/cgH4JxH1qVG+cSGjSQ0rOpoQWG5hwOrvRVH17SUQMkZxgDwQb

    pCo1N44L+Ij23wW3JlyVb/FbVTK6uctjPmOoonFtzMG2ObKyeTqc1yWFqaIypjvG

    AUG2SzgLVqTTLIE5AySyOIpHTnQUwky4J/yCaWhcEJcsQ9GFHx/e+gAlReydMxfa

    WhTlMf9Cjm/WaOKVVKrTVicOtfVsFSWmxgtVMK5Smo0YGyF57Oz36Axy63g3QyYs

    6XhWiuqCYpnH9EYHNDZaD6G1tZMyczon/rQNtCemUJeM96eyoVi8zK9wCDQT0fQ3

    06JqqQtJqI3pAdzQ/VNYwm57XzZPXpFQ7ZGW+0JWb0UfGiwHgnOd/NHsy8imMQiK

    FLQjsFnDKVpRgXjqiRUX2/2Qs22XKprKmr6ptNweFLwU1dW0qBkmeM2GBaq7hAdq

    Kx6zoPwhYMe7ZxzKO2brvBcxMexhIBYAgdZR3AIdqLWnkGBHY4A3rXYAXqBOiryA

    SFK9r6VKr8CihdF4sasdf0uALEOiSYzcXarc5k1rlPxD9ldXduv+RdoodoHVW//+

    ID+kvQQSwVOMSF8In+9j+Hhu2Ma3BLDRAqz/Vip9vB9frUn/YyqxjoZQxQARAQAB

    tDpKdXN0aUZpIEltcG9ydCBLZXkgKFBDSSkgPHN1cHBvcnQtbWlncmF0aW9uc0Bq

    dXN0aWZpLnRlY2g+iQJXBBMBCABBFiEEDnwuRfYtmNf3uHdrpFRkc5ENY44FAmS+

    8MwCGwMFCQPCZwAFCwkIBwICIgIGFQoJCAsCBBYCAwECHgcCF4AACgkQpFRkc5EN

    Y44txBAAk89sEzllrgo2f2EJ8esYrZUeOE7Rn9jNdBvb87DO2S4In6XuWWS3SjvO

    aTR9aeJcwueJEZIYzz69k2PWr72CWhW7SQwkjz4on/PH6/jWK2+1en1J5NYVy3SR

    kPrVpcasKYf07fG5DmaUiTla7/S2NxBu+kl5ZXNaaBghg/8TCDjL7J7AcJaYKuRm

    71Tc83ISG+PfbiJ8G4FBq5sOoA6s+6MwBZOYlSCX13V4DvdM6wT6kaJWFnI1ny/w

    4X67NBlW/bCXAdLO3nduAe9fGf9OYkB+/CVsqHHHr7Y/PUbQLqwkrHw29vZlenXG

    wHi6NbKHahgYe0KvrTqIa3iOhEusu5+JrIN13PPnLs8tGQQBANjW4KrbYGwwZQGp

    88jnzeT5BsMTEEHxCoFH4b7vkdap8KaveI6UswZk7LKV8lxF+nG6hBnHuiaGDTfD

    6mH4UQiDTnz2AQt2F4TiKEHn2FwT6VZMWaH3Yljz7915YW805ZWaIn2G5ACZKnqd

    vZ/1YarzyNiwwtkIBaWd6twaK5Gzo0uR7u19L/upobOQ2rZxm2czoAewf2sqef5g

    xHezpfSiu7cpoSUAYbfJI1xMHyJgdOu1nBI8O94bt7iy2aUreIUUnq4uha/TnSdb

    t0iyvPT+fVbvELzzMQdL5zQRqtl9R9w9byNfE8eQvnL5Z00BRze5Ag0EZL7wzAEQ

    AMF7UzULBsQmK4LwiuwVOcrYnN0ORQ/AXqDt09cOksDON4UzPrZxvq0FTggi9mzj

    U83onhtOv9mjoLYmgdaHUEhhzw167lmWbpwmD/w8PoLgmssrqUcnZH8nYsdYXpkR

    ZCTsd68nJdhBQLHjpnH9Ok6nB3ApiPaktIF1Z5Lu8pdPKQVSVHsEUOJ+qZM4cGXk

    WsqZLhmjycXnoF5ezSrUik8KwJL13fVFT7NCKagZazcCP57dNMF+sN6VZQSsvCOC

    jGjErIGJ6jZ4Qwdd9XVgygxtT5AEj0UakLZJZJfvO9o1ssxQ0TqOQyIj4n/45fRQ

    nNSWR03LubksurvduZxpaI1s8p5G3WH2mSVocV+AZV2vmcz/GAFLOS1Ik6EalRDh

    DVfGy5o/0D+rURs1zpcCwn1C3bib+LES9S6rnahkhzfqn1J456CxXzVtaqKJrfYq

    l2oYd7C18kbarzBLIlEsygWf3yJi/VnsE/2beV2fa7BtQwvdongq9w8IMPzNyXEU

    I/7QycB6+YURvt51bhmulSDcFcy6zL1AphLcn/2HQcQs9CMTpwc6QxBuOevgd4Hx

    zRIweYzwND+a8pEzIoHIsfpPkWNFOzGWTj5apE9IwbrQ4oVk+Yd7KrcbZHDLTmtd

    /yfAQtgGeiO7ns6APdggzKhGMTuTsLPla9zrY1aLSVOLABEBAAGJAjwEGAEIACYW

    IQQOfC5F9i2Y1/e4d2ukVGRzkQ1jjgUCZL7wzAIbDAUJA8JnAAAKCRCkVGRzkQ1j

    jntdD/933jRfHN10CEHcwHc6t/GKN3y00mQG0PejsVF4VM+W7cW4cfCg7l7Ro3Qu

    8B1mTEP6EXdx8XOq+v+06XNvk4d3KFRnBDuhPLsKMfJOyDLQfoRavea/9eCsFAEk

    KdG75n0MbKn1h5LuYmXJV/aErLO9StZMNax5/89JlqI7GgtGCfGDkUShDM42+xAK

    Jc/hAz0WBnhspYmSFgeewry/rt6b7iWXcxKl7KiZLvBxv5KtzdJWIp0SdwnbeHyH

    BZaYjoXkBgJE0DcvEDkqPI2Hn60dOwgrknC0+tQHxhxHXlWbZKg5lWt9ZJYjNIf/

    v6qoVOjkOc519BlJnfk2rL3SpJR5k+WTUj82xdd0LumskPC94vYdiNDsgYefD4tO

    qoDX24kqeW5HL4jSGaqmgaUPEdlxDh1COQACpVGHqSru6QXZFkSmDKH2pSrmpub9

    IOgEaUb1S5WYRuNQiQJS6PpGwIa9TOmyWVidTNwJbi6j2XIlkTHEXrg9VE83KTau

    W8j94/ty8orLMuJevCI0ZO5DvlN+vP8SEy1nLwcVQYcc4kn9ywOLNJXy6jQXO8Vs

    mypLFmqv+hH7cc9TE9X4sRwtYjLuvZG9lobV1M+DrMh2wVyuVEUOSWXuG7VDYA/o

    su058bXjAzQnJhMnXn4AWsQRuovUOfVckTfOlUJXhmAPf7pQaw==

    =oyvP

    -----END PGP PUBLIC KEY BLOCK-----

    ```



    #### Importing and using our key


    1. Copy JustiFi''s migration key into a new file named `public.key`

    2. Run the GPG command to import the key.

    ```sh

    gpg --import public.key

    ```

    3. Encrypt your file using the newly imported key.  This will create an encrypted
    file named `import_file.json.gpg`.

    ```sh

    gpg --encrypt --recipient A4546473910D638E import_file.json

    ```



    '
- name: Terminals
  description: 'JustiFi provides a card present solution which allows you to collect
    a payment via a terminal provider via one of our technology partners.


    To collect a payment via terminal, you must first ensure you ask the JustiFi team
    to enable the card present feature for your platform. Next, we will work to provision
    and configure terminals for your sub accounts.


    Once you have configured a terminal, you must complete the following steps to
    complete a payment:


    1. Create a Checkout

    2. Send a checkout to a terminal

    3. Terminal processes payment async

    4. Handle checkout.completed event (recommended)

    5. OR poll checkouts API for status change (optional)


    ### Create a checkout

    [Create a Checkout](https://docs.justifi.tech/api-spec#tag/Checkouts/operation/CreateCheckout)
    with the amount you''d like to capture, and a description of the payment.


    ### Send a checkout to a terminal

    [POST to the terminal pay endpoint](https://docs.justifi.tech/api-spec#tag/Terminals/operation/payTerminal)
    which will be used to send your checkout to a terminal for processing. This process
    can take some time as it requires customer interaction. For this reason, the API
    will return immediately but the process is asynchronusly happening on a terminal.


    ### Terminal processes payment async

    At this point, the process is handed over to the terminal to complete. Once the
    payment transaction is completed, we will publish an event for you to continue
    the process and take further action, as noted in the next step.


    ### Handle checkout.completed event

    Create an [Event Publisher](https://docs.justifi.tech/api-spec#tag/Events) which
    publishes [`checkout.completed` events](https://docs.justifi.tech/api-spec#tag/Events/operation/checkoutEvent).
    This will provide a means to ensure the payment was successful. You can also listen
    to checkout completion events, for example a checkout.completion.failed event
    will be published each time a card is attempted to be processed but the transaction
    fails for some reason.


    ### Poll checkouts API for status change

    If you do not have the ability to handle event publishing, you could poll our
    checkout API with the id of the checkout you are processing. Contine to poll until
    the checkout status attribute changes. We recommend you use the checkout events
    instead of this approach.'
- name: Terminals Orders
  description: 'Terminals Orders API for order management

    '
- name: Checkouts
  description: 'Checkouts can be used to collect payments directly via API, or using
    our Checkout component.

    You can use a checkout to complete a payment via JustiFi, via BNPL, via terminal,

    and to purchase insurance in a single transaction.


    All attempts to complete a payment will be recorded, along with the outcome of
    a payment.

    '
- name: Checkout via Component
  x-traitTag: true
  description: "A checkout is used to initiate the collection of a credit card payment,\
    \ ACH payment, insurance quote payment, BNPL payment, or card reader payment in\
    \ a single flow. This walk through will take you through collecting a payment\
    \ via checkout using the [Unified Fintech Checkout\u2122 web component](https://storybook.justifi.ai/?path=/docs/payment-facilitation-unified-fintech-checkout%E2%84%A2--docs).\
    \ We assume you have an activated sub account for payment processing.\n\n1. Get\
    \ an access token\n2. Create a Checkout\n3. Generate a Web Component Token\n4.\
    \ Render the checkout component\n5. Handle success/failure events\n\n\n### Get\
    \ an access token\nOn your backend, using your client id and client secret from\
    \ the Developer > API keys section of the JustiFi dashboard. Using those, generate\
    \ an [access token](https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken).\n\
    \n```\nfunction getToken() {\n  return fetch('https://api.justifi.ai/oauth/token',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n\
    \    },\n    body: JSON.stringify({\n      \"client_id\": \"YOUR CLIENT ID\",\n\
    \      \"client_secret\": \"YOUR CLIENT SECRET\"\n    })\n  })\n    .then(response\
    \ => response.json())\n    .then(data => data.access_token);\n}\n\nconst token\
    \ = await getToken();\n```\n\n### Create a checkout\nFrom your backend create\
    \ a checkout using the [Checkout API](https://docs.justifi.tech/api-spec#tag/Checkouts/operation/CreateCheckout).\
    \ A checkout requires a payment `amount` and `descripton`. You can also pass a\
    \ [Payment Method Group](https://docs.justifi.tech/api-spec#tag/Payment-Method-Groups)\
    \ if you want a customer's pre-entered card information to be shown on the checkout.\
    \ To render the checkout component, you must set the `origin_url` parameter to\
    \ be the domain on which you will render the component. For example, to develop\
    \ locally you could specify \"http://localhost:3000\" if you're developing on\
    \ port 3000.\n\n```\nasync function makeCheckout(token, subAccountId) {\n  const\
    \ response = await fetch('https://api.justifi.ai/v1/checkouts', {\n    method:\
    \ 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization':\
    \ `Bearer ${token}`,\n      'Sub-Account': `${subAccount}`,\n    },\n    body:\
    \ JSON.stringify({\n      \"amount\": 1799,\n      \"description\": \"One Chocolate\
    \ Donut\",\n      \"payment_method_group_id\": \"(optional)\",\n      \"origin_url\"\
    : http://localhost:3000\n    })\n  });\n  const data = await response.json();\n\
    \  return data;\n}\n\nconst subAccountId = \"acc_5Et9iXrSSAZR2KSouQGAWi\nconst\
    \ checkout = await makeCheckout(token, subAccountId);\n```\n\n### Generate a Web\
    \ Component Token\nTo render the checkout component, you must generate a web component\
    \ token. This is a short lived token which is meant to grant short term, fine\
    \ grained access. The checkout component requires the role of `write:checkout:{checkout\
    \ id}` for the checkout you want to process and `write:tokenize:{account id}`\
    \ with the sub account id you are processing the payment for.\n```\nasync function\
    \ getWebComponentToken(token, checkoutId, accountId) {\n  const response = await\
    \ fetch('https://api.justifi.ai/v1/web_component_tokens', {\n    method: 'POST',\n\
    \    headers: {\n      'Content-Type': 'application/json',\n      'Authorization':\
    \ `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      \"resources\":\
    \ [`write:checkout:${checkoutId}`, `write:tokenize:${accountId}]\n    })\n  });\n\
    \  const data = await response.json();\n  return data.access_token;\n}\n\nconst\
    \ webComponentToken = await getWebComponentToken(token, checkout.id, subAccountId);\n\
    ```\n\n### Render the checkout component\nUsing the web component token generated\
    \ above and the checkout id, render the [checkout web component](https://storybook.justifi.ai/?path=/docs/payment-facilitation-payments-checkout--docs).\
    \ This will allow a customer to complete a checkout via credit card payment, ACH\
    \ payment, or BNPL payment depending upon the sub account configuration. It will\
    \ also process payments for attached insurance quotes, if the Insurance components\
    \ were used.\n```\n<justifi-checkout auth-token=\"${webComponentToken}\" checkout-id=\"\
    ${checkout.id}\"></justifi-checkout>\n```\n\n### Handle success/failure events\n\
    The web component will emit a `submitted` event when a payment is submitted for\
    \ a checkout. This event will have a `payment_status` attribute. If the payment\
    \ succeeded, your app can proceed to a successful checkout state. Otherwise, an\
    \ error message can be presented to the user. Our example below covers both. If\
    \ there are insurance quotes being processed, the `additional_transactions` section\
    \ will contain the results of the insurance payments.\n\nAn `error` event means\
    \ there was an issue with the payment form, connecting to the network, etc.\n\n\
    ```\n<script>\n  const justifiCheckout = document.querySelector('justifi-checkout');\n\
    \  justifiCheckout.addEventListener('submit-event', (event) => {\n    if (event.details.data.status\
    \ === 'succeeded) {\n      console.log(\"Checkout succeeded!\");\n    } else {\n\
    \      console.log(\"A checkout error occured\")\n    }\n  });\n  justifiCheckout.addEventListener('error-event',\
    \ (event) => {\n    console.log(event);\n  });\n</script>\n```\n\nAt this point,\
    \ your checkout is completed and you have successfully collected a payment!"
- name: Checkout via API
  x-traitTag: true
  description: "A checkout is used to initiate the collection of a credit card payment,\
    \ ACH payment, insurance quote payment, BNPL payment, or card reader payment in\
    \ a single flow. This walk through will take you through collecting a payment\
    \ via checkout. We assume you have an activated sub account for payment processing.\
    \ \nIf you want to offer BNPL or insurance as part of the checkout process you\
    \ will need to implement the [Unified Fintech Checkout\u2122](https://docs.justifi.tech/api-spec#tag/Checkout-via-Component).\n\
    \n1. Get an access token\n2. Create a checkout\n3. Tokenize or select a payment\
    \ method\n4. Complete a checkout\n\n\n### Get an access token\nOn your backend,\
    \ using your client id and client secret from the Developer > API keys section\
    \ of the JustiFi dashboard, generate an [access token](https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken).\n\
    \n```\nfunction getToken() {\n  return fetch('https://api.justifi.ai/oauth/token',\
    \ {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n\
    \    },\n    body: JSON.stringify({\n      \"client_id\": \"YOUR CLIENT ID\",\n\
    \      \"client_secret\": \"YOUR CLIENT SECRET\"\n    })\n  })\n    .then(response\
    \ => response.json())\n    .then(data => data.access_token);\n}\n\nconst token\
    \ = await getToken();\n```\n\n### Create a checkout\nFrom your backend create\
    \ a checkout using the [Checkout API](https://docs.justifi.tech/api-spec#tag/Checkouts/operation/CreateCheckout).\
    \ A checkout requires a payment `amount` and `descripton`. You can also pass a\
    \ [Payment Method Group](https://docs.justifi.tech/api-spec#tag/Payment-Method-Groups),\
    \ if you want a customer's pre-entered card information to be shown on the checkout.\
    \ \n\n```\nasync function makeCheckout(token, subAccountId) {\n  const response\
    \ = await fetch('https://api.justifi.ai/v1/checkouts', {\n    method: 'POST',\n\
    \    headers: {\n      'Content-Type': 'application/json',\n      'Authorization':\
    \ `Bearer ${token}`,\n      'Sub-Account': `${subAccount}`,\n    },\n    body:\
    \ JSON.stringify({\n      \"amount\": 1799,\n      \"description\": \"One Chocolate\
    \ Donut\",\n      \"payment_method_group_id\": \"(optional)\"\n    })\n  });\n\
    \  const data = await response.json();\n  return data;\n}\n\nconst subAccountId\
    \ = \"acc_5Et9iXrSSAZR2KSouQGAWi\nconst checkout = await makeCheckout(token, subAccountId);\n\
    ```\n\n### Tokenize or select a payment method\nIn order to complete a checkout,\
    \ you must provide a payment method token. To avoid entering PCI scope, we recommend\
    \ using our [Payment Form](https://storybook.justifi.ai/?path=/docs/payment-facilitation-payment-form--docs)\
    \ web component. You can also collect the payment method information directly\
    \ and use our Payment Method APIs, but you will likely be entering PCI scope.\
    \ Once you have tokenized a payment method you can complete a checkout using the\
    \ ID of the payment method as payment method token.\n\n### Complete a checkout\n\
    To complete a checkout, using the [Complete Checkout API](https://docs.justifi.tech/api-spec#tag/Checkouts/operation/CompleteCheckout)\
    \ pass the payment method token collected above as well as an `Idempotency-Key`.\
    \ A checkout completion will be recorded upon success or failure. If the `payment_status`\
    \ attribute in the response is `succeeded` the payment has been collected. If\
    \ insurance quotes have been attached, the outcome of those payments will be in\
    \ the `additional_transactions` attribute.\n"
- name: Reports (Preview Release)
  description: "_Note: This API is in preview release and may change in the future.\
    \ We will be releasing more reports as well as an interface in\nour Fintech Dashboard\
    \ to view and generate reports. Currently we have an Interchange Fee report available.\
    \ We will provide new Payout, Proceeds, and Sub Account summary reports soon._\n\
    \nReports can be used to pull data for various different resources. They are CSV\
    \ format, and can be filtered by date and sub account.\nOnce a the create endpoint\
    \ is called via POST, a report will be in `created` status. The report will move\
    \ to `processing` status once it is being generated.\nFinally, when the report\
    \ is generated, and the CSV file is available, the report will be in `completed`\
    \ status.\n\nTo download a report, you can use the `download_url` provided in\
    \ the response when retrieving a report. We use presigned URLs to allow you to\
    \ download the report directly \nfrom our S3 bucket.\n"
x-tagGroups:
- name: Authorization
  tags:
  - API Credentials
  - Web Component Tokens
- name: For Platforms
  tags:
  - Sub Accounts
  - Platform Wallet Accounts
  - Onboarding via Component
  - Hosted Onboarding
  - Onboarding via API
  - Proceeds
  - Reports (Preview Release)
- name: Payment Resources
  tags:
  - Payments
  - Payment Intents (use checkouts)
  - Payment Methods
  - Tokenize via Component
  - Payment Method Groups
  - Refunds
  - Disputes
  - Payouts
  - Balance Transactions
  - Ach Return Fees
  - Payment Method Migration
- name: Checkout Resources
  tags:
  - Checkouts
  - Checkout via Component
  - Checkout via API
- name: Insurance Resources
  tags:
  - Bind Insurance
- name: Entity Resources
  tags:
  - Business
  - Identity
  - Address
  - Document
  - Bank Account
  - Terms and Conditions
  - Provisioning
- name: Card Present Resources
  tags:
  - Terminals
  - Terminals Orders
- name: Libraries
  tags:
  - JustiFi Web Components
  - JustiFi SDK
- name: Event Publishing
  tags:
  - Events
  - Webhook Delivery
paths:
  /sub_accounts:
    post:
      summary: Create a Sub Account (deprecated)
      description: '**We no longer allow new platforms to use this API. To onboard
        a customer so they can process payments use [Hosted Onboarding](https://docs.justifi.tech/api-spec#tag/Hosted-Onboarding)
        or [Onboarding via API](https://docs.justifi.tech/api-spec#tag/Onboarding-via-API)
        instead.

        During the onboarding process a sub account will automatically created for
        your customer.**


        Create a JustiFi account for your customer, so they can process payments (once
        approved by JustiFi). The sub account will be created as part of your platform.
        If you use your test credentials, the sub account you create will have one
        account with the `account_type` of `test`. If you use your live credentials,
        the sub account you create will have two accounts -- one with the `account_type`
        of `test` and another with the `account_type` of `live`. This allows you to
        perform test operations on your real accounts by using their `test` account.
        When viewing the data payload for any sub account, you can reference the `related_accounts`
        attribute to get the `test_account_id` and `live_account_id` (if present)
        for that sub account.

        '
      operationId: CreateSubAccount
      tags:
      - Sub Accounts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Sub account name
                  description: 'name for the sub account

                    *note: the name must be unique in your platform*

                    '
              required:
              - name
      responses:
        '201':
          description: Sub account was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: sub_account
                    data:
                      $ref: '#/components/schemas/SubAccount'
    get:
      summary: List Sub Accounts
      description: 'List the sub accounts for your platform. This endpoint supports
        [pagination](https://docs.justifi.tech/api-spec#section/Pagination).

        *Note: By default, all sub accounts which are not archived will be returned.
        To list archived sub accounts, use the optional status parameter set to `archived`*

        '
      operationId: ListSubAccounts
      tags:
      - Sub Accounts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - in: query
        name: status
        schema:
          type: string
          enum:
          - created
          - submitted
          - information_needed
          - rejected
          - enabled
          - disabled
          - archived
        required: false
        example: archived
        description: 'Return accounts with specific status

          '
      - in: query
        name: business_id
        schema:
          type: string
        required: false
        example: biz_123abc
        description: 'Filter accounts associated with a business record

          '
      responses:
        '200':
          description: Successfully list sub accounts
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/SubAccount'
  /sub_accounts/{id}:
    get:
      summary: Get a Sub Account
      description: Get information about a sub account.
      operationId: GetSubAccount
      tags:
      - Sub Accounts
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a sub account
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: sub_account
                    data:
                      $ref: '#/components/schemas/SubAccount'
  /sub_accounts/{id}/payout_account:
    get:
      summary: Get a Payout Account
      description: Get information about the currently active payout bank account
        of a sub account.
      operationId: GetPayoutAccount
      tags:
      - Sub Accounts
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get the active payout bank account a sub account
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payout_bank_account
                    data:
                      $ref: '#/components/schemas/PayoutBankAccount'
  /sub_accounts/{id}/settings:
    get:
      summary: Get Sub Account Settings
      description: Get information about sub account settings.
      operationId: GetSubAccountSettings
      tags:
      - Sub Accounts
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get sub account settings
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: sub_account_settings
                    data:
                      $ref: '#/components/schemas/SubAccountSettings'
  /proceeds:
    get:
      summary: List Proceeds
      description: List the proceeds payouts for your account. This endpoint supports
        [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListProceeds
      tags:
      - Proceeds
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/created-before'
      - $ref: '#/components/parameters/created-after'
      - $ref: '#/components/parameters/deposits-before'
      - $ref: '#/components/parameters/deposits-after'
      responses:
        '200':
          description: Successfully list proceeds
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Proceed'
  /proceeds/{id}:
    get:
      summary: Get a Proceeds Payout
      description: Get information about a proceeds payout.
      operationId: GetProceeds
      tags:
      - Proceeds
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a proceeds payout
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: payout
                    data:
                      items:
                        $ref: '#/components/schemas/Proceed'
  /reports/proceeds/{id}:
    get:
      deprecated: true
      summary: Get a Proceeds Report
      description: '[DEPRECATION WARNING] This endpoint will be deprecated, please
        use [Reports API](#tag/Reports).'
      operationId: GetProceedsReport
      tags:
      - Proceeds
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a link to a csv and json report for a proceeds
            payout
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: procceds
                    data:
                      $ref: '#/components/schemas/ProceedsReport'
  /payment_intents:
    post:
      summary: Create a Payment Intent
      description: 'Create a payment intent if you''d like a place to track the payment
        method along with all payment attempts for a payment.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CreatePaymentIntent
      tags:
      - Payment Intents (use checkouts)
      parameters:
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account-required'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                  example: 10000
                  description: amount to charge in cents
                currency:
                  type: string
                  enum:
                  - usd
                  example: usd
                description:
                  type: string
                  description: your meaningful description of the payment intent (e.g.
                    an order number or other value from your system)
                  example: order_xyz
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this payment intent
                  example: {}
              required:
              - amount
              - currency
            examples:
              Customer_intents_to_pay_10_USD:
                value:
                  amount: 1000
                  currency: usd
                  description: 'ORDER 1235ABC: Charging $10 to the test card'
                  metadata:
                    order_number: 12345ABC
      responses:
        '201':
          description: Payment intent was created successfully
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardPaymentIntent'
                - $ref: '#/components/schemas/BankAccountPaymentIntent'
    get:
      summary: List Payment Intents
      description: List the payment intents for your account. This endpoint supports
        [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListPaymentIntents
      tags:
      - Payment Intents (use checkouts)
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully list payment intents
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                      - $ref: '#/components/schemas/CardPaymentIntent'
                      - $ref: '#/components/schemas/BankAccountPaymentIntent'
  /payment_intents/{id}:
    get:
      summary: Get a Payment Intent
      description: Get information about a payment intent.
      operationId: GetPaymentIntent
      tags:
      - Payment Intents (use checkouts)
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a payment intent
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardPaymentIntent'
                - $ref: '#/components/schemas/BankAccountPaymentIntent'
    patch:
      summary: Update a Payment Intent
      description: Change a payment intent's description or metadata; attach a payment
        method.
      operationId: UpdatePaymentIntent
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payment Intents (use checkouts)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  description: your meaningful description of the payment intent (e.g.
                    an order number or other value from your system)
                  example: order_xyz
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this payment intent; when you update metadata, any previous metadata
                    will be overwritten
                payment_method:
                  description: can be updated if the payment intent status is `requires_payment_method`
                    or `pending`
                  oneOf:
                  - type: object
                    properties:
                      card:
                        $ref: '#/components/schemas/CreateCard'
                      token:
                        type: string
                        example: pm_xyz
                amount:
                  type: integer
                  description: payment intent amount, in cents; can be updated if
                    the payment intent status is `requires_payment_method` or `pending`
                  example: 10000
      responses:
        '200':
          description: Payment intent update was successful
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardPaymentIntent'
                - $ref: '#/components/schemas/BankAccountPaymentIntent'
  /payment_intents/{id}/capture:
    post:
      summary: Capture a Payment Intent
      description: 'Capturing a payment intent lets JustiFi know you intend to process
        a payment. JustiFi will charge the attached payment method and create a payment.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CapturePaymentIntent
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payment Intents (use checkouts)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_method:
                  oneOf:
                  - type: object
                    properties:
                      card:
                        $ref: '#/components/schemas/CreateCard'
                      token:
                        type: string
                        example: pm_xyz
      responses:
        '201':
          description: Payment intent was captured successfully
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardPaymentIntent'
                - $ref: '#/components/schemas/BankAccountPaymentIntent'
  /payment_intents/{id}/payments:
    get:
      summary: Get Payments for a Payment Intent
      description: Get information about the payments associated with a payment intent.
      operationId: GetPaymentIntentPayments
      tags:
      - Payment Intents (use checkouts)
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully retrieve the payments for a payment intent
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
  /payments:
    post:
      summary: Create a Payment
      description: 'Authorize, capture, and charge a payment method.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CreatePayment
      tags:
      - Payments
      parameters:
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account-required'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                  example: 10000
                  description: amount to charge in cents
                currency:
                  type: string
                  enum:
                  - usd
                  example: usd
                capture_strategy:
                  type: string
                  example: automatic
                  enum:
                  - automatic
                  - manual
                  description: automatic will authorize and capture the payment in
                    the same request, manual will only authorize the payment (which
                    will need to be captured in a subsequent request).  Not supported
                    by bank account (ACH) payment methods.
                email:
                  description: email address to associate with payment method
                  type: string
                  format: email
                payment_method:
                  oneOf:
                  - type: object
                    properties:
                      card:
                        $ref: '#/components/schemas/CreateCard'
                      bank_account:
                        $ref: '#/components/schemas/CreateBankAccount'
                      token:
                        type: string
                        example: pm_xyz
                application_fee_amount:
                  type: integer
                  description: sets a custom application fee amount that applies to
                    this payment, instead of relying on application fee rates configured
                    at the platform account level (*only Platforms may set application_fee_amount*).
                    Must be greater than zero.
                  example: 400
                description:
                  type: string
                  description: your meaningful description of the payment (e.g. an
                    order number or other value from your system)
                  example: order_xyz
                statement_descriptor:
                  type: string
                  description: description of the payment that will be available on
                    the account's bank statement, must have between 5-22 alphanumeric
                    characters and can include dash or underscore
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this payment
                  example: {}
                expedited:
                  type: boolean
                  nullable: true
                  description: settlement priority of the payment, only applies to
                    ACH payments
                  example: null
              required:
              - amount
              - currency
              - capture_strategy
              - payment_method
            examples:
              Charge_10_USD_to_a_Card:
                value:
                  amount: 1000
                  currency: usd
                  capture_strategy: automatic
                  email: example@test.com
                  description: Charging $10 to the test card
                  payment_method:
                    card:
                      name: Sylvia Fowles
                      number: '4111111111111111'
                      verification: '123'
                      month: '3'
                      year: '2040'
                      address_postal_code: '55555'
              Charge_10_USD_to_a_Bank_Account:
                value:
                  amount: 1000
                  currency: usd
                  capture_strategy: automatic
                  email: example@test.com
                  description: Charging $10 a bank account
                  expedited: true
                  payment_method:
                    bank_account:
                      account_owner_name: Lindsay Whalen
                      routing_number: '110000000'
                      account_number: 000123456789
                      account_type: checking
                      account_owner_type: individual
                      country: US
                      currency: usd
              Charge_10_USD_to_a_Tokenized_Payment_Method:
                value:
                  amount: 1000
                  currency: usd
                  capture_strategy: automatic
                  email: example@test.com
                  description: Charging $10 a tokenized payment method
                  payment_method:
                    token: pm_justifi123
              Charge_10_USD_to_a_Card_With_1.50_USD_Custom_application_fee_amount:
                value:
                  amount: 1000
                  application_fee_amount: 150
                  currency: usd
                  capture_strategy: automatic
                  email: example@test.com
                  description: Charging $10 to the test card
                  payment_method:
                    card:
                      name: Sylvia Fowles
                      number: '4111111111111111'
                      verification: '123'
                      month: '3'
                      year: '2040'
                      address_postal_code: '55555'
      responses:
        '201':
          description: Payment was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payment
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Card_payment_created:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: my order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: trm_123_xyz
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          bin_details:
                            type: Debit
                            card_brand: Visa
                            card_class: Consumer
                            country: United States of America
                            issuer: WELLS FARGO BANK
                            funding_source: Debit
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: 'null'
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
                Bank_account_payment_created:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: my order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: null
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        bank_account:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          name: Sylvia Fowles
                          brand: Wells Fargo
                          token: pm_123xyz
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: cust_123xyz
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
        '402':
          description: Error when processing the payment
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaymentError'
              example: null
              examples:
                Card_payment_error:
                  value:
                    error:
                      code: card_declined
                      decline_code: do_not_retry
                      message: This card has been rejected. Please try a different
                        card or payment method
                      network: MASTERCARD
                      network_error_category: '03'
                      network_error_code: '504'
    get:
      summary: List Payments
      description: List the payments for your account. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListPayments
      tags:
      - Payments
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/payment-method-id'
      - $ref: '#/components/parameters/created-before'
      - $ref: '#/components/parameters/created-after'
      - in: query
        name: payment_status
        schema:
          type: string
          enum:
          - succeeded
          - failed
          - pending
          - authorized
          - refunded
          - disputed
        required: false
        example: refunded
        description: 'filter to payments which have request payment_status

          '
      responses:
        '200':
          description: Successfully list payments
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
  /payments/{id}:
    get:
      summary: Get a Payment
      description: Get information about a payment.
      operationId: GetPayment
      tags:
      - Payments
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a payment
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Get_a_card_payment:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: my order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: trm_123_xyz
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: null
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
                Get_a_bank_account_payment:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: my order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: null
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        bank_account:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          name: Sylvia Fowles
                          brand: Wells Fargo
                          token: pm_123xyz
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: cust_123xyz
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
    patch:
      summary: Update a Payment
      description: 'Change a payment''s description or metadata.

        '
      operationId: UpdatePayment
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  description: your meaningful description of the payment (e.g. an
                    order number or other value from your system)
                  example: order_xyz new description
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this payment; when you update metadata, any previous metadata
                    will be overwritten
      responses:
        '200':
          description: Payment update was successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Update_Card_Payment:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_refunded: 0
                      amount_disputed: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz new description
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: null
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      refunds: []
                      disputes: []
                    page_info: null
                Update_Bank_Account_Payment:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz new description
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      checkout_id: cho_123
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        bank_account:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          name: Sylvia Fowles
                          brand: Wells Fargo
                          token: pm_123xyz
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: cust_123xyz
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      refunds: []
                      disputes: []
                    page_info: null
  /payments/{id}/capture:
    post:
      summary: Capture a Payment
      description: 'To charge a payment method and capture a previously authorized
        payment.  Returns a `payment_already_captured` error if the payment is in
        a captured state.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CapturePayment
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payments
      responses:
        '200':
          description: Payment with identical idempotency key was captured
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Card_payment_with_identical_idempotency_key_captured:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: trm_123_xyz
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          bin_details:
                            type: Debit
                            card_brand: Visa
                            card_class: Consumer
                            country: United States of America
                            issuer: WELLS FARGO BANK
                            funding_source: Debit
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: null
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
                Bank_account_payment_with_identical_idempotency_key_captured:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: null
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        bank_account:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          name: Sylvia Fowles
                          brand: Wells Fargo
                          token: pm_123xyz
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: cust_123xyz
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
        '201':
          description: Payment was captured successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Card_payment_captured:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: trm_123_xyz
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: 4242
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          bin_details:
                            type: Debit
                            card_brand: Visa
                            card_class: Consumer
                            country: United States of America
                            issuer: WELLS FARGO BANK
                            funding_source: Debit
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: null
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
                Bank_account_payment_captured:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      checkout_id: cho_123
                      refunded: false
                      returned: false
                      status: succeeded
                      payment_mode: ecom
                      terminal_id: null
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        bank_account:
                          id: pm_123xyz
                          acct_last_four: '4242'
                          name: Sylvia Fowles
                          brand: Wells Fargo
                          token: pm_123xyz
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: cust_123xyz
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      transaction_hold:
                        id: th_123xyz
                        financial_transaction_id: ft_123xyz
                      refunds: []
                      disputes: []
                    page_info: null
  /payments/{id}/refunds:
    post:
      tags:
      - Payments
      - Refunds
      summary: Refund a Payment
      description: 'Issue a refund for a payment. You may refund the full payment
        amount or just a portion. When refunding a portion, multiple refunds are supported
        up until the full payment amount has been refunded.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CreateRefund
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                  example: 10000
                  description: amount to refund; must be less than or equal to the
                    `amount_refundable` on the payment
                description:
                  description: an optional note about this refund
                  type: string
                reason:
                  description: the reason this refund is being issued
                  type: string
                  example: duplicate
                  enum:
                  - duplicate
                  - fraudulent
                  - customer_request
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this refund
                  example: {}
      responses:
        '201':
          description: Refund was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: refund
                    data:
                      $ref: '#/components/schemas/Refund'
  /payments/{id}/void:
    post:
      tags:
      - Payments
      - Voids
      summary: Void a Payment
      description: 'Void a payment transaction to cancel a payment before it reaches
        settlement. Payment transactions are voidable within 25 minutes of the original
        transaction. Only payments created with a card payment_method are eligible
        to be voided at this time.

        '
      operationId: VoidPayment
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Payment was voided successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    data:
                      oneOf:
                      - $ref: '#/components/schemas/CardPayment'
                      - $ref: '#/components/schemas/BankAccountPayment'
              example: null
              examples:
                Card_payment_voided:
                  value:
                    id: py_123xyz
                    type: payment
                    data:
                      id: py_123xyz
                      account_id: acc_123xyz
                      amount_disputed: 0
                      amount_refunded: 0
                      amount_returned: 0
                      amount: 10000
                      amount_refundable: 10000
                      application_fee_rate_id: afr_123xyz
                      balance: 99850
                      capture_strategy: automatic
                      captured: true
                      created_at: '2021-01-01T12:00:00Z'
                      currency: usd
                      description: order xyz
                      disputed: false
                      error_code: null
                      error_description: null
                      fee_amount: 150
                      financial_transaction_id: ft_123xyz
                      is_test: true
                      metadata: {}
                      payment_intent_id: pi_xyz
                      refunded: false
                      returned: false
                      status: canceled
                      payment_mode: ecom
                      updated_at: '2021-01-01T12:00:00Z'
                      payment_method:
                        card:
                          id: pm_123xyz
                          acct_last_four: 4242
                          brand: visa
                          name: Sylvia Fowles
                          token: pm_123xyz
                          metadata: {}
                          created_at: '2021-01-01T12:00:00Z'
                          updated_at: '2021-01-01T12:00:00Z'
                        customer_id: null
                        signature: 123abc
                      application_fee:
                        id: fee_123xyz
                        amount: 150
                        currency: usd
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      refunds: []
                      disputes: []
                    page_info: null
  /payments/{id}/payment_balance_transactions:
    get:
      summary: Get Payment Balance Transactions
      description: Get information about the payment-balance-transactions associated
        with a payment.
      operationId: GetPaymentBalanceTransactions
      tags:
      - Payments
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully retrieve the payment-balance-transactions for
            a payment
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/PaymentBalanceTransaction'
  /payment_methods:
    post:
      summary: Create a Payment Method
      description: 'You can create payment methods ahead of time, then pass their
        existing tokens to payments.

        Alternatively, you can create and tokenize payment methods inline when processing
        payments.


        *Note: If the sub account status is not `enabled`, `400` will be returned.*

        '
      operationId: CreatePaymentMethod
      tags:
      - Payment Methods
      parameters:
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account-required'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_method:
                  anyOf:
                  - type: object
                    properties:
                      payment_method_group_id:
                        description: When present this payment method will be associated
                          with the given payment method group
                        type: string
                      card:
                        $ref: '#/components/schemas/CreateCard'
                      bank_account:
                        $ref: '#/components/schemas/CreateBankAccount'
                email:
                  description: email address to associate with the payment method
                  type: string
                  format: email
                force_tokenize:
                  description: Optional. If set to true in the request payload, allows
                    for tokenization even if validations and authorization fail during
                    the creation of the payment method
                  type: boolean
              required:
              - payment_method
            example: null
            examples:
              Create_a_payment_method_for_card_payments:
                value:
                  payment_method:
                    payment_method_group_id: pmg_123xyz
                    card:
                      name: Lindsay Whalen
                      number: 4242424242421111
                      verification: 123
                      month: 5
                      year: 2042
                      address_postal_code: 55555
                      metadata:
                        new: info
              Create_a_payment_method_for_ACH_payments:
                value:
                  payment_method:
                    payment_method_group_id: pmg_123xyz
                    bank_account:
                      account_owner_name: Lindsay Whalen
                      routing_number: '110000000'
                      account_number: 000123456789
                      account_type: checking
                      account_owner_type: individual
                      country: US
                      currency: usd
                      metadata:
                        new: info
              Create_a_reusable_payment_method_for_card_payments:
                value:
                  email: example@test.com
                  payment_method:
                    card:
                      name: Lindsay Whalen
                      number: 4242424242421111
                      verification: '123'
                      month: 5
                      year: 2042
                      address_postal_code: '55555'
                      metadata:
                        new: info
              Create_an_expired_payment_method_for_card_payments:
                value:
                  force_tokenize: true
                  payment_method:
                    card:
                      name: Lindsay Whalen
                      number: 4242424242421111
                      verification: 123
                      month: 5
                      year: 2020
                      address_postal_code: 55555
                      metadata:
                        new: info
              Create_payment_method_associated_with_a_payment_method_group:
                value:
                  force_tokenize: true
                  payment_method:
                    payment_method_group: pmg_123xyz
                    card:
                      name: Lindsay Whalen
                      number: 4242424242421111
                      verification: 123
                      month: 5
                      year: 2020
                      address_postal_code: 55555
                      metadata:
                        new: info
      responses:
        '201':
          description: Payment method was created successfully
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardResponse'
                - $ref: '#/components/schemas/BankAccountResponse'
    get:
      summary: List Payment Methods
      description: List the payment methods for your account. This endpoint supports
        [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListPaymentMethods
      tags:
      - Payment Methods
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/customer-id'
      - $ref: '#/components/parameters/payment-method-group-id'
      responses:
        '200':
          description: Successfully list payment methods
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                      - $ref: '#/components/schemas/CardPaymentMethodWithBinDetails'
                      - $ref: '#/components/schemas/BankAccountPaymentMethodWithStatus'
  /payment_methods/{token}:
    get:
      summary: Get a Payment Method
      description: 'Get information about a payment method.


        *Note: This is the primary endpoint recommended for retrieving bin_details
        related to a card payment method*

        '
      operationId: GetPaymentMethod
      tags:
      - Payment Methods
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/token-path'
      responses:
        '200':
          description: Successfully get a payment method
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardResponse'
                - $ref: '#/components/schemas/BankAccountResponse'
    patch:
      summary: Update a Payment Method
      description: 'Change a payment method''s expiration date, address, or metadata.

        '
      operationId: UpdatePaymentMethod
      parameters:
      - $ref: '#/components/parameters/token-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                card:
                  $ref: '#/components/schemas/UpdateCard'
                bank_account:
                  $ref: '#/components/schemas/UpdateBankAccount'
      responses:
        '200':
          description: Payment method update was successful
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardResponse'
                - $ref: '#/components/schemas/BankAccountResponse'
  /payment_methods/{token}/clone:
    post:
      summary: Clone a Payment Method
      description: 'Copy a payment method from one sub account to another sub account.
        This allows one

        to share payment methods between accounts without having to collect the card
        information again.

        The original payment method''s id / token should be provided in the path.

        '
      operationId: ClonePaymentMethod
      parameters:
      - $ref: '#/components/parameters/token-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                destination_account_id:
                  type: string
                  description: The sub account id to which the payment method should
                    be cloned
                  example: acc_xyz123
      responses:
        '200':
          description: Payment method clone was successful
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CardResponse'
                - $ref: '#/components/schemas/BankAccountResponse'
  /payment_method_groups:
    post:
      summary: Create a Payment Method Group
      description: 'You can create payment methods groups ahead of time, then associate
        payment methods and easily filter them.

        '
      operationId: CreatePaymentMethodGroup
      tags:
      - Payment Method Groups
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account-required'
      responses:
        '201':
          description: Payment method group was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payment_method_group
                    data:
                      $ref: '#/components/schemas/PaymentMethodGroupResponse'
    get:
      summary: List Payment Method Groups
      description: 'List payment method groups associated to an account

        '
      operationId: ListPaymentMethodGroup
      tags:
      - Payment Method Groups
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully list payment method groups
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                      - $ref: '#/components/schemas/PaymentMethodGroupResponse'
  /payment_method_groups/{id}:
    get:
      summary: Get a Payment Method Group
      description: 'Get payment method group associated to an account

        '
      operationId: GetPaymentMethodGroup
      tags:
      - Payment Method Groups
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/id-path'
      responses:
        '200':
          description: Successfully get payment method group
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payment_method_group
                    data:
                      $ref: '#/components/schemas/PaymentMethodGroupResponse'
    patch:
      summary: Update a Payment Method Group
      description: 'Updates a payment method group to associate payment methods

        '
      operationId: PatchPaymentMethodGroup
      tags:
      - Payment Method Groups
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/id-path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_method_ids:
                  type: array
                  description: Payment method ids to be associated with the payment
                    method group
                  example:
                  - pm_123xyz
                  - pm_456abc
                  items:
                    type: uuid
      responses:
        '200':
          description: Payment method group update successful
  /payment_method_groups/{id}/payment_methods/{payment_method_id}:
    delete:
      summary: Remove a Payment Method from a Payment Method Group
      description: 'Removes a payment method from a payment method group

        '
      operationId: RemovePaymentMethodFromGroup
      tags:
      - Payment Method Groups
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/id-path'
      - name: payment_method_id
        in: path
        required: true
        description: ID of the payment method to remove
        schema:
          type: string
          format: uuid
          example: pm_123xyz
      responses:
        '200':
          description: Payment method successfully removed from group
  /payouts:
    get:
      summary: List Payouts
      operationId: ListPayouts
      tags:
      - Payouts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/created-before'
      - $ref: '#/components/parameters/created-after'
      - $ref: '#/components/parameters/deposits-before'
      - $ref: '#/components/parameters/deposits-after'
      responses:
        '200':
          description: Successfully list payouts
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Payout'
  /payouts/{id}:
    get:
      summary: Get a Payout
      description: Get information about a payout.
      operationId: GetPayout
      tags:
      - Payouts
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a payout
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payout
                    data:
                      $ref: '#/components/schemas/Payout'
    patch:
      summary: Update a Payout
      description: Change a payout's metadata.
      operationId: UpdatePayout
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Payouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this payout; when you update metadata, any previous metadata will
                    be overwritten
                  example:
                    customer_payout_id: cp_12345
      responses:
        '200':
          description: Payout update was successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payout
                    data:
                      $ref: '#/components/schemas/Payout'
  /reports/payouts/{id}:
    get:
      deprecated: true
      summary: Get a Payout CSV Report
      description: '[DEPRECATION WARNING] This endpoint will be deprecated, please
        use [Reports API](#tag/Reports).'
      operationId: GetPayoutCsvReport
      tags:
      - Payouts
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a link to a csv report for a payout
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: payout
                    data:
                      $ref: '#/components/schemas/PayoutCsvReport'
  /balance_transactions:
    get:
      summary: List Balance Transactions
      description: List the balance transactions for your account. This endpoint supports
        [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListBalanceTransactions
      tags:
      - Balance Transactions
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - in: query
        name: payout_id
        schema:
          type: string
        required: false
        example: po_123xyz
        description: 'Filter records which are part of the payout with the specified
          id

          '
      responses:
        '200':
          description: Successfully list balance transactions
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/BalanceTransaction'
  /balance_transactions/{id}:
    get:
      summary: Get a Balance Transaction
      description: Get information about a balance transaction.
      operationId: GetBalanceTransaction
      tags:
      - Balance Transactions
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a balance transaction
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: balance_transaction
                    data:
                      $ref: '#/components/schemas/BalanceTransaction'
  /refunds:
    get:
      summary: List Refunds
      description: List the refunds for your account. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListRefunds
      tags:
      - Refunds
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully list refunds
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Refund'
  /refunds/{id}:
    get:
      summary: Get a Refund
      description: Get information about a refund.
      operationId: GetRefund
      tags:
      - Refunds
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a refund
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: refund
                    data:
                      $ref: '#/components/schemas/Refund'
    patch:
      summary: Update a Refund
      description: Update the refund metadata.
      operationId: UpdateRefund
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Refunds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this refund; when you update metadata, any previous metadata will
                    be overwritten
      responses:
        '200':
          description: Refund update was successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: refund
                    data:
                      $ref: '#/components/schemas/Refund'
  /oauth/token:
    post:
      summary: Generate Access Token
      description: 'To get an access token, post your `client_id` and `client_secret`.

        The request responds with an access token, which is valid for 24 hours. Pass
        the token as the `Authorization`

        header with `Bearer` appended before the token, e.g. `Bearer {access_token}`.


        **Note: These access tokens are meant only for backend-to-backend calls. If
        you are looking to authorize

        a web component, please see the Web Component Token API**

        '
      operationId: CreateAccessToken
      tags:
      - API Credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                client_id:
                  type: string
                  example: test_clientId
                  description: the client id for your (live or test) account
                client_secret:
                  type: string
                  example: test_clientSecret
                  description: the client secret for your (live or test) account
            example:
              client_id: test_clientId
              client_secret: test_clientSecret
      responses:
        '200':
          description: An access token has been granted
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: 'an access token to pass to our API as the `Authorization`
                      header with

                      `Bearer` appended before the token, e.g. `Bearer {access_token}`

                      '
                    type: string
      servers:
      - url: https://api.justifi.ai
  /disputes:
    get:
      summary: List Disputes
      description: 'List the disputes for your account. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).

        The disputes for a specific payment are also included in the payments API

        response.

        '
      operationId: ListDisputes
      tags:
      - Disputes
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully list disputes
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Dispute'
  /disputes/{id}:
    get:
      summary: Get a Dispute
      description: Get information about a dispute.
      operationId: GetDispute
      tags:
      - Disputes
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a dispute
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: dispute
                    data:
                      $ref: '#/components/schemas/Dispute'
    patch:
      summary: Update a Dispute
      description: Change a dispute's metadata.
      operationId: UpdateDispute
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this dispute; when you update metadata, any previous metadata
                    will be overwritten
      responses:
        '200':
          description: Dispute update was successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: dispute
                    data:
                      $ref: '#/components/schemas/Dispute'
  /disputes/{id}/evidence:
    put:
      summary: Create dispute evidence
      description: Creates dispute evidence and generate presigned url
      operationId: CreateDisputeEvidence
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - file_name
              - file_type
              - dispute_evidence_type
              properties:
                file_name:
                  type: string
                  example: receipt.pdf
                  description: dispute evidence file name
                file_type:
                  type: string
                  description: dispute evidence file type
                  example: application/pdf
                  enum:
                  - image/jpeg
                  - image/png
                  - application/pdf
                  - application/zip
                  - application/x-zip-compressed
                dispute_evidence_type:
                  type: string
                  description: dispute evidence type matching the file that will be
                    uploaded
                  example: receipt
                  enum:
                  - cancellation_policy
                  - customer_communication
                  - customer_signature
                  - duplicate_charge_documentation
                  - receipt
                  - refund_policy
                  - service_documentation
                  - shipping_documentation
                  - uncategorized_file
                description:
                  type: string
                  description: description of the dispute evidence file that will
                    be uploaded
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    the dispute evidence
      responses:
        '201':
          description: Dispute evidence created and presigned url generated
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: dispute evidence
                    data:
                      $ref: '#/components/schemas/DisputeEvidence'
  /disputes/{id}/response:
    patch:
      summary: Update dispute response
      description: Updates the dispute response
      operationId: UpdateDisputeResponse
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                additional_statement:
                  type: string
                  description: any additional evidence or statements
                cancellation_policy_disclosure:
                  type: string
                  description: an explanation of how and when the customer was shown
                    your cancellation policy prior to purchase
                cancellation_rebuttal:
                  type: string
                  description: "a justification for why the customer\u2019s subscription\
                    \ was not canceled"
                customer_billing_address:
                  type: string
                  description: the billing address provided by the customer
                customer_email_address:
                  type: string
                  description: the email address of the customer
                customer_name:
                  type: string
                  description: the name of the customer
                customer_purchase_ip_address:
                  type: string
                  description: the IP address that the customer used when making the
                    purchase
                duplicate_charge_explanation:
                  type: string
                  description: an explanation of the difference between the disputed
                    charge versus the prior charge that appears to be a duplicate
                product_description:
                  type: string
                  description: a description of the product or service that was sold
                refund_policy_disclosure:
                  type: string
                  description: documentation demonstrating that the customer was shown
                    your refund policy prior to purchase
                refund_refusal_explanation:
                  type: string
                  description: justification for why the customer is not entitled
                    to a refund
                service_date:
                  type: string
                  description: the date on which the customer received or began receiving
                    the purchased service
                  example: '2024-10-31'
                shipping_address:
                  type: string
                  description: the address to which a physical product was shipped
                shipping_carrier:
                  type: string
                  description: the delivery service that shipped a physical product,
                    such as Fedex, UPS, USPS, etc. If multiple carriers were used
                    for this purchase, please separate them with commas
                shipping_date:
                  type: string
                  description: the date on which a physical product began its route
                    to the shipping address
                  example: '2024-10-31'
                shipping_tracking_number:
                  type: string
                  description: the tracking number for a physical product. If multiple
                    tracking numbers were generated for this purchase, please separate
                    them with commas
                duplicate_charge_original_payment_id:
                  type: string
                  description: the payment id for the prior charge which appears to
                    be a duplicate of the disputed charge
      responses:
        '200':
          description: Dispute response updated
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: dispute response
                    data:
                      $ref: '#/components/schemas/DisputeResponse'
    post:
      summary: Submit dispute response
      description: Submits the dispute response
      operationId: SubmitDisputeResponse
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Disputes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
              - forfeit
              properties:
                forfeit:
                  type: boolean
                  description: when true forfeits the dispute and all other parameters
                    passed in are ignored
                additional_statement:
                  type: string
                  description: any additional evidence or statements
                cancellation_policy_disclosure:
                  type: string
                  description: an explanation of how and when the customer was shown
                    your cancellation policy prior to purchase
                cancellation_rebuttal:
                  type: string
                  description: "a justification for why the customer\u2019s subscription\
                    \ was not canceled"
                customer_billing_address:
                  type: string
                  description: the billing address provided by the customer
                customer_email_address:
                  type: string
                  description: the email address of the customer
                customer_name:
                  type: string
                  description: the name of the customer
                customer_purchase_ip_address:
                  type: string
                  description: the IP address that the customer used when making the
                    purchase
                duplicate_charge_explanation:
                  type: string
                  description: an explanation of the difference between the disputed
                    charge versus the prior charge that appears to be a duplicate
                product_description:
                  type: string
                  description: a description of the product or service that was sold
                refund_policy_disclosure:
                  type: string
                  description: documentation demonstrating that the customer was shown
                    your refund policy prior to purchase
                refund_refusal_explanation:
                  type: string
                  description: justification for why the customer is not entitled
                    to a refund
                service_date:
                  type: string
                  description: the date on which the customer received or began receiving
                    the purchased service
                  example: '2024-10-31'
                shipping_address:
                  type: string
                  description: the address to which a physical product was shipped
                shipping_carrier:
                  type: string
                  description: the delivery service that shipped a physical product,
                    such as Fedex, UPS, USPS, etc. If multiple carriers were used
                    for this purchase, please separate them with commas
                shipping_date:
                  type: string
                  description: the date on which a physical product began its route
                    to the shipping address
                  example: '2024-10-31'
                shipping_tracking_number:
                  type: string
                  description: the tracking number for a physical product. If multiple
                    tracking numbers were generated for this purchase, please separate
                    them with commas
                duplicate_charge_original_payment_id:
                  type: string
                  description: the payment id for the prior charge which appears to
                    be a duplicate of the disputed charge
      responses:
        '200':
          description: Dispute response submitted
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: dispute
                    data:
                      $ref: '#/components/schemas/Dispute'
  /insurance/bind:
    post:
      summary: Bind an Insurance Policy
      description: 'Used to bind an insurance policy with a JustiFi insurance partner

        '
      operationId: BindInsurance
      tags:
      - Bind Insurance
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_method_id:
                  type: string
                  format: uuid
                  example: pm_123
                  description: Payment method to charge for insurance policy
                amount:
                  type: number
                  example: 10000
                  description: amount to charge in cents
                currency:
                  type: string
                  enum:
                  - usd
                  example: usd
                partner_quote_id:
                  type: string
                  example: ins-test-123
                  description: quote id provided by partner provider
                partner_name:
                  type: string
                  enum:
                  - vertical_insure
                  example: vertical_insure
                  description: partner insurance provider
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this record
                  example: {}
              required:
              - payment_method_id
              - amount
              - partner_quote_id
              - partner_name
      responses:
        '201':
          description: Insurance Policy was bound successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    id:
                      example: ins_xyz
                    type:
                      example: insurance_policy
                    data:
                      $ref: '#/components/schemas/InsurancePolicy'
  /entities/business:
    post:
      summary: Create a Business
      description: 'Create a Business

        '
      operationId: CreateBusiness
      tags:
      - Business
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                legal_name:
                  type: string
                  example: Business Name
                  description: legal business entity name
                website_url:
                  type: string
                  example: https://justifi.ai
                  description: website for this business (if they don't have a website,
                    can send their social media business page, app store link, or
                    a product description instead)
                email:
                  type: string
                  example: business@justifi.ai
                  description: email address of business entity or representative
                phone:
                  type: string
                  example: '6124011111'
                  description: business phone number
                doing_business_as:
                  type: string
                  example: Best Business
                  description: only needed if registered with DBA/Trade Name on SS-4
                    tax document
                business_type:
                  type: string
                  enum:
                  - for_profit
                  - non_profit
                  - government_entity
                  - individual
                  description: (deprecated) use classification instead - see [classification
                    mapping table](https://docs.justifi.tech/api-spec#tag/Business)
                business_structure:
                  type: string
                  enum:
                  - sole_proprietorship
                  - single_llc
                  - multi_llc
                  - private_partnership
                  - private_corporation
                  - unincorporated_association
                  - public_partnership
                  - public_corporation
                  - incorporated
                  - unincorporated
                  - government_unit
                  - government_instrumentality
                  - tax_exempt_government_instrumentality
                  description: (deprecated) use classification instead - see [classification
                    mapping table](https://docs.justifi.tech/api-spec#tag/Business)
                classification:
                  type: string
                  enum:
                  - government limited non_profit partnership corporation public_company
                    sole_proprietor
                  description: simplified classification, use instead of business_type
                    and business_structure - see [classification mapping table](https://docs.justifi.tech/api-spec#tag/Business)
                industry:
                  type: string
                  example: Big Business
                  description: to help us identify this business entity's category
                    code (MCC), please provide a concise description of what service
                    they offer
                mcc:
                  type: string
                  example: '8021'
                  description: merchant category code for this business, if known.
                    Please note, the JustiFi underwriting team may modify this. If
                    you are unsure, just submit a description in the industry field
                    instead of an MCC
                tax_id:
                  type: string
                  description: the federal tax identification number/EIN issued to
                    this sub account by the IRS (for Individual type, this will be
                    their full SSN)
                date_of_incorporation:
                  type: string
                  example: '2015-02-20'
                  description: the specific day when this business was officially
                    registered with a relevant government authority and was then permitted
                    to carry out its activities
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this business
                  additionalProperties: true
                  example:
                    arr: 1200
                    social_network: '@business'
                additional_questions:
                  additionalProperties: true
                  $ref: '#/components/schemas/AdditionalQuestions'
                legal_address:
                  oneOf:
                  - $ref: '#/components/schemas/Address'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: addr_xyz
                representative:
                  oneOf:
                  - $ref: '#/components/schemas/Identity'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: idty_xyz
                owners:
                  type: array
                  description: up to four business owners total
                  items:
                    oneOf:
                    - $ref: '#/components/schemas/Identity'
                    - type: object
                      properties:
                        id:
                          type: string
                          example: idty_xyz
      responses:
        '201':
          description: Business entity was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: business
                    data:
                      $ref: '#/components/schemas/BusinessResponse'
    get:
      summary: List Businesses
      description: 'List businesses for your platform. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).

        '
      operationId: ListBusinesses
      tags:
      - Business
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully list businesses
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/BusinessResponse'
  /entities/business/{id}:
    patch:
      summary: Update a Business
      description: Update information about a Business
      operationId: UpdateBusiness
      tags:
      - Business
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                legal_name:
                  type: string
                  example: Business Name
                  description: legal business entity name
                website_url:
                  type: string
                  example: https://justifi.ai
                  description: website for this business (if they don't have a website,
                    can send their social media business page, app store link, or
                    a product description instead)
                email:
                  type: string
                  example: business@justifi.ai
                  description: email address of business entity or representative
                phone:
                  type: string
                  example: '6124011111'
                  description: business phone number
                doing_business_as:
                  type: string
                  example: Best Business
                  description: only needed if registered with DBA/Trade Name on SS-4
                    tax document
                business_type:
                  type: string
                  enum:
                  - for_profit
                  - non_profit
                  - government_entity
                  - individual
                business_structure:
                  type: string
                  enum:
                  - sole_proprietorship
                  - single_llc
                  - multi_llc
                  - private_partnership
                  - private_corporation
                  - unincorporated_association
                  - public_partnership
                  - public_corporation
                  - incorporated
                  - unincorporated
                  - government_unit
                  - government_instrumentality
                  - tax_exempt_government_instrumentality
                industry:
                  type: string
                  example: Big Business
                  description: to help us identify this business entity's category
                    code (MCC), please provide a concise description of what service
                    they offer
                mcc:
                  type: string
                  example: '8021'
                  description: merchant category code for this business, if known.
                    Please note, the JustiFi underwriting team may modify this. If
                    you are unsure, just submit a description in the industry field
                    instead of an MCC
                tax_id:
                  type: string
                  description: the federal tax identification number/EIN issued to
                    this sub account by the IRS (for Individual type, this will be
                    their full SSN)
                date_of_incorporation:
                  type: string
                  example: '2015-02-20'
                  description: the specific day when this business was officially
                    registered with a relevant government authority and was then permitted
                    to carry out its activities
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this business
                  additionalProperties: true
                  example:
                    arr: 1200
                    social_network: '@business'
                additional_questions:
                  additionalProperties: true
                  $ref: '#/components/schemas/AdditionalQuestions'
                legal_address:
                  oneOf:
                  - $ref: '#/components/schemas/Address'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: addr_xyz
                representative:
                  oneOf:
                  - $ref: '#/components/schemas/Identity'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: idty_xyz
      responses:
        '200':
          description: Successfully update a business
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: business
                    data:
                      $ref: '#/components/schemas/BusinessResponse'
    get:
      summary: Get a Business
      description: Get information about a Business
      operationId: GetBusiness
      tags:
      - Business
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a business
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: business
                    data:
                      $ref: '#/components/schemas/BusinessResponse'
  /entities/identity:
    post:
      summary: Create an Identity
      description: 'Create an Identity

        '
      operationId: CreateIdentity
      tags:
      - Identity
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Person Name
                  description: legal name
                title:
                  type: string
                  example: President
                  description: job title
                email:
                  type: string
                  example: person.name@justifi.ai
                  description: email address
                phone:
                  type: string
                  example: '6124011111'
                  description: phone number
                dob_day:
                  type: string
                  example: '01'
                  description: two-digit birth day
                dob_month:
                  type: string
                  example: '01'
                  description: two-digit birth month
                dob_year:
                  type: string
                  example: '1980'
                  description: four-digit birth year (must be at least 18 years old)
                identification_number:
                  type: string
                  example: '123456789'
                  description: full social security number
                is_owner:
                  type: boolean
                  example: true
                  description: if an identity owns 25% or more of the business, they
                    are considered an owner
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this identity
                  additionalProperties: true
                  example:
                    language: english
                    social_network: '@person'
                address:
                  oneOf:
                  - $ref: '#/components/schemas/Address'
                  - type: object
                    properties:
                      id:
                        type: string
                        example: addr_xyz
      responses:
        '201':
          description: Identity was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: identity
                    data:
                      $ref: '#/components/schemas/IdentityResponse'
    get:
      summary: List Identities
      description: 'List identities for your platform. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).

        '
      operationId: ListIdentities
      tags:
      - Identity
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully list identities
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/IdentityResponse'
  /entities/identity/{id}:
    patch:
      summary: Update an Identity
      description: Update information about an Identity
      operationId: UpdateIdentity
      tags:
      - Identity
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Person Name
                  description: legal name
                title:
                  type: string
                  example: President
                  description: job title
                email:
                  type: string
                  example: person.name@justifi.ai
                  description: email address
                phone:
                  type: string
                  example: '6124011111'
                  description: phone number
                dob_day:
                  type: string
                  example: '01'
                  description: two-digit birth day
                dob_month:
                  type: string
                  example: '01'
                  description: two-digit birth month
                dob_year:
                  type: string
                  example: '1980'
                  description: four-digit birth year (must be at least 18 years old)
                identification_number:
                  type: string
                  example: '123456789'
                  description: full social security number
                is_owner:
                  type: boolean
                  description: if an identity owns 25% or more of the business, they
                    are considered an owner
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this identity
                  additionalProperties: true
                  example:
                    language: english
                    social_network: '@person'
      responses:
        '200':
          description: Identity updated
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: identity
                    data:
                      $ref: '#/components/schemas/IdentityResponse'
    get:
      summary: Get an Identity
      description: Get information about an Identity
      operationId: GetIdentity
      tags:
      - Identity
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Get Identity
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: identity
                    data:
                      $ref: '#/components/schemas/IdentityResponse'
  /entities/address:
    post:
      summary: Create an Address
      description: 'Create an Address

        '
      operationId: CreateAddress
      tags:
      - Address
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                line1:
                  type: string
                  example: 123 Example St
                line2:
                  type: string
                  example: '# 61157'
                city:
                  type: string
                  example: Minneapolis
                state:
                  type: string
                  example: MN
                postal_code:
                  type: string
                  example: '55555'
                country:
                  type: string
                  example: USA
      responses:
        '201':
          description: Address was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: address
                    data:
                      $ref: '#/components/schemas/AddressResponse'
    get:
      summary: List Addresses
      description: 'List addresses for your platform. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).

        '
      operationId: ListAddresses
      tags:
      - Address
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully list addresses
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/AddressResponse'
  /entities/address/{id}:
    patch:
      summary: Update an Address
      description: Update information about an Address
      operationId: UpdateAddress
      tags:
      - Address
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                line1:
                  type: string
                  example: 123 Example St
                line2:
                  type: string
                  example: '# 61157'
                city:
                  type: string
                  example: Minneapolis
                state:
                  type: string
                  example: MN
                postal_code:
                  type: string
                  example: '55555'
                country:
                  type: string
                  example: USA
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: address
                    data:
                      $ref: '#/components/schemas/AddressResponse'
    get:
      summary: Get an Address
      description: Get information about an Address
      operationId: GetAddress
      tags:
      - Address
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Get Address
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: address
                    data:
                      $ref: '#/components/schemas/AddressResponse'
  /entities/document:
    post:
      summary: Create a Document
      description: 'Create a reference to a document, and receive a presigned URL
        for uploading the document

        '
      operationId: CreateDocument
      tags:
      - Document
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  example: My Document
                file_name:
                  type: string
                  example: the_file_name
                file_type:
                  type: string
                  example: application/pdf
                  description: the file media type/extension of the file you are uploading.
                    For example, text/plain, application/pdf, image/png
                document_type:
                  type: string
                  enum:
                  - balance_sheet
                  - bank_statement
                  - government_id
                  - profit_and_loss_statement
                  - tax_return
                  - other
                  example: balance_sheet
                business_id:
                  type: string
                  format: uuid
                  example: biz_abc123
                  description: the business id to associate with this document (one
                    of business id or identity id is required)
                identity_id:
                  type: string
                  format: uuid
                  example: idty_abc123
                  description: the identity id to associate with this document (one
                    of business id or identity id is required)
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this document
                  example:
                    my_id: '123'
              required:
              - file_name
              - file_type
              - document_type
      responses:
        '201':
          description: Document was created and presigned successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: document
                    data:
                      $ref: '#/components/schemas/Document'
    get:
      summary: List Documents
      description: List the documents you have uploaded. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListDocuments
      tags:
      - Document
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully list documents
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Document'
  /entities/document/{id}:
    get:
      summary: Get a Document
      description: Get details about a document, and a presigned download URL
      operationId: GetDocument
      tags:
      - Document
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Get Document
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: document
                    data:
                      $ref: '#/components/schemas/Document'
  /entities/bank_accounts:
    post:
      summary: Create a Bank Account
      description: 'Create a bank account

        '
      operationId: CreateBankAccount
      tags:
      - Bank Account
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                account_owner_name:
                  type: string
                  description: name of the account owner
                  example: Napheesa Collier
                account_type:
                  type: string
                  description: type of account
                  enum:
                  - checking savings
                  example: checking
                account_number:
                  type: string
                  description: the account number
                  example: 000123456789
                routing_number:
                  type: string
                  description: routing number
                  example: '110000000'
                business_id:
                  type: string
                  description: business id which owns the account
                  format: uuid
                  example: biz_abc123
                bank_name:
                  type: string
                  description: bank name
                  example: Wells Fargo
                nickname:
                  type: string
                  description: nickname for the bank account
                  example: Phee's Money
                metadata:
                  type: object
                  description: any useful information you'd like to store alongside
                    this bank account
                  example:
                    my_id: '123'
              required:
              - account_owner_name
              - account_type
              - account_number
              - routing_number
              - business_id
              - bank_name
      responses:
        '201':
          description: Bank Account was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: bank_account
                    data:
                      $ref: '#/components/schemas/EntityBankAccount'
    get:
      summary: List Bank Accounts
      description: List the bank accounts you have created for a business. This endpoint
        supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListBankAccounts
      tags:
      - Bank Account
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - in: query
        name: business_id
        schema:
          type: string
        required: false
        example: biz_xyz
        description: filter bank accounts which are associated with a business
      responses:
        '200':
          description: Successfully list bank accounts
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/EntityBankAccount'
  /entities/bank_accounts/{id}:
    get:
      summary: Get a Bank Account
      description: Get details about a bank account
      operationId: GetBankAccount
      tags:
      - Bank Account
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Get Bank Account
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: bank_account
                    data:
                      $ref: '#/components/schemas/EntityBankAccount'
  /entities/terms_and_conditions:
    post:
      summary: Terms and Conditions
      description: 'Accept current Terms and Conditions

        '
      operationId: TermsAndConditions
      tags:
      - Terms and Conditions
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                business_id:
                  type: string
                  example: biz_xyz
                  description: business id
                accepted:
                  type: boolean
                  example: true
                  description: accepts terms and conditions
                ip:
                  type: string
                  example: 142.250.219.46
                  description: client ip address
                user_agent:
                  type: string
                  example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15
                    (KHTML, like Gecko) Version/17.1 Safari/605.1.15
                  description: client identification information
              required:
              - business_id
              - accepted
              - ip
      responses:
        '201':
          description: Terms and Conditions successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: onboarding
                    data:
                      properties:
                        id:
                          description: unique terms and conditions id
                          type: string
                          format: uuid
                          example: tac_xyz
                        business_id:
                          type: string
                          example: biz_xyz
                        accepted:
                          type: boolean
                          example: true
                        ip:
                          type: string
                          example: 142.250.219.46
                        user_agent:
                          type: string
                          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)
                            AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1
                            Safari/605.1.15
  /entities/provisioning:
    post:
      summary: Product Provisioning
      description: 'Product Provisioning

        '
      operationId: ProductProvisioning
      tags:
      - Provisioning
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                business_id:
                  type: string
                  example: biz_123
                  description: business associated with the account
                product_category:
                  type: string
                  example: payment
                  description: type of product to be provisioned
              required:
              - business_id
              - product_category
      responses:
        '201':
          description: Provisioning successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: onboarding
                    data:
                      $ref: '#/components/schemas/ProvisioningResponse'
  /ach_return_fees/{id}:
    get:
      summary: Get an Ach Return Fee
      description: Get information about ach return fee.
      operationId: GetAchReturnFee
      tags:
      - Ach Return Fees
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get an ach return fee
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: account_ach_return_fee
                    data:
                      $ref: '#/components/schemas/AchReturnFee'
  /terminals/pay:
    post:
      summary: Pay via Terminal
      description: Send a checkout to be processed via terminal, listen for checkout
        events (recommended) or poll checkout API for payment outcome
      operationId: payTerminal
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_intent_id:
                  type: string
                  format: uuid
                  example: pi_abc123
                  description: '(deprecated, use checkout id) id for the payment intent
                    which you want to process via terminal

                    '
                checkout_id:
                  type: string
                  format: uuid
                  example: cho_abc123
                  description: 'id of the checkout which you want to process via terminal

                    '
                terminal_id:
                  type: string
                  format: uuid
                  example: trm_abc123
                  description: 'id of the terminal on which you want to process a
                    transaction

                    '
              required:
              - checkout_id
              - terminal_id
      responses:
        '201':
          description: Checkout sent to terminal for processing
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminal_sessions
                    id:
                      example: tses_FQz6I0hMTrcU9Ur7TpOPZ
                    data:
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: tses_FQz6I0hMTrcU9Ur7TpOPZ
                        session_type:
                          type: string
                          example: payment
                        status:
                          type: string
                          example: created
                        payment_id:
                          type: string
                          format: uuid
                        payment_intent_id:
                          type: string
                          format: uuid
                        terminal_id:
                          type: string
                          format: uuid
                        account_id:
                          type: string
                          format: uuid
                        platform_account_id:
                          type: string
                          format: uuid
                        checkout_id:
                          type: string
                          format: uuid
                          example: cho_abc123
  /terminals:
    get:
      summary: List Terminals
      operationId: listTerminals
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - in: query
        name: status
        schema:
          type: string
          enum:
          - connected
          - disconnected
          - unknown
          - pending_configuration
        required: false
        example: active
        description: 'filter records by the terminal status. Accepts multiple comma
          separated status values.

          '
      - in: query
        name: terminal_id
        schema:
          type: string
        required: false
        example: trm_abc123
        description: 'filter records by terminal id

          '
      - in: query
        name: provider_id
        schema:
          type: string
        required: false
        example: '23456789'
        description: 'filter records by provider id, also called device id (DID).
          Accepts multiple comma separated provider ids.

          '
      - in: query
        name: terminal_order_id
        schema:
          type: string
        required: false
        example: tord_123xyz
        description: 'filter records by terminal order id

          '
      - in: query
        name: verified_after
        schema:
          type: string
          format: date-time
        required: false
        example: '2024-01-01T00:00:00Z'
        description: 'filter records which were verified after the date and time (UTC)
          specified. Dates without time specified will default to 00:00:00

          '
      - in: query
        name: verified_before
        schema:
          type: string
          format: date-time
        required: false
        example: '2024-01-01T00:00:00Z'
        description: 'filter records which were verified before the date and time
          (UTC) specified. Dates without time specified will default to 00:00:00

          '
      - in: query
        name: verified_on
        schema:
          type: string
          format: date
        required: false
        example: '2024-01-01'
        description: 'filter records which were verified on the date specified between
          00:00:00 and 23:59:59 (UTC)

          '
      responses:
        '200':
          description: Successfully list terminals
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Terminal'
  /terminals/{id}:
    get:
      summary: Get a Terminal
      operationId: getTerminal
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a terminal
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminal
                    data:
                      $ref: '#/components/schemas/Terminal'
    patch:
      summary: Update a Terminal
      operationId: updateTerminal
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                nickname:
                  type: string
                  description: terminal nickname
                  example: My Favorite Terminal
      responses:
        '200':
          description: Successfully update a terminal
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminal
                    data:
                      $ref: '#/components/schemas/Terminal'
  /terminals/{id}/status:
    get:
      summary: Get Terminal Status
      operationId: getTerminalStatus
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get terminal status
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminal
                    data:
                      $ref: '#/components/schemas/TerminalStatus'
  /terminals/{id}/identify:
    post:
      summary: Identify Terminal
      operationId: postIdentifyTerminal
      description: 'This API will attempt to display the nickname or serial number
        on

        the screen of the given terminal for 20 seconds.

        '
      tags:
      - Terminals
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '204':
          description: The request was sent to the terminal
  /terminals/orders/{id}:
    get:
      summary: Get Terminals Order
      operationId: GetTerminalsOrder
      description: Get information about terminals order
      tags:
      - Terminals Orders
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      responses:
        '200':
          description: Successfully get a terminal order
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminals_order
                    data:
                      $ref: '#/components/schemas/TerminalsOrder'
  /terminals/orders:
    get:
      summary: List Terminal Orders
      description: Retrieve a list of terminal orders for your account. This endpoint
        supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListTerminalsOrders
      tags:
      - Terminals Orders
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/created-before'
      - $ref: '#/components/parameters/created-after'
      - in: query
        name: order_type
        schema:
          type: string
          enum:
          - boarding_only
          - boarding_shipping
        required: false
        example: boarding_only
        description: 'filter terminal orders of a specific type

          '
      - in: query
        name: order_status
        schema:
          type: string
          enum:
          - created
          - submitted
          - completed
        required: false
        example: created
        description: 'filter terminal orders of a specific status

          '
      - in: query
        name: sub_account_id
        schema:
          type: string
        required: false
        example: acc_123xyz
        description: 'filter terminal orders of a specific sub account

          '
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminals_orders
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/TerminalsOrder'
    post:
      summary: Order Terminals
      description: Order (one or multiple) terminals from one of our technology partners
      operationId: terminalsOrder
      tags:
      - Terminals Orders
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                business_id:
                  type: string
                  format: uuid
                  example: biz_abc123
                  description: id of the business entity ordering a terminal
                sub_account_id:
                  type: string
                  format: uuid
                  example: acc_abc123
                  description: id of the account all terminals from this order will
                    be associated
                order_type:
                  type: string
                  enum:
                  - boarding_only
                  - boarding_shipping
                  example: boarding_only
                order_items:
                  type: array
                  description: list of terminals being ordered
                  items:
                    type: object
                    properties:
                      model_name:
                        type: string
                        enum:
                        - V400m
                        - P400
                        - E285
                        example: V400m
                      quantity:
                        type: integer
                        example: 1
              required:
              - business_id
              - sub_account_id
              - provider
              - order_type
              - order_items
      responses:
        '201':
          description: Successful place a Terminal Order
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: terminals_order
                    data:
                      $ref: '#/components/schemas/TerminalsOrder'
  /web_component_tokens:
    post:
      summary: Generate A Token
      description: "The web component token provides permission to render a web component\
        \ on your frontend. \nTo get a web component token post your [access token](https://docs.justifi.tech/api-spec#tag/API-Credentials/operation/CreateAccessToken)\
        \ in the header and the `business_id` or `account_id` as part of the `resources`\
        \ array in the body.\nFor a list of resources needed for each web component\
        \ please refer to [Roles need for each component](https://docs.justifi.tech/infrastructure/webComponentTokens#roles-need-for-each-component).\n\
        The token will be valid for 60 minutes.\n"
      operationId: CreateWebComponentToken
      tags:
      - Web Component Tokens
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                resources:
                  type: array
                  description: Build an array of concatenated role (read/write), resource
                    (account/business) and resource id which you need the web component
                    to access. For example ["write:business:biz_123"]
                  items:
                    type: string
            example:
              resources:
              - write:business:biz_abc
              - write:account:account_123
      responses:
        '200':
          description: A web component token has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: 'Use this field in the `auth-token` parameter of
                      the web component you would like to render

                      '
                    type: string
  /checkouts:
    post:
      summary: Create a Checkout
      description: 'Create a checkout to initiate the collection of a Card Payment,
        ACH Payment, Insurance Quote Payment, BNPL Payment (not yet available via
        API),

        or Card Reader payment in a single flow. Checkouts have the following statuses:
        `created` after creating a checkout, `attempted` when a checkout

        payment is attempted, `completed` when a payment is collected for a checkout,
        `expired` when a checkout has not been completed after one week

        since being created

        '
      operationId: CreateCheckout
      tags:
      - Checkouts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account-required'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                  example: 10000
                  description: amount to charge in cents
                description:
                  type: string
                  description: your meaningful description of the checkout (e.g. an
                    order number or other value from your system)
                  example: order_xyz
                origin_url:
                  type: string
                  description: the domain on which the web component will be rendered,
                    required for web component usage only
                  example: http://localhost:3000
                payment_method_group_id:
                  type: string
                  format: uuid
                  description: payment method group to associate with the checkout
                  example: pmg_xyz123
                statement_descriptor:
                  type: string
                  description: description of the payment that will be available on
                    the account's bank statement, must have between 5-22 alphanumeric
                    characters and can include dash or underscore
                  example: Big Business
                application_fees:
                  type: object
                  description: (card/ach and card present only, not available for
                    bnpl) sets a custom application fee amount that applies to this
                    payment, instead of relying on application fee rates configured
                    at the platform account level. Must be greater than zero.
                  properties:
                    card:
                      type: object
                      properties:
                        amount:
                          type: number
                          description: custom application fee amount that applies
                            to card payment method.
                          example: 300
                    bank_account:
                      type: object
                      properties:
                        amount:
                          type: number
                          description: custom application fee amount that applies
                            to bank account payment method.
                          example: 150
                payment:
                  type: object
                  description: To override the information saved on the Payment when
                    a checkout is paid via JustiFi card/ach payment, please use these
                    attributes
                  properties:
                    description:
                      type: string
                      description: Override the default payment description of Checkout
                        [checkout id], use this attribute
                      example: Pay David for great work
                    metadata:
                      type: object
                      format: json
                      description: Adds metadata to the payment record
                      example: {}
                    expedited:
                      type: boolean
                      description: settlement priority of the payment, only applies
                        to ACH payments
              required:
              - amount
              - description
      responses:
        '201':
          description: Checkout was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: checkout
                    data:
                      $ref: '#/components/schemas/Checkout'
    get:
      summary: List Checkouts
      description: List Checkouts for your account. This endpoint supports [pagination](https://docs.justifi.tech/api-spec#section/Pagination).
      operationId: ListCheckouts
      tags:
      - Checkouts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - in: query
        name: payment_mode
        schema:
          type: string
          enum:
          - bnpl
          - ecom
        required: false
        example: bnpl
        description: 'the mode in which the checkout was completed

          '
      - in: query
        name: status
        schema:
          type: string
          enum:
          - created
          - completed
          - attempted
          - expired
        required: false
        example: completed
        description: 'the checkout status

          '
      - in: query
        name: payment_status
        schema:
          type: string
        description: 'the status of the payment which was use to complete the checkout

          '
      responses:
        '200':
          description: Successfully list checkouts
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      $ref: '#/components/schemas/Checkout'
  /checkouts/{id}:
    get:
      summary: Get Checkout
      description: Get information about a checkout
      operationId: GetCheckout
      tags:
      - Checkouts
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully get a checkout
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: checkout
                    data:
                      $ref: '#/components/schemas/Checkout'
    patch:
      summary: Update a Checkout
      description: Change a checkout's amount or description
      operationId: UpdateCheckout
      parameters:
      - $ref: '#/components/parameters/id-path'
      - $ref: '#/components/parameters/authorization-header'
      tags:
      - Checkouts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: number
                  example: 10000
                  description: amount to charge in cents
                description:
                  type: string
                  description: your meaningful description of the checkout (e.g. an
                    order number or other value from your system)
                  example: order_xyz
                statement_descriptor:
                  type: string
                  description: description of the payment that will be available on
                    the account's bank statement, must have between 5-22 alphanumeric
                    characters and can include dash or underscore
                  example: Big Business
                application_fees:
                  type: object
                  description: (card/ach and card present only, not available for
                    bnpl) sets a custom application fee amount that applies to this
                    payment, instead of relying on application fee rates configured
                    at the platform account level. Must be greater than zero.
                  properties:
                    card:
                      type: object
                      properties:
                        amount:
                          type: number
                          description: custom application fee amount that applies
                            to card payment method.
                          example: 300
                    bank_account:
                      type: object
                      properties:
                        amount:
                          type: number
                          description: custom application fee amount that applies
                            to bank account payment method.
                          example: 150
      responses:
        '200':
          description: Checkout update was successful
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: object
                    data:
                      $ref: '#/components/schemas/Checkout'
  /checkouts/{id}/complete:
    post:
      summary: Complete a Checkout
      description: 'Use to complete a checkout and capture a payment, requires an
        idempotency key for payment processing

        '
      operationId: CompleteCheckout
      tags:
      - Checkouts
      parameters:
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                payment_token:
                  type: string
                  example: pm_asdfakjsd23
                  description: Payment Method token which you want to use to complete
                    the payment
              required:
              - payment_token
            examples:
              Complete_a_checkout:
                value:
                  payment_token: pm_asdfakjsd23
      responses:
        '201':
          description: Checkout was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: checkout_completion
                    data:
                      $ref: '#/components/schemas/CheckoutCompletion'
  /checkouts/{id}/refunds:
    post:
      summary: Refund a Checkout
      description: 'Use to refund a checkout. You may refund the full amount or just
        a portion. When refunding a portion, multiple refunds are supported up until
        the full payment amount has been refunded.

        '
      operationId: RefundCheckout
      tags:
      - Checkouts
      parameters:
      - $ref: '#/components/parameters/idempotency-key-header'
      - $ref: '#/components/parameters/authorization-header'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              properties:
                amount:
                  type: integer
                  example: 4900
                  description: Amount to be refunded. If missing, the total amount
                    will be used.
                currency:
                  type: string
                  example: USD
                  description: Currency used with the Checkout. If missing, the checkout
                    currency will be used.
            examples:
              Partial_refund:
                value:
                  amount: 1000
      responses:
        '200':
          description: Refund was created successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: checkout_completion
                    data:
                      $ref: '#/components/schemas/CheckoutRefund'
  /reports:
    post:
      summary: Create a report
      description: 'Create a report for any of the available report types

        '
      operationId: CreateReport
      tags:
      - Reports (Preview Release)
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
              - $ref: '#/components/schemas/ReportInterchangeFeeParameters'
      responses:
        '200':
          description: Report was queued successfully
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: report
                    data:
                      $ref: '#/components/schemas/Report'
    get:
      summary: List Reports
      description: 'List all generated reports

        '
      operationId: ListSubAccounts
      tags:
      - Reports (Preview Release)
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      responses:
        '200':
          description: Successfully list reports
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope-list'
                - properties:
                    type:
                      example: array
                    data:
                      items:
                        $ref: '#/components/schemas/Report'
  /reports/{id}:
    get:
      summary: Get a report
      description: Get and generate the download url for a report
      operationId: GetReport
      tags:
      - Reports (Preview Release)
      parameters:
      - $ref: '#/components/parameters/authorization-header'
      - $ref: '#/components/parameters/sub-account'
      - $ref: '#/components/parameters/id-path'
      responses:
        '200':
          description: Successfully get a report
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelope'
                - properties:
                    type:
                      example: refund
                    data:
                      $ref: '#/components/schemas/Report'
x-webhooks:
  payments:
    post:
      description: 'Received for the following events: payment.created, payment.succeeded,
        payment.failed,

        payment.pending, payment.authorized, payment.captured, payment.canceled

        '
      tags:
      - Events
      operationId: paymentEvent
      summary: Payments
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    oneOf:
                    - $ref: '#/components/schemas/CardPayment'
                    - $ref: '#/components/schemas/BankAccountPayment'
            example: null
            examples:
              Card_payment_created_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_987zyx
                  idempotency_key: string
                  request_id: req_123
                  version: v1
                  data:
                    id: py_xyz
                    account_id: acc_123xyz
                    amount_disputed: 0
                    amount_refunded: 0
                    amount_returned: 0
                    amount: 10000
                    amount_refundable: 10000
                    application_fee_rate_id: afr_123xyz
                    balance: 99850
                    capture_strategy: automatic
                    captured: true
                    created_at: '2021-01-01T12:00:00Z'
                    currency: usd
                    description: my order xyz
                    disputed: false
                    error_code: null
                    error_description: null
                    fee_amount: 150
                    financial_transaction_id: ft_123xyz
                    is_test: true
                    metadata: {}
                    payment_intent_id: pi_xyz
                    refunded: false
                    returned: false
                    status: succeeded
                    terminal_id: trm_123_xyz
                    updated_at: '2021-01-01T12:00:00Z'
                    payment_method:
                      card:
                        id: pm_123xyz
                        acct_last_four: '4242'
                        brand: visa
                        name: Sylvia Fowles
                        token: pm_123xyz
                        metadata: {}
                        bin_details:
                          type: Debit
                          card_brand: Visa
                          card_class: Consumer
                          country: United States of America
                          issuer: WELLS FARGO BANK
                          funding_source: Debit
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      customer_id: null
                      signature: 123abc
                    application_fee:
                      id: fee_123xyz
                      amount: 150
                      currency: usd
                      created_at: '2021-01-01T12:00:00Z'
                      updated_at: '2021-01-01T12:00:00Z'
                    transaction_hold:
                      id: th_123xyz
                      financial_transaction_id: ft_123xyz
                    refunds: []
                    disputes: []
                  event_name: payment.created
              Bank_account_payment_created_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_987zyx
                  idempotency_key: string
                  request_id: req_123
                  version: v1
                  data:
                    id: py_xyz
                    account_id: acc_123xyz
                    amount_disputed: 0
                    amount_refunded: 0
                    amount_returned: 0
                    amount: 10000
                    amount_refundable: 10000
                    application_fee_rate_id: afr_123xyz
                    balance: 99850
                    capture_strategy: automatic
                    captured: true
                    created_at: '2021-01-01T12:00:00Z'
                    currency: usd
                    description: my order xyz
                    disputed: false
                    error_code: null
                    error_description: null
                    fee_amount: 150
                    financial_transaction_id: ft_123xyz
                    is_test: true
                    metadata: {}
                    payment_intent_id: pi_xyz
                    refunded: false
                    returned: false
                    status: succeeded
                    updated_at: '2021-01-01T12:00:00Z'
                    payment_method:
                      bank_account:
                        id: pm_123xyz
                        acct_last_four: '4242'
                        name: Sylvia Fowles
                        brand: Wells Fargo
                        token: pm_123xyz
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      customer_id: cust_123xyz
                      signature: 123abc
                    application_fee:
                      id: fee_123xyz
                      amount: 150
                      currency: usd
                      created_at: '2021-01-01T12:00:00Z'
                      updated_at: '2021-01-01T12:00:00Z'
                    transaction_hold:
                      id: th_123xyz
                      financial_transaction_id: ft_123xyz
                    refunds: []
                    disputes: []
                  event_name: payment.created
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  payment_intents:
    post:
      description: 'Received for the following events: payment_intent.attached, payment_intent.created,
        payment_intent.requires_capture, payment_intent.succeeded

        '
      tags:
      - Events
      operationId: paymentIntentEvent
      summary: Payment Intents (old)
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    oneOf:
                    - $ref: '#/components/schemas/CardPaymentIntent'
                    - $ref: '#/components/schemas/BankAccountPaymentIntent'
            example: null
            examples:
              Card_payment_intent_succeeded_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_987zyx
                  idempotency_key: string
                  request_id: req_123
                  version: v1
                  data:
                    id: pi_xyz
                    account_id: acc_123xyz
                    amount: 10000
                    currency: usd
                    description: my order xyz
                    last_error: null
                    metadata: {}
                    status: succeeded
                    payment_method:
                      customer_id: null
                      signature: 123abc
                      card:
                        id: pm_123xyz
                        name: Sylvia Fowles
                        acct_last_four: '4242'
                        brand: visa
                        token: pm_123xyz
                        month: '5'
                        year: '2042'
                        metadata: {}
                        address_line1_check: pass
                        address_postal_code_check: pass
                        bin_details:
                          type: Debit
                          card_brand: Visa
                          card_class: Consumer
                          country: United States of America
                          issuer: WELLS FARGO BANK
                          funding_source: Debit
                      created_at: '2021-01-01T12:00:00Z'
                      updated_at: '2021-01-01T12:00:00Z'
                  event_name: payment_intent.succeeded
              Bank_account_payment_intent_succeeded_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_987zyx
                  idempotency_key: string
                  request_id: req_123
                  version: v1
                  data:
                    id: pi_xyz
                    account_id: acc_123xyz
                    amount: 10000
                    currency: usd
                    description: my order xyz
                    last_error: null
                    metadata: {}
                    status: succeeded
                    payment_method:
                      customer_id: null
                      signature: 123abc
                      bank_account:
                        id: pm_123xyz
                        acct_last_four: '4242'
                        name: Sylvia Fowles
                        brand: Wells Fargo
                        token: pm_123xyz
                        created_at: '2021-01-01T12:00:00Z'
                        updated_at: '2021-01-01T12:00:00Z'
                      created_at: '2021-01-01T12:00:00Z'
                      updated_at: '2021-01-01T12:00:00Z'
                  event_name: payment_intent.succeeded
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  payment_methods:
    post:
      description: 'Received for the following events: payment_method.created, payment_method.updated,
        payment_method.bin_mapped

        '
      tags:
      - Events
      operationId: paymentMethodEvent
      summary: Payment Methods
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    oneOf:
                    - $ref: '#/components/schemas/CardPaymentMethod'
                    - $ref: '#/components/schemas/BankAccountPaymentMethod'
            example: null
            examples:
              Card_payment_method_created_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_456abc
                  idempotency_key: 30abie390hjag49h
                  request_id: req_100abc
                  version: v1
                  data:
                    signature: 9fxy123
                    customer_id: cust_987zyx
                    status: valid
                    invalid_reason: nil
                    card:
                      id: pm_123xyz
                      name: Sylvia Fowles
                      acct_last_four: '4242'
                      brand: visa
                      token: pm_123xyz
                      month: '5'
                      year: '2042'
                      metadata: {}
                      address_line1_check: pass
                      address_postal_code_check: pass
                  event_name: payment_method.created
              Bank_account_payment_method_created_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_456abc
                  idempotency_key: 30abie390hjag49h
                  request_id: req_100abc
                  version: v1
                  data:
                    signature: 9fxy123
                    customer_id: cust_987zyx
                    status: valid
                    invalid_reason: nil
                    bank_account:
                      id: pm_123xyz
                      acct_last_four: '9876'
                      brand: Wells Fargo
                      name: Phil Kessel
                      token: pm_123xyz
                      metadata: {}
                  event_name: payment_method.created
              Card_payment_method_bin_mapped_event:
                value:
                  id: evt_123xyz
                  account_id: acc_123xyz
                  account_type: test
                  platform_account_id: acc_456abc
                  idempotency_key: 30abie390hjag49h
                  request_id: req_100abc
                  version: v1
                  data:
                    signature: 9fxy123
                    customer_id: cust_987zyx
                    status: valid
                    invalid_reason: nil
                    card:
                      id: pm_123xyz
                      name: Sylvia Fowles
                      acct_last_four: '4242'
                      brand: visa
                      token: pm_123xyz
                      month: '5'
                      year: '2042'
                      metadata: {}
                      address_line1_check: pass
                      address_postal_code_check: pass
                      bin_details:
                        type: Debit
                        card_brand: Visa
                        card_class: Consumer
                        country: United States of America
                        issuer: WELLS FARGO BANK
                        funding_source: Debit
                  event_name: payment_method.bin_mapped
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  refunds:
    post:
      description: 'Received for the following events: payment.refunded, payment.refund.updated

        '
      tags:
      - Events
      operationId: refundEvent
      summary: Refunds
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/Refund'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  disputes:
    post:
      description: 'Received for the following events: payment.dispute.created, payment.dispute.closed,
        payment.dispute.forfeited, payment.dispute.submitted

        '
      tags:
      - Events
      operationId: disputeEvent
      summary: Disputes
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/Dispute'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully.  You must respond within 5 seconds.
  dispute_evidence:
    post:
      description: 'Received for the following events: payment.dispute_evidence.created,
        payment.dispute_evidence.uploaded

        '
      tags:
      - Events
      operationId: disputeEvidenceEvent
      summary: Dispute Evidence
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/DisputeEvidence'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  payouts:
    post:
      description: 'Received for the following events: payout.created, payout.paid,
        payout.failed, proceeds.payout.created

        '
      tags:
      - Events
      operationId: payoutEvent
      summary: Payouts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/Payout'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  sub_accounts:
    post:
      description: 'Received for the following events: sub_account.updated. This is
        published when an account''s status changes.

        '
      tags:
      - Events
      operationId: subAccountEvent
      summary: Sub Accounts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/SubAccount'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  application_fee_rates:
    post:
      description: 'Received for the following events: application_fee_rate.created,
        application_fee_rate.updated

        '
      tags:
      - Events
      operationId: applicationFeeRateEvent
      summary: Application Fee Rates
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/ApplicationFeeRate'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  checkouts:
    post:
      description: 'Received for the following events: checkout.created, checkout.completed

        '
      tags:
      - Events
      operationId: checkoutEvent
      summary: Checkouts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/Checkout'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  checkout_completions:
    post:
      description: 'Received for the following events: checkout.completion.succeeded,
        checkout.completion.failed, and

        checkout.completion.processing. Note checkout.completion.processing is only
        sent for terminal payments when

        a payment amount is sent to a terminal for processing.

        '
      tags:
      - Events
      operationId: checkoutCompletionEvent
      summary: Checkout Completions
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/CheckoutCompletion'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  payment_setting_updated:
    post:
      description: 'Received for the following event: account.payment_setting.updated

        '
      tags:
      - Events
      operationId: accountPaymentSettingUpdatedEvent
      summary: Account Payment Setting Updated
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/PaymentSetting'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully.  You must respond within 5 seconds.
  payout_setting_updated:
    post:
      description: 'Received for the following event: account.payout_setting.updated

        '
      tags:
      - Events
      operationId: accountPayoutSettingUpdatedEvent
      summary: Account Payout Setting Updated
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/PayoutSetting'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully.  You must respond within 5 seconds.
  terminal_orders:
    post:
      description: 'Received for the following events: terminal_order.created, terminal_order.updated

        '
      tags:
      - Events
      operationId: terminalOrderEvent
      summary: Terminal Orders
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/TerminalsOrder'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
  reports:
    post:
      description: 'Received for the following events: report.scheduled, report.processing,
        report.completed, report.failed, report.canceled

        '
      tags:
      - Events
      operationId: reportEvent
      summary: Reports
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Event'
              - properties:
                  data:
                    $ref: '#/components/schemas/Report'
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received
            successfully. You must respond within 5 seconds.
components:
  parameters:
    authorization-header:
      in: header
      name: Authorization
      schema:
        type: string
      required: true
      example: Bearer {access_token}
      description: the `access_token` value returned from the JustiFi `oauth/token`
        endpoint (be sure to append `Bearer` before the token)
    id-path:
      in: path
      name: id
      schema:
        type: string
        format: uuid
      required: true
    created-before:
      in: query
      name: created_before
      schema:
        type: string
        format: date-time
      required: false
      example: '2022-01-01T00:00:00Z'
      description: 'filter records which were created before the date and time (UTC)
        specified. Dates without time specified will default to 00:00:00

        '
    created-after:
      in: query
      name: created_after
      schema:
        type: string
        format: date-time
      required: false
      example: '2022-01-01T00:00:00Z'
      description: 'filter records which were created after the date and time (UTC)
        specified. Dates without time specified will default to 00:00:00

        '
    deposits-before:
      in: query
      name: deposits_before
      schema:
        type: string
        format: date-time
      required: false
      example: '2022-01-01T00:00:00Z'
      description: 'filter records which deposit before the date and time (UTC) specified.
        Dates without time specified will default to 00:00:00

        '
    deposits-after:
      in: query
      name: deposits_after
      schema:
        type: string
        format: date-time
      required: false
      example: '2022-01-01T00:00:00Z'
      description: 'filter records which deposit after the date and time (UTC) specified.
        Dates without time specified will default to 00:00:00

        '
    sub-account:
      in: header
      name: Sub-Account
      schema:
        type: string
      required: false
      example: acc_123xyz
      description: 'the id of the [sub account](https://docs.justifi.tech/api-spec#tag/Sub-Accounts)
        that this request applies to

        '
    idempotency-key-header:
      in: header
      name: Idempotency-Key
      schema:
        type: string
        format: uuid
      required: true
      example: my-request-123abc
      description: a string to identify your request (we recommend using a generated
        uuid, but you may use any unique string) see [Idempotent Requests](https://docs.justifi.tech/api-spec#section/Idempotent-Requests)
    sub-account-required:
      in: header
      name: Sub-Account
      schema:
        type: string
      required: true
      example: acc_123xyz
      description: 'the id of the [sub account](https://docs.justifi.tech/api-spec#tag/Sub-Accounts)
        that this request applies to

        '
    payment-method-id:
      in: query
      name: payment_method_id
      schema:
        type: string
      required: false
      example: pm_123xyz
      description: 'filter records which are associated with a payment method.

        '
    customer-id:
      in: query
      name: customer_id
      schema:
        type: string
      required: false
      example: cust_123xyz
      description: 'Note: customer_id is a deprecated field. Please use our payment
        method groups instead. filter records which are associated with a customer.

        '
    payment-method-group-id:
      in: query
      name: payment_method_group_id
      schema:
        type: string
      required: false
      example: pmg_123xyz
      description: 'filter records which are associated with a payment method group.

        '
    token-path:
      in: path
      name: token
      schema:
        type: string
      required: true
  schemas:
    PageInfo:
      type: object
      properties:
        end_cursor:
          description: the encoded id of the last record in the current list
          type: string
          example: WyIyMDIyLTAyLTA4IDE5OjUyOjM3LjEwNDE3MzAwMCIsIjY4MDliYTU5LTYxYjctNDg3MS05YWFiLWE2Y2MyNmY3M2M1ZCJd
        has_next:
          description: true if the collection contains records following the current
            list
          type: boolean
          default: false
        has_previous:
          description: true if the collection contains records ahead of the current
            list
          type: boolean
          default: false
        start_cursor:
          description: the encoded id of the first record in the current list
          type: string
          example: WyIyMDIyLTAyLTA4IDIwOjAxOjU4LjEyMDIzMjAwMCIsIjU5ZTFjNGI1LWFlOWQtNDIyZC04MTVkLWNjNzQ5NzdlYmFjYSJd
    Envelope-list:
      type: object
      properties:
        id:
          description: the object id
          type: number
          example: 1
        type:
          description: the object type, or array of objects
          type: string
          example: account
        data:
          description: the list of objects
          type: array
        page_info:
          description: information for cursor style pagination
          $ref: '#/components/schemas/PageInfo'
    SubAccount:
      type: object
      properties:
        id:
          description: sub account id
          type: string
          format: uuid
          example: acc_xyz
        name:
          description: sub account name
          type: string
          example: The Shire Haberdashery
        account_type:
          description: sub account type (live or test)
          type: string
          example: live
        status:
          description: sub account status
          type: string
          enum:
          - created
          - submitted
          - information_needed
          - rejected
          - enabled
          - disabled
          - archived
          example: enabled
        currency:
          type: string
          enum:
          - usd
          example: usd
        platform_account_id:
          description: id of associated platform account
          type: string
          format: uuid
          example: acc_xyz
        payout_account_id:
          description: id of active payout bank account
          type: string
          format: uuid
          example: ba_xyz
        business_id:
          description: id of associated business
          type: string
          format: uuid
          example: biz_xyz
        application_fee_rates:
          type: array
          description: list of associated application fee rates
        processing_ready:
          description: sub account ready for processing
          type: boolean
          example: false
        payout_ready:
          description: sub account ready for payouts
          type: boolean
          example: false
        related_accounts:
          description: when a live sub account is created, a related test account
            is automatically created; this provides both ids
          type: object
          properties:
            live_account_id:
              type: string
              format: uuid
              description: live sub account id (this will be nil if a sub account
                was created with test credentials)
              example: acc_xyz
            test_account_id:
              type: string
              format: uuid
              description: test sub account id
              example: acc_xyz
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    Envelope:
      type: object
      properties:
        id:
          description: the object id, also found in the data object
          type: string
          format: uuid
          example: prefix_xyz (same as id of data object)
        type:
          description: the object type, or array of objects
          type: string
          example: account
        data:
          description: the attributes for the object
          type: object
        page_info:
          description: information for cursor style pagination, is null for single
            records
          type: null
          nullable: true
    PayoutBankAccount:
      type: object
      properties:
        id:
          description: unique bank account id
          type: string
          format: uuid
        full_name:
          description: account holder's full name
          type: string
        bank_name:
          description: name of bank
          type: string
        account_number_last4:
          description: last 4 digits of the account number
          type: string
          example: 1111
        routing_number:
          type: string
        country:
          type: string
          enum:
          - US
          example: US
        currency:
          type: string
          enum:
          - usd
          example: usd
        nickname:
          type: string
        account_type:
          type: string
          enum:
          - checking
    SubAccountSettings:
      type: object
      properties:
        payments:
          type: object
          properties:
            id:
              description: unique payment settings id
              type: string
              example: stpy_7KRQzIYhUGxNscgLJP0Aum
            mcc_code:
              description: merchant category code configured
              type: string
              example: '5045'
            credit_card_payments:
              description: credit card payments enabled for processing
              type: boolean
              example: true
            ach_payments:
              description: ach payments enabled for processing
              type: boolean
              example: true
            card_present:
              description: card present feature enabled for processing
              type: boolean
              example: false
            bnpl_payments:
              description: buy now pay later feature enabled
              type: boolean
              example: false
            insurance_payments:
              description: insurance feature enabled
              type: boolean
              example: false
            platform_wallet_account:
              description: platform_wallet_account feature enabled
              type: boolean
              example: false
        payouts:
          type: object
          properties:
            id:
              description: unique payout settings id
              type: string
              example: stpo_1FrQmV9ByJEKjpKf5diaA4
            enabled:
              description: payouts enabled for the sub account
              type: boolean
              example: true
            statement_descriptor:
              description: statement descriptor for the payout
              type: string
              example: JustiFi
    Proceed:
      type: object
      properties:
        id:
          description: unique proceeds payout id
          type: string
          example: po_xyz
        account_id:
          description: id of the account associated with the proceeds payout
          type: string
          format: uuid
        amount:
          description: proceeds payout amount in cents
          type: number
          example: 100000
        bank_account:
          $ref: '#/components/schemas/PayoutBankAccount'
        currency:
          type: string
          enum:
          - usd
          example: usd
        delivery_method:
          description: how the proceeds payout is delivered
          type: string
          enum:
          - standard
        description:
          type: string
          nullable: true
        deposits_at:
          description: in UTC, the date and time of the proceeds payout deposit (or
            in rare cases, withdrawal)
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        refunds_count:
          description: number of refunds that impacted the proceeds payout
          type: number
          example: 5
        refunds_total:
          description: sum deducted from the proceeds payout as a result of accounts'
            refunds, in cents
          type: number
          example: 10000
        payments_count:
          description: number of payments that impacted the proceeds payout
          type: number
          example: 50
        payments_total:
          description: sum added to the proceeds payout as a result of accounts' payments,
            in cents
          type: number
          example: 110000
        payout_type:
          description: proceeds payouts are always of the type "proceeds" (other types
            apply only to sub accounts payouts)
          type: string
          enum:
          - proceeds
        other_total:
          description: sum of other less common transactions that impacted the proceeds
            payout, in cents
          type: number
          example: 100
        status:
          description: status of the proceeds payout
          type: string
          example: scheduled
          enum:
          - scheduled paid failed pending in_transit canceled
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this proceeds
            payout
          example:
            platform_payout_id: cp_12345
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    ProceedsReport:
      type: object
      properties:
        id:
          description: unique proceeds payout id
          type: string
          example: po_xyz
        csv_url:
          description: url that links to downloadable CSV report for proceeds payout
          type: string
          example: https://justifi-test-platform-proceeds-reports.s3.amazonaws.com/acc_1234lkj/po_23jdfi36dqhj.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=test
        report_url:
          description: url that links to downloadable JSON report for proceeds payout
          type: string
          example: https://justifi-test-platform-proceeds-reports.s3.amazonaws.com/acc_1234lkj/po_23jdfi36dqhj.json?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=test
    BinDetails:
      type: object
      properties:
        type:
          description: Type of card issued, values include Credit, Debit, Prepaid,
            Unknown
          type: string
          example: Credit
        card_brand:
          description: Brand or network associated with card. Possible values include
            Visa, Mastercard, American Express, Discover
          type: string
          example: Visa
        card_class:
          type: string
          example: Consumer
        country:
          description: Long form country name which issued the card
          type: string
          example: United States of America
        issuer:
          description: Issuing bank
          type: string
          example: WELLS FARGO BANK, N.A.
        funding_source:
          description: Source of funds defined by BIN for a given card. Values include
            Charge, Credit, Debit, Deferred Debit (Visa Only), Network Only, Prepaid
          type: string
          example: Credit
    CardWithBinDetails:
      type: object
      properties:
        id:
          description: unique card id
          type: string
          format: uuid
          example: pm_123xyz
        acct_last_four:
          description: last 4 digits of the card number
          type: string
          example: 4242
        brand:
          description: card brand or bank name
          example: Visa
        name:
          description: card or account holder name
          example: Amanda Kessel
        token:
          description: 'same value as unique card id; can be saved and used to process
            multiple

            payments with the same card

            '
          example: pm_123xyz
        month:
          description: expiration date month
          example: '5'
        year:
          description: expiration date year
          example: '2042'
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this card
          example: {}
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        address_line1_check:
          type: string
          example: unchecked
          enum:
          - fail
          - pass
          - unavailable
          - unchecked
        address_postal_code_check:
          type: string
          example: unchecked
          enum:
          - fail
          - pass
          - unavailable
          - unchecked
        bin_details:
          $ref: '#/components/schemas/BinDetails'
    CardPaymentMethodWithBinDetails:
      type: object
      properties:
        status:
          description: signals whether the payment method is valid or invalid
          type: string
          example: valid
        invalid_reason:
          description: informs reason that the payment method has been marked invalid,
            if status is invalid
          type: string
          example: nil
          nullable: true
        card:
          $ref: '#/components/schemas/CardWithBinDetails'
        customer_id:
          description: id of the customer associated with the payment method
          type: string
          example: cust_xyz
          nullable: true
        signature:
          description: signature that uniquely identifies a credit card or bank account
            across payment methods
          type: string
          example: 4guAJNkVA3lRLVlanNVoBK
          nullable: true
        account_id:
          description: account id associated with payment method
          type: string
          example: acc_123
          nullable: true
    CardPaymentIntent:
      type: object
      properties:
        id:
          description: unique payment intent id
          type: string
          example: pi_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: the amount charged in cents
          type: number
          example: 10000
        currency:
          type: string
          enum:
          - usd
          example: usd
        description:
          type: string
          description: your meaningful description of the payment (e.g. an order number
            or other value from your system)
          example: my_order_xyz
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payment
            intent
          example: {}
        payment_method:
          description: will include the payment method once one is attached
          $ref: '#/components/schemas/CardPaymentMethodWithBinDetails'
        status:
          type: string
          enum:
          - requires_payment_method
          - pending
          - requires_capture
          - canceled
          - succeeded
          description: status of the payment intent
        successful_payment_id:
          type: string
          format: uuid
          example: py_xyz
          description: payment id, if this payment intent was paid for successfully
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    BankAccount:
      type: object
      properties:
        id:
          description: unique bank account payment method id
          type: string
          format: uuid
          example: pm_123xyz
        account_owner_name:
          description: account owner name
          type: string
          example: Lindsay Whalen
        account_type:
          description: type of account (checking, savings, etc.)
          type: string
          example: checking
        bank_name:
          description: bank name
          example: Wells Fargo
        account_number_last4:
          description: last 4 digits of the account number
          type: string
          example: 1111
        token:
          description: 'same value as unique bank account id; can be saved and used
            to process multiple

            payments with the same bank account

            '
          example: pm_123xyz
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this bank
            account
          example:
            new: info
    BankAccountPaymentMethodWithStatus:
      type: object
      properties:
        status:
          description: signals whether the payment method is valid or invalid
          type: string
          example: valid
        invalid_reason:
          description: informs reason that the payment method has been marked invalid,
            if status is invalid
          type: string
          example: nil
          nullable: true
        bank_account:
          $ref: '#/components/schemas/BankAccount'
        customer_id:
          description: id of the customer associated with the payment method
          type: string
          example: cust_xyz
          nullable: true
        signature:
          description: signature that uniquely identifies a credit card or bank account
            across payment methods
          type: string
          example: 4guAJNkVA3lRLVlanNVoBK
          nullable: true
        account_id:
          description: account id associated with payment method
          type: string
          example: acc_123
          nullable: true
    BankAccountPaymentIntent:
      type: object
      properties:
        id:
          description: unique payment intent id
          type: string
          example: pi_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: the amount charged in cents
          type: number
          example: 10000
        currency:
          type: string
          enum:
          - usd
          example: usd
        description:
          type: string
          description: your meaningful description of the payment (e.g. an order number
            or other value from your system)
          example: my_order_xyz
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payment
            intent
          example: {}
        payment_method:
          description: will include the payment method once one is attached
          $ref: '#/components/schemas/BankAccountPaymentMethodWithStatus'
        status:
          type: string
          enum:
          - requires_payment_method
          - pending
          - requires_capture
          - canceled
          - succeeded
          description: status of the payment intent
        successful_payment_id:
          type: string
          format: uuid
          example: py_xyz
          description: payment id, if this payment intent was paid for successfully
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    CreateCard:
      type: object
      properties:
        name:
          description: cardholder full name
          type: string
          example: Kevin Garnett
        number:
          description: card number
          type: string
          example: 4242424242424242
        verification:
          description: card verification number
          type: string
          example: 123
        month:
          description: card expiration month
          type: string
          example: 5
        year:
          description: card expiration year
          type: string
          example: 2042
        address_line1:
          description: card address street
          type: string
          example: 123 Fake St
        address_line2:
          description: card address apartment, suite, etc.
          type: string
          example: Suite 101
        address_city:
          description: card address city
          type: string
          example: Cityville
        address_state:
          description: card address state
          type: string
          example: MN
        address_postal_code:
          description: card address ZIP
          type: string
          example: 55555
        address_country:
          description: card address 2-character country code
          type: string
          example: US
        brand:
          description: card brand or institution
          type: string
          example: Visa
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this card
          example: {}
      required:
      - name
      - number
      - month
      - year
      - address_postal_code
    Card:
      type: object
      properties:
        id:
          description: unique card id
          type: string
          format: uuid
          example: pm_123xyz
        acct_last_four:
          description: last 4 digits of the card number
          type: string
          example: 4242
        brand:
          description: card brand or bank name
          example: Visa
        name:
          description: card or account holder name
          example: Amanda Kessel
        token:
          description: 'same value as unique card id; can be saved and used to process
            multiple

            payments with the same card

            '
          example: pm_123xyz
        month:
          description: expiration date month
          example: '5'
        year:
          description: expiration date year
          example: '2042'
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this card
          example: {}
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        address_line1_check:
          type: string
          example: unchecked
          enum:
          - fail
          - pass
          - unavailable
          - unchecked
        address_postal_code_check:
          type: string
          example: unchecked
          enum:
          - fail
          - pass
          - unavailable
          - unchecked
    CardPaymentMethod:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/Card'
        customer_id:
          description: customer_id is a deprecated field. Please use our payment method
            groups instead.
          type: string
          example: cust_xyz
          nullable: true
        signature:
          description: signature that uniquely identifies a credit card or bank account
            across payment methods
          type: string
          example: 4guAJNkVA3lRLVlanNVoBK
          nullable: true
        account_id:
          description: account id associated with payment method
          type: string
          example: acc_123
          nullable: true
    ApplicationFee:
      type: object
      properties:
        id:
          description: unique application fee id
          type: string
          format: uuid
          example: fee_123xyz
        amount:
          description: application fee amount, in cents
          type: number
          example: 150
        currency:
          type: string
          enum:
          - usd
          example: usd
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    TransactionHold:
      type: object
      properties:
        id:
          description: unique transaction hold id
          type: string
          example: th_123xyz
        financial_transaction_id:
          type: string
          description: financial transaction id the transaction hold is associated
            to
          format: uuid
          example: ft_123xyz
    CardPayment:
      type: object
      properties:
        id:
          description: unique payment id
          type: string
          example: py_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: payment amount in cents
          type: number
          example: 10000
        amount_disputed:
          description: sum of open or lost disputes for this payment, in cents
          type: number
          example: 0
        amount_refunded:
          description: sum of refunds for this payment, in cents
          type: number
          example: 0
        amount_refundable:
          description: amount of this payment currently able to be refunded, in cents
          type: number
          example: 10000
        balance:
          description: sum of debits and credits for this payment, in cents (reflects
            the amount this account has earned from this payment). Compiled and calculated
            value, eventually consistent. To see all changes affecting the payment's
            balance call [Get Balance Transactions](#operation/GetPaymentBalanceTransactions)
          type: number
          example: 99850
        fee_amount:
          type: number
          description: sum of fees for this payment
          example: 150
        financial_transaction_id:
          type: string
          description: associated financial transaction id
          example: ft_123xyz
        captured:
          description: whether or not this payment is captured
          type: boolean
          example: true
        capture_strategy:
          type: string
          example: automatic
          enum:
          - automatic
          - manual
        currency:
          type: string
          enum:
          - usd
          example: usd
        description:
          type: string
          description: your meaningful description of the payment (e.g. an order number
            or other value from your system)
          example: my_order_xyz
        disputed:
          type: boolean
          description: whether or not this payment has any open or lost disputes
          example: false
        disputes:
          type: array
          description: list of associated disputes
          example: []
        error_code:
          type: string
          description: error code if the payment fails
          example: credit_card_number_invalid
        error_description:
          type: string
          description: text description of the error code
          example: Credit Card Number Invalid (Failed LUHN checksum)
        is_test:
          type: boolean
          description: whether or not this payment was made using the test account
          example: true
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payment
          example: {}
        payment_intent_id:
          type: string
          description: unique id of associated payment intent
          example: pi_123xyz
        checkout_id:
          type: string
          description: unique id of associated checkout
          example: cho_123xyz
        payment_method:
          $ref: '#/components/schemas/CardPaymentMethod'
        application_fee:
          $ref: '#/components/schemas/ApplicationFee'
        application_fee_rate_id:
          type: string
          description: unique id of application fee rate applied to this payment,
            if any
          example: afr_123xyz
        refunded:
          type: boolean
          description: whether or not this payment has any refunds
          example: false
        status:
          type: string
          enum:
          - pending
          - authorized
          - canceled
          - succeeded
          - failed
          - partially_refunded
          - fully_refunded
          - disputed
          description: status of the payment
        payment_mode:
          type: string
          example: ecom
          enum:
          - ecom
          - ach
          - card_present
        terminal_id:
          type: string
          description: id of terminal used to process the card payment, if any
          example: trm_123xyz
        transaction_hold:
          allOf:
          - type: object
          - description: present when the payment has been flagged for review and
              held from payouts
          - $ref: '#/components/schemas/TransactionHold'
        expedited:
          type: boolean
          nullable: true
          description: settlement priority of the payment, only applies to ACH payments
          example: null
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    BankAccountPaymentMethod:
      type: object
      properties:
        bank_account:
          $ref: '#/components/schemas/BankAccount'
        customer_id:
          description: customer_id is a deprecated field. Please use our payment method
            groups instead.
          type: string
          example: cust_xyz
          nullable: true
        signature:
          description: signature that uniquely identifies a credit card or bank account
            across payment methods
          type: string
          example: 4guAJNkVA3lRLVlanNVoBK
          nullable: true
        account_id:
          description: account id associated with payment method
          type: string
          example: acc_123
          nullable: true
    BankAccountPayment:
      type: object
      properties:
        id:
          description: unique payment id
          type: string
          example: py_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: payment amount in cents
          type: number
          example: 10000
        amount_disputed:
          description: sum of open or lost disputes for this payment, in cents
          type: number
          example: 0
        amount_refunded:
          description: sum of refunds for this payment, in cents
          type: number
          example: 0
        amount_refundable:
          description: amount of this payment currently able to be refunded, in cents
          type: number
          example: 10000
        balance:
          description: sum of debits and credits for this payment, in cents (reflects
            the amount this account has earned from this payment). Compiled and calculated
            value, eventually consistent. To see all changes affecting the payment's
            balance see [Get Balance Transactions](#operation/GetPaymentBalanceTransactions)
          type: number
          example: 99850
        fee_amount:
          type: number
          description: sum of fees for this payment
          example: 150
        financial_transaction_id:
          type: string
          description: associated financial transaction id
          example: ft_123xyz
        captured:
          description: whether or not this payment is captured
          type: boolean
          example: true
        capture_strategy:
          type: string
          example: automatic
          enum:
          - automatic
          - manual
        currency:
          type: string
          enum:
          - usd
          example: usd
        description:
          type: string
          description: your meaningful description of the payment (e.g. an order number
            or other value from your system)
          example: my_order_xyz
        disputed:
          type: boolean
          description: whether or not this payment has any open or lost disputes
          example: false
        disputes:
          type: array
          description: list of associated disputes
          example: []
        error_code:
          type: string
          description: error code if the payment fails
          example: credit_card_number_invalid
        error_description:
          type: string
          description: text description of the error code
          example: Credit Card Number Invalid (Failed LUHN checksum)
        is_test:
          type: boolean
          description: whether or not this payment was made using the test account
          example: true
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payment
          example: {}
        payment_intent_id:
          type: string
          description: unique id of associated payment intent
          example: pi_123xyz
        checkout_id:
          type: string
          description: unique id of associated checkout
          example: cho_123
        payment_method:
          $ref: '#/components/schemas/BankAccountPaymentMethod'
        application_fee:
          $ref: '#/components/schemas/ApplicationFee'
        application_fee_rate_id:
          type: string
          description: unique id of application fee rate applied to this payment,
            if any
          example: afr_123xyz
        refunded:
          type: boolean
          description: whether or not this payment has any refunds
          example: false
        status:
          type: string
          enum:
          - pending
          - authorized
          - canceled
          - succeeded
          - failed
          - partially_refunded
          - fully_refunded
          - disputed
          description: status of the payment
        payment_mode:
          type: string
          example: ecom
          enum:
          - ecom
          - ach
          - card_present
        terminal_id:
          type: string
          description: id of terminal used to process a card payment, null for bank
            account payments
          example: trm_123xyz
        transaction_hold:
          allOf:
          - type: object
          - description: present when the payment has been flagged for review and
              held from payouts
          - $ref: '#/components/schemas/TransactionHold'
        expedited:
          type: boolean
          nullable: true
          description: settlement priority of the payment, only applies to ACH payments
          example: true
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    CreateBankAccount:
      type: object
      description: Bank Account
      properties:
        account_owner_name:
          description: account owner name
          type: string
          example: Lindsay Whalen
        routing_number:
          description: routing number
          type: string
          example: '110000000'
        account_number:
          description: bank account number
          type: string
          example: 000123456789
        account_type:
          description: type of account
          type: string
          example: checking
          enum:
          - checking
          - savings
        account_owner_type:
          description: type of account holder
          type: string
          example: individual
          enum:
          - individual
          - company
        country:
          description: country associated with the bank account
          type: string
          example: US
        currency:
          description: currency of the bank account
          type: string
          example: usd
          enum:
          - usd
        bank_name:
          description: bank name
          type: string
          example: Wells Fargo
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this bank
            account
          example: {}
      required:
      - account_owner_name
      - routing_number
      - account_number
      - account_type
      - account_owner_type
      - country
      - currency
    PaymentError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              description: error code if the payment fails
              type: string
              example: card_declined
            decline_code:
              description: decline code if the payment fails
              type: string
              example: do_not_retry
            message:
              description: text description of the error code
              type: string
              example: This card has been rejected. Please try a different card or
                payment method
            network:
              description: card network used for payment
              type: string
              nullable: true
              example: MASTERCARD
            network_error_category:
              description: network error category code
              type: string
              nullable: true
              example: '03'
            network_error_code:
              description: network error code
              type: string
              nullable: true
              example: '504'
    Refund:
      type: object
      properties:
        id:
          description: refund unique id
          type: string
          example: re_xyz
        payment_id:
          description: the payment for which this refund is being issued
          type: string
          format: uuid
          example: py_xyz
        amount:
          description: the amount of this refund in cents
          type: number
          example: 100
        description:
          type: string
          description: an optional note about this refund
          example: customer canceled their order
        reason:
          description: the reason this refund is being issued
          type: string
          example: duplicate
          enum:
          - duplicate
          - fraudulent
          - customer_request
        status:
          description: the status of this refund
          type: string
          example: succeeded
          enum:
          - pending
          - succeeded
          - failed
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this refund
          example: {}
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    PaymentBalanceTransaction:
      type: object
      properties:
        id:
          description: unique payment balance transaction id
          type: string
          format: uuid
          example: pbt_123xyz
        amount:
          description: payment balance transaction amount, in cents
          type: number
          example: 40145
        balance:
          description: balance amount of the payment balance transaction, in cents
          type: number
          example: 53550
        currency:
          type: string
          enum:
          - usd
          example: usd
        financial_transaction_id:
          description: id of the financial transaction associated with the payment
            balance transaction
          type: string
          format: uuid
          example: ft_123xyz
        payment_id:
          description: id of the payment associated with the payment balance transaction
          type: string
          format: uuid
          example: py_123xyz
        payment_balance_txn_type:
          description: type of the transaction object associated with the payment
            balance transaction
          type: string
          enum:
          - payment
          - payment_fee
          - payout
          - refund
          - fee_refund
          - dispute
          - dispute_fee
          - dispute_fee_refund
          - dispute_refund
          example: fee_refund
        source_id:
          description: id of the source object associated with the payment balance
            transaction
          type: string
          format: uuid
          example: fee_123xyz
        source_type:
          description: type of the source object associated with the payment balance
            transaction
          type: string
          example: ApplicationFee
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    CardResponse:
      type: object
      properties:
        id:
          description: the object id
          type: number
          example: pm_123xyz
        type:
          description: the object type, or array of objects
          type: string
          example: payment_method
        data:
          description: the attributes for the object
          type: object
          properties:
            signature:
              description: unique signature associated with the payment_method
              type: string
              example: 3aGWnUznQ
            customer_id:
              description: customer_id is a deprecated field. Please use our payment
                method groups instead.
              type: string
              example: cust_123abc
            account_id:
              description: account id associated with payment method
              type: string
              example: acc_123
              nullable: true
            status:
              description: signals whether the payment method is valid or invalid
              type: string
              example: valid
            invalid_reason:
              description: informs reason that the payment method has been marked
                invalid, if status is invalid
              type: string
              example: INVALID_ACCOUNT_NUMBER
              nullable: true
            card:
              description: the card associated with the payment_method
              type: object
              properties:
                id:
                  description: unique card payment method id
                  type: string
                  format: uuid
                  example: pm_123xyz
                name:
                  description: card holder name
                  type: string
                  example: Lindsay Whalen
                acct_last_four:
                  description: last 4 digits of the account number
                  type: string
                  example: 1111
                brand:
                  description: card brand or institution
                  type: string
                  example: visa
                token:
                  description: 'same value as unique bank account id; can be saved
                    and used to process multiple

                    payments with the same bank account

                    '
                  example: pm_123xyz
                month:
                  description: expiration date month
                  example: '5'
                year:
                  description: expiration date year
                  example: '2042'
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this bank account
                  example:
                    new: info
                address_line1_check:
                  description: address line verification check
                  example: pass
                address_postal_code_check:
                  description: postal code verification check
                  example: pass
                bin_details:
                  $ref: '#/components/schemas/BinDetails'
        page_info:
          description: information for cursor style pagination, is null for single
            records
          type: string
          nullable: true
    BankAccountResponse:
      type: object
      properties:
        id:
          description: the object id
          type: number
          example: pm_123xyz
        type:
          description: the object type, or array of objects
          type: string
          example: payment_method
        data:
          description: the attributes for the object
          type: object
          properties:
            signature:
              description: unique signature associated with the payment_method
              type: string
              example: 3aGWnUznQ
            customer_id:
              description: customer_id is a deprecated field. Please use our payment
                method groups instead.
              type: string
              example: cust_123abc
            account_id:
              description: account id associated with payment method
              type: string
              example: acc_123
            status:
              description: signals whether the payment method is valid or invalid
              type: string
              example: valid
            invalid_reason:
              description: informs reason that the payment method has been marked
                invalid, if status is invalid
              type: string
              example: nil
              nullable: true
            bank_account:
              description: the bank account associated with the payment_method
              type: object
              properties:
                id:
                  description: unique bank account payment method id
                  type: string
                  format: uuid
                  example: pm_123xyz
                account_owner_name:
                  description: account owner name
                  type: string
                  example: Lindsay Whalen
                account_type:
                  description: type of account (checking, savings, etc.)
                  type: string
                  example: checking
                bank_name:
                  description: bank name
                  example: Wells Fargo
                account_number_last4:
                  description: last 4 digits of the account number
                  type: string
                  example: 1111
                token:
                  description: 'same value as unique bank account id; can be saved
                    and used to process multiple

                    payments with the same bank account

                    '
                  example: pm_123xyz
                metadata:
                  type: object
                  format: json
                  description: any useful information you'd like to store alongside
                    this bank account
                  example:
                    new: info
        page_info:
          description: information for cursor style pagination, is null for single
            records
          type: string
          nullable: true
    UpdateCard:
      type: object
      properties:
        month:
          description: new expiration month
          type: string
          example: 5
        year:
          description: new expiration year
          type: string
          example: 2042
        address_line1:
          description: new card address street
          type: string
          example: 123 Fake St
        address_line2:
          description: new card address apartment, suite, etc.
          type: string
          example: Suite 101
        address_city:
          description: new card address city
          type: string
          example: Cityville
        address_state:
          description: new card address state
          type: string
          example: MN
        address_postal_code:
          description: new card address ZIP
          type: string
          example: 55555
        address_country:
          description: new card address 2-character country code
          type: string
          example: US
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this card;
            when you update metadata, any previous metadata will be overwritten
          example:
            new: info
    UpdateBankAccount:
      type: object
      description: Bank Account
      properties:
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this bank
            account; when you update metadata, any previous metadata will be overwritten
          example:
            new: info
    PaymentMethodGroupResponse:
      type: object
      properties:
        id:
          description: the object id
          type: string
          example: pm_123xyz
        account_id:
          description: the account_id associated with the object
          type: string
          example: acc_123xyz
        platform_account_id:
          description: the account_id for the platform account associated with the
            object
          type: string
          example: acc_321abc
    Payout:
      type: object
      properties:
        id:
          description: unique payout id
          type: string
          example: po_xyz
        account_id:
          description: id of the account associated with the payout
          type: string
          format: uuid
        amount:
          description: payout amount in cents
          type: number
          example: 100000
        bank_account:
          $ref: '#/components/schemas/PayoutBankAccount'
        currency:
          type: string
          enum:
          - usd
          example: usd
        delivery_method:
          description: how the payout is delivered
          type: string
          enum:
          - standard
        description:
          type: string
          nullable: true
        deposits_at:
          description: in UTC, the estimated date and time of the payout deposit (or
            in rare cases, withdrawal)
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        fees_total:
          description: sum of fees in the payout, in cents
          type: number
          example: 5000
        refunds_count:
          description: number of refunds in the payout
          type: number
          example: 5
        refunds_total:
          description: sum of refunds in the payout, in cents
          type: number
          example: 10000
        payments_count:
          description: number of payments in the payout
          type: number
          example: 50
        payments_total:
          description: sum of payments in the payout, in cents
          type: number
          example: 110000
        payout_type:
          description: type of payment method used for the payments in the payout
            (funds from different types of payment methods settle at different intervals;
            in order to pay out your funds ASAP, we batch separate payouts for each
            payment method type)
          type: string
          enum:
          - ach cc
        other_total:
          description: sum of other less common transactions in the payout, in cents
          type: number
          example: 100
        status:
          description: status of the payout
          type: string
          example: paid
          enum:
          - paid failed forwarded scheduled in_transit canceled
        settlement_priority:
          description: settlement priority of the payout, either standard or expedited.
          type: string
          example: standard
          enum:
          - standard expedited
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payout
          example:
            customer_payout_id: cp_12345
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    PayoutCsvReport:
      type: object
      properties:
        id:
          description: unique payout id
          type: string
          example: po_xyz
        csv_url:
          description: url that links to downloadable CSV report for payout.
          type: string
          example: https://justifi-test-payouts-reports.s3.amazonaws.com/acc_1234lkj/po_23jdfi36dqhj.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=test
    BalanceTransaction:
      type: object
      properties:
        id:
          description: unique balance transaction id
          type: string
          example: bt_xyz
        account_id:
          description: id of the account associated with the balance transaction
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: balance transaction amount, in cents
          type: number
          example: 100000
        available_on:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        currency:
          type: string
          enum:
          - usd
          example: usd
        description:
          type: string
          nullable: true
        fee:
          description: amount of fees deducted from the balance transaction amount,
            in cents
          type: number
          example: 5000
        financial_transaction_id:
          description: id of the financial transaction associated with the balance
            transaction
          type: string
          format: uuid
          example: ft_xyz
        net:
          description: net amount of the balance transaction (after fees are deducted),
            in cents
          type: number
          example: 600
        payout_id:
          description: id of the payout associated with the balance transaction
          type: string
          format: uuid
          example: po_xyz
        source_id:
          description: id of the source object associated with the balance transaction
          type: string
          format: uuid
          example: py_xyz
        source_type:
          description: type of source object associated with the balance transaction
            (for example payment, refund, dispute, payout)
          type: string
          example: payment
        txn_type:
          description: type of transaction object associated with the balance transaction
          type: string
          example: seller_payment
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    DisputeResponse:
      type: object
      properties:
        additional_statement:
          type: string
          description: any additional evidence or statements
        cancellation_policy_disclosure:
          type: string
          description: an explanation of how and when the customer was shown your
            cancellation policy prior to purchase
        cancellation_rebuttal:
          type: string
          description: "a justification for why the customer\u2019s subscription was\
            \ not canceled"
        customer_billing_address:
          type: string
          description: the billing address provided by the customer
        customer_email_address:
          type: string
          description: the email address of the customer
        customer_name:
          type: string
          description: the name of the customer
        customer_purchase_ip_address:
          type: string
          description: the IP address that the customer used when making the purchase
        duplicate_charge_explanation:
          type: string
          description: an explanation of the difference between the disputed charge
            versus the prior charge that appears to be a duplicate
        product_description:
          type: string
          description: a description of the product or service that was sold
        refund_policy_disclosure:
          type: string
          description: documentation demonstrating that the customer was shown your
            refund policy prior to purchase
        refund_refusal_explanation:
          type: string
          description: justification for why the customer is not entitled to a refund
        service_date:
          type: string
          description: the date on which the customer received or began receiving
            the purchased service
          example: '2024-10-31'
        shipping_address:
          type: string
          description: the address to which a physical product was shipped
        shipping_carrier:
          type: string
          description: the delivery service that shipped a physical product, such
            as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase,
            please separate them with commas
        shipping_date:
          type: string
          description: the date on which a physical product began its route to the
            shipping address
          example: '2024-10-31'
        shipping_tracking_number:
          type: string
          description: the tracking number for a physical product. If multiple tracking
            numbers were generated for this purchase, please separate them with commas
        duplicate_charge_original_payment_id:
          type: string
          description: the payment id for the prior charge which appears to be a duplicate
            of the disputed charge
    Dispute:
      type: object
      properties:
        id:
          description: unique dispute id
          type: string
          example: dp_xyz
        payment_id:
          description: the disputed payment
          type: string
          format: uuid
          example: py_xyz
        account_id:
          description: id of the account associated with the dispute
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: amount disputed in cents
          type: number
          example: 100
        currency:
          type: string
          enum:
          - usd
          example: usd
        reason:
          type: string
          description: the reason this payment was disputed
          example: fraudulent
        due_date:
          type: string
          format: date
          description: due date for evidence submission to counter the dispute
          example: '2025-02-23'
        status:
          description: status of the dispute
          type: string
          example: won
          enum:
          - needs_response
          - under_review
          - won
          - lost
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this dispute
          example: {}
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        dispute_response:
          allOf:
          - type: object
          - description: present when evidence was submitted to counter dispute
          - $ref: '#/components/schemas/DisputeResponse'
          - nullable: true
        dispute_reversal:
          type: object
          description: present when dispute gets reversed from lost to won
          properties:
            description:
              type: string
              example: Dispute was reversed
            created_at:
              type: string
              format: date-time
              example: '2021-01-01T12:00:00Z'
          nullable: true
    DisputeEvidence:
      type: object
      properties:
        id:
          description: unique dispute evidence id
          type: string
          example: dpe_xyz
        file_name:
          type: string
          example: receipt.pdf
          description: dispute evidence file name
        file_type:
          type: string
          description: dispute evidence file type
          example: application/pdf
          enum:
          - image/jpeg
          - image/png
          - application/pdf
          - application/zip
          - application/x-zip-compressed
        dispute_evidence_type:
          type: string
          description: dispute evidence type matching the file that will be uploaded
          example: receipt
          enum:
          - cancellation_policy
          - customer_communication
          - customer_signature
          - duplicate_charge_documentation
          - receipt
          - refund_policy
          - service_documentation
          - shipping_documentation
          - uncategorized_file
        status:
          type: string
          description: dispute evidence status
          enum:
          - pending
          - uploaded
        description:
          type: string
          description: description of the dispute evidence file that will be uploaded
        presigned_url:
          type: string
          description: url that should be used to submit a put request to upload the
            evidence file
    InsurancePolicy:
      type: object
      properties:
        id:
          description: unique record id
          type: string
          example: ins_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        amount:
          description: the amount charged in cents
          type: number
          example: 10000
        currency:
          type: string
          enum:
          - usd
          example: usd
        partner_name:
          type: string
          description: partner insurance provider name
          example: vertical_insure
        partner_quote_id:
          type: string
          description: quote id provided by partner provider
          example: test-123
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this payment
            intent
          example: {}
        status:
          type: string
          enum:
          - created
          - bound
          description: status of the payment intent
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    AddressResponse:
      type: object
      properties:
        id:
          description: unique address id
          type: string
          example: addr_123xyz
        line1:
          type: string
          example: 123 Example St
        line2:
          type: string
          example: Suite 101
        city:
          type: string
          example: Minneapolis
        state:
          type: string
          example: MN
        postal_code:
          type: string
          example: '55555'
        country:
          type: string
          example: USA
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: doc_abc123
        description:
          type: string
          example: My Document
          description: description of the document, used for your reference
        file_name:
          type: string
          example: my_document
          description: file name of the document
        file_type:
          type: string
          example: pdf
          description: the file media type/extension of the file you are uploading.
            For example, text/plain, application/pdf, image/png
        document_type:
          type: string
          enum:
          - balance_sheet
          - bank_statement
          - government_id
          - profit_and_loss_statement
          - tax_return
          - other
          example: balance_sheet
        business_id:
          type: string
          format: uuid
          example: biz_abc123
          description: the business id to associate with this document (one of business
            id or identity id is required)
        identity_id:
          type: string
          format: uuid
          example: idty_abc123
          description: the identity id to associate with this document (one of business
            id or identity id is required)
        presigned_url:
          type: string
          format: url
          description: url used to PUT or GET the document to our cloud provider.
            This is not returned via the list API
          example: https://test.test/doc_abc123/file_name.pdf
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this document
          additionalProperties: true
          example:
            language: english
            social_network: '@person'
        status:
          type: string
          enum:
          - pending uploaded canceled
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    IdentityResponse:
      type: object
      properties:
        id:
          description: unique identity id
          type: string
          example: idty_xyz
        platform_account_id:
          type: string
          format: uuid
          example: acc_xyz
        business_id:
          type: string
          format: uuid
          example: biz_xyz
          description: associated business
        name:
          type: string
          example: Person Name
          description: legal name
        title:
          type: string
          example: President
          description: job title
        email:
          type: string
          example: person.name@justifi.ai
          description: email address
        phone:
          type: string
          example: '6124011111'
          description: phone number
        dob_day:
          type: string
          example: '01'
          description: two-digit birth day
        dob_month:
          type: string
          example: '01'
          description: two-digit birth month
        dob_year:
          type: string
          example: '1980'
          description: four-digit birth year (must be at least 18 years old)
        ssn_last4:
          type: string
          example: '6789'
          description: last four digits of social security number (computed from identification_number)
        is_owner:
          type: boolean
          example: true
          description: if an identity owns 25% or more of the business, they are considered
            an owner
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this identity
        address:
          $ref: '#/components/schemas/AddressResponse'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    EntityBankAccount:
      type: object
      properties:
        id:
          description: unique bank account id
          type: string
          format: uuid
          example: ba_123xyz
        account_owner_name:
          description: name of the account owner
          type: string
          example: Napheesa Collier
        account_type:
          description: type of the account
          type: string
          enum:
          - checking savings
          example: checking
        acct_last_four:
          description: last 4 digits of the account number
          type: string
          example: '6789'
        routing_number:
          description: routing number for account
          type: string
          example: '110000000'
        bank_name:
          description: name of the bank
          type: string
          example: Wells Fargo
        country:
          description: country for the bank account
          type: string
          enum:
          - US
        currency:
          description: currency for the bank account
          type: string
          enum:
          - usd
        nickname:
          description: nickname for the bank account
          type: string
          example: Phee's money
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this bank
            account
          example: {}
        business_id:
          type: string
          format: uuid
          example: biz_123abc
        platform_account_id:
          type: string
          format: uuid
          example: acc_123abc
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    AdditionalQuestions:
      type: object
      properties:
        business_revenue:
          type: string
          example: '84220'
          description: amount of money the company receives from its primary business
            activities
        business_payment_volume:
          type: string
          example: '1000000'
          description: annual credit card & ACH volume anticipated to process with
            Justifi
        business_when_service_received:
          type: string
          example: Within 7 days
          description: how long after paying will your customers typically receive
            their goods or services
        business_recurring_payments:
          type: string
          example: 'true'
          description: business offer recurring payments
        business_recurring_payments_percentage:
          type: string
          example: 50% monthly, 50% annual
          description: percentage of revenue is generated from each recurring payment
            type offered
        business_seasonal:
          type: string
          example: No. The business revenue is generated evenly throughout the year
          description: is the business seasonal
        business_other_payment_details:
          type: string
          example: 50% of revenue is taken 90 days in advance of service and 50% of
            revenue is taken 30 days in advance of service
          description: anything else you would like us to know about how your customers
            pay the business
        business_purchase_order_volume:
          type: string
          example: '150'
          description: total number of purchase orders made by a business
        business_invoice_volume:
          type: string
          example: '500'
          description: total number of invoices generated by a business
        business_fund_use_intent:
          type: string
          example: expanding marketing efforts
          description: planned purpose for which a business intends to use funds
        equipment_invoice:
          type: string
          example: $10,000 invoice for computer equipment
          description: document specifying the cost and details of equipment purchased
        business_invoice_number:
          type: string
          example: 202105-001
          description: unique identifier assigned to a specific invoice issued by
            a business
        business_invoice_amount:
          type: string
          example: $4500
          description: total monetary value stated on an invoice issued by a business
        business_purchase_order_number:
          type: string
          example: '120'
          description: number of unique purchase orders made by a business
        industry_code:
          type: string
          example: '541512'
          description: numerical or alphanumeric code that classifies businesses according
            to their industry
        duns_number:
          type: string
          example: '123456789'
          description: unique nine-digit identification number assigned to a business
            entity
        business_payment_decline_volume:
          type: string
          example: '500'
          description: total number of payment declines experienced by a business
        business_refund_volume:
          type: string
          example: '100'
          description: total number of refunds issued by a business
        business_dispute_volume:
          type: string
          example: '50'
          description: total number of disputes raised by customers against a business
        business_receivable_volume:
          type: string
          example: US $100,000
          description: total value of outstanding payments owed to a business
        business_future_scheduled_payment_volume:
          type: string
          example: '200'
          description: total number of future scheduled payments for a business
        business_dispute_win_rate:
          type: string
          example: 75%
          description: percentage of business disputes won out of the total number
            of disputes
        length_of_business_relationship:
          type: string
          example: 5 years
          description: duration of a business relationship between two parties
    BusinessResponse:
      type: object
      properties:
        id:
          description: unique business id
          type: string
          example: biz_xyz
        platform_account_id:
          type: string
          format: uuid
          example: acc_xyz
        legal_name:
          type: string
          example: Business Name
          description: legal business entity name
        website_url:
          type: string
          example: https://justifi.ai
          description: website for this business (if they don't have a website, can
            send their social media business page, app store link, or a product description
            instead)
        email:
          type: string
          example: business@justifi.ai
          description: email address of business entity or representative
        phone:
          type: string
          example: '6124011111'
          description: business phone number
        doing_business_as:
          type: string
          example: Best Business
          description: only needed if registered with DBA/Trade Name on SS-4 tax document
        business_type:
          type: string
          enum:
          - for_profit
          - non_profit
          - government_entity
          - individual
        business_structure:
          type: string
          enum:
          - sole_proprietorship
          - single_llc
          - multi_llc
          - private_partnership
          - private_corporation
          - unincorporated_association
          - public_partnership
          - public_corporation
          - incorporated
          - unincorporated
          - government_unit
          - government_instrumentality
          - tax_exempt_government_instrumentality
        classification:
          type: string
          enum:
          - government limited non_profit partnership corporation public_company sole_proprietor
        industry:
          type: string
          example: Big Business
          description: to help us identify this business entity's category code (MCC),
            please provide a concise description of what service they offer
        mcc:
          type: string
          example: '8021'
          description: merchant category code for this business, if known. Please
            note, the JustiFi underwriting team may modify this. If you are unsure,
            just submit a description in the industry field instead of an MCC
        tax_id:
          type: string
          description: the federal tax identification number/EIN issued to this sub
            account by the IRS (for Individual type, this will be their full SSN)
        date_of_incorporation:
          type: string
          example: '2015-02-20'
        terms_conditions_accepted:
          type: boolean
          example: false
          description: returns true if terms and conditions were accepted
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this business
        associated_accounts:
          type: array of objects
          descriptin: the id of the sub account associated with the business, is populated
            once the business has been provisioned
          example:
          - id: acc_123xyx
        legal_address:
          $ref: '#/components/schemas/AddressResponse'
        representative:
          $ref: '#/components/schemas/IdentityResponse'
        owners:
          type: array
          items:
            $ref: '#/components/schemas/IdentityResponse'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        bank_accounts:
          type: array
          items:
            $ref: '#/components/schemas/EntityBankAccount'
        additional_questions:
          $ref: '#/components/schemas/AdditionalQuestions'
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 Example St
        line2:
          type: string
          example: Suite 101
        city:
          type: string
          example: Minneapolis
        state:
          type: string
          example: MN
        postal_code:
          type: string
          example: '55555'
        country:
          type: string
          example: USA
    Identity:
      type: object
      properties:
        name:
          type: string
          example: Person Name
          description: legal name
        title:
          type: string
          example: President
          description: job title
        email:
          type: string
          example: person.name@justifi.ai
          description: email address
        phone:
          type: string
          example: '6124011111'
          description: phone number
        dob_day:
          type: string
          example: '01'
          description: two-digit birth day
        dob_month:
          type: string
          example: '01'
          description: two-digit birth month
        dob_year:
          type: string
          example: '1980'
          description: four-digit birth year (must be at least 18 years old)
        identification_number:
          type: string
          example: '123456789'
          description: full social security number
        is_owner:
          type: boolean
          description: if an identity owns 25% or more of the business, they are considered
            an owner
        metadata:
          type: object
          format: json
          description: any useful information you'd like to store alongside this identity
          additionalProperties: true
          example:
            language: english
            social_network: '@person'
        address:
          oneOf:
          - $ref: '#/components/schemas/Address'
          - type: object
            properties:
              id:
                type: string
    ProvisioningResponse:
      type: object
      properties:
        account_type:
          description: account type (live or test)
          type: string
          example: test
        sub_account_id:
          type: string
          format: uuid
          example: acc_xyz
        platform_account_id:
          type: string
          format: uuid
          example: acc_123
        payload:
          type: object
          description: business information
    AchReturnFee:
      type: object
      properties:
        id:
          description: unique ach return fee id
          type: string
          example: arf_123xyz
        payment_id:
          description: the payment for which this ach return fee is being issued
          type: string
          example: py_123xyz
        amount:
          description: ach return fee amount, in cents
          type: number
          example: 150
        currency:
          type: string
          enum:
          - usd
          example: usd
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    Terminal:
      type: object
      properties:
        id:
          description: unique terminal id
          type: string
          example: trm_abc123
        account_id:
          description: id of the account associated with the terminal
          type: string
          format: uuid
          example: acc_123xyz
        platform_account_id:
          type: string
          format: uuid
          description: id of the platform account associated with the terminal
          example: acct_789abc
        provider:
          description: terminal provider
          type: enum[verifone verifone_simulator]
          example: verifone
        status:
          description: last known terminal status. For performance reasons, this field
            is only updated when you check the terminal status via API.
          type: enum[connected, disconnected, unknown]
          example: disconnected
        provider_id:
          description: terminal identification from provider, also called device id
            (DID)
          type: string
          example: '23456789'
        provider_serial_number:
          description: serial number of the terminal device. Present after device
            was configured by entering the provider id (also called device id) into
            device.
          type: string
          example: 888-222-444
        nickname:
          description: terminal custom identification, can be added and modified via
            update terminal API
          type: string
          example: My Favorite Terminal
        verified_at:
          type: string
          format: date-time
          example: '2024-01-01T15:00:00Z'
        model_name:
          type: string
          description: name of terminal device model
          example: e285
        terminal_order_created_at:
          type: string
          format: date-time
          description: timestamp of when the terminal order was placed
          example: '2024-01-01T15:00:00Z'
        status_last_requested_at:
          type: string
          format: date-time
          description: timestamp of last terminal status request
          example: '2024-01-01T15:00:00Z'
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    TerminalStatus:
      type: object
      properties:
        id:
          description: unique terminal id
          type: string
          example: trm_abc123
        status:
          description: current terminal status
          example: CONNECTED
          type: string
        last_date_time_connected:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        last_date_time_active:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    TerminalsOrder:
      type: object
      properties:
        id:
          description: unique terminal order id
          type: string
          example: tord_xyz
        business_id:
          type: string
          format: uuid
          example: biz_xyz
        account_id:
          type: string
          format: uuid
          example: acc_xyz
        order_type:
          type: string
          enum:
          - boarding_only
          - boarding_shipping
          example: boarding_only
        order_status:
          type: string
          enum:
          - created
          - submitted
          - completed
          description: status of the order
        company_name:
          type: string
          description: business legal name when the terminal order was created
          example: Business Name
        mcc:
          type: string
          description: Merchant Category Code
          example: 7998
        receiver_name:
          type: string
          description: name of the person receiving the terminal
          example: John Doe
        contact_first_name:
          type: string
          description: company's representative first name
          example: John
        contact_last_name:
          type: string
          description: company's representative last name
          example: Doe
        contact_email:
          type: string
          description: company's contact email
          example: john.doe@example.com
        contact_phone_number:
          type: string
          description: company's contact phone number
          example: 2125554567
        line1:
          type: string
          example: 123 Main St
        line2:
          type: string
          example: Apt 4B
        city:
          type: string
          example: Minneapolis
        state:
          type: string
          example: MN
        postal_code:
          type: string
          example: 55401
        time_zone:
          type: string
          description: determined by postal code
          example: US/Central
        country:
          type: string
          example: USA
        shipping_tracking_reference:
          type: string
          description: FedEx tracking number associated with the terminal order shipment.
            This field is populated only when the terminal order status is completed
            and the order includes a physical shipment. Always null for boarding_only
            terminal orders, as no shipment occurs.
          example: 12345678
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        terminals:
          type: array
          description: list of ordered terminals
          items:
            type: object
            properties:
              terminal_id:
                type: string
                format: uuid
                description: unique terminal id
                example: tmn_abc
              terminal_did:
                type: string
                description: terminal device identification
                example: '12345678'
              model_name:
                type: string
                enum:
                - V400m
                - P400
                - E285
                example: V400m
    CardPaymentWithEnvelope:
      type: object
      properties:
        id:
          description: unique payment id, same as id in data object
          type: string
          example: py_xyz
        type:
          description: the object type
          type: string
          example: payment
        data:
          $ref: '#/components/schemas/CardPayment'
        page_info:
          description: information for cursor style pagination, is null for single
            records
          type: null
          nullable: true
    CheckoutCompletionAttempt:
      type: object
      properties:
        id:
          description: unique checkout completion id
          type: string
          example: chc_xyz123
        payment_mode:
          type: string
          example: ecom
          enum:
          - ecom
          - bnpl
          - card_present
        payment_token:
          type: string
          example: pm_xyz123
          description: the payment method token used to process the payment, only
            for ecom payments
        status:
          type: string
          enum:
          - succeeded
          - failed
          - processing
          example: succeeded
          description: the status of the completion, only succeeded or failed
        payment_status:
          type: string
          enum:
          - succeeded
          - failed
          - pending
          - canceled
          - skipped
          example: succeeded
          description: depending upon payment mode, the status of the payment API
            call, bnpl transaction, or card reader transaction.
        payment_error_code:
          type: string
          example: card_declined
          description: when payment fails, related error code
        payment_error_description:
          type: string
          example: Your card was declined
          description: when payment fails, related error description
        payment_response:
          allOf:
          - type: object
          - description: payment object if completion attempt was successful, error
              object if not successful
          - $ref: '#/components/schemas/CardPaymentWithEnvelope'
        checkout_id:
          type: string
          format: uuid
          example: cho_xyz123
          description: id of the checkout for this completion
        additional_transactions:
          type: array of objects
          description: legacy attribute, any other transactions processed during checkout
            completion. For example, insurance payments
          example: []
        payment_id:
          type: string
          format: uuid
          example: py_xyz123
          description: id of the payment associated with this checkout, when successful
        payment_method_id:
          type: string
          format: uuid
          example: pm_xyz123
          description: id of the payment method associated with this checkout, when
            successful
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
    Checkout:
      type: object
      properties:
        id:
          description: unique checkout id
          type: string
          format: uuid
          example: cho_xyz
        account_id:
          description: id of the account associated with the checkout
          type: string
          format: uuid
          example: acc_xyz
        platform_account_id:
          description: id of the platform account associated with the checkout
          type: string
          format: uuid
          example: acc_xyz
        payment_amount:
          description: the amount charged in cents
          type: number
          example: 10000
        payment_currency:
          type: string
          enum:
          - USD
          example: USD
        payment_description:
          type: string
          description: your custom description of the payment if passed in the `payment`
            property during checkout creation, otherwise "Checkout [checkout id]"
          example: my order xyz
        payment_methods:
          type: array
          description: if `payment_method_group_id` was provided, list of payment
            methods contained in that payment method group
          example:
          - id: pm_123xyz
            type: card
            status: valid
            invalid_reason: null
            name: John Doe
            brand: visa
            acct_last_four: '4321'
            month: '12'
            year: '2031'
            address_line1_check: pass
            address_postal_code_check: pass
            bin_details: {}
          - id: pm_789abc
            type: bank_account
            status: valid
            invalid_reason: null
            account_owner_name: Mary Lane
            account_type: checking
            bank_name: Altra
            acct_last_four: '4512'
        payment_method_group_id:
          type: string
          description: id of payment method group used for checkout, if provided
          format: uuid
          example: pmg_xyz
        status:
          type: string
          enum:
          - created
          - completed
          - attempted
          - expired
          description: status of the checkout
        mode:
          type: string
          enum:
          - test
          - live
          description: mode of the checkout
          example: test
        successful_payment_id:
          type: string
          format: uuid
          example: py_123xyz
          description: payment id, if this checkout was paid for successfully
        statement_descriptor:
          type: string
          description: description of the payment that will be available on the account's
            bank statement
          example: Big Business
        application_fees:
          type: object
          description: custom application fee amount that applies to this payment,
            if provided
          properties:
            card:
              type: object
              properties:
                amount:
                  description: custom application fee amount that applies to card
                    payment method
                  example: 300
            bank_account:
              type: object
              properties:
                amount:
                  description: custom application fee amount that applies to bank
                    account payment method
                  example: 150
        payment_settings:
          type: object
          description: payment configuration information for the checkout
          example:
            ach_payments: true
            bnpl_payments: false
            credit_card_payments: true
            insurance_payments: false
        payment:
          type: object
          description: data passed to the `payment` property during checkout creation,
            or null
          properties:
            description:
              type: string
              description: your meaningful description of the payment (e.g. an order
                number or other value from your system)
              example: my order xyz
            metadata:
              type: object
              format: json
              description: any useful information you'd like to store alongside this
                payment
              example:
                new: info
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        completions:
          type: array
          description: list of checkout completion attempts, if any
          items:
            $ref: '#/components/schemas/CheckoutCompletionAttempt'
    CheckoutCompletion:
      type: object
      properties:
        id:
          description: unique checkout completion id
          type: string
          example: chc_xyz
        payment_mode:
          type: string
          example: ecom
          enum:
          - ecom
          - bnpl
          - card_present
        payment_token:
          type: string
          example: pm_xyz123
          description: the payment method token used to process the payment, only
            for ecom payments
        status:
          type: string
          enum:
          - succeeded
          - failed
          - processing
          example: succeeded
          description: the status of the completion, only succeeded or failed
        payment_status:
          type: string
          enum:
          - succeeded
          - failed
          - pending
          - canceled
          - skipped
          example: succeeded
          description: depending upon payment mode, the status of the payment API
            call, bnpl transaction, or card reader transaction.
        payment_error_code:
          type: string
          example: card_declined
          description: when payment fails, related error code
        payment_error_description:
          type: string
          example: Your card was declined
          description: when payment fails, related error description
        payment_response:
          allOf:
          - type: object
          - description: payment object if completion attempt was successful, error
              object if not successful
          - $ref: '#/components/schemas/CardPaymentWithEnvelope'
        checkout_id:
          type: string
          format: uuid
          description: id of the checkout for this completion
          example: cho_xyz123
        additional_transactions:
          type: array of objects
          description: legacy attribute, other transactions processed during checkout
            completion. For example, insurance payments
        checkout:
          $ref: '#/components/schemas/Checkout'
        payment_id:
          type: string
          format: uuid
          example: py_xyz123
          description: id of the payment associated with this checkout, when successful
        payment_method_id:
          type: string
          format: uuid
          example: pm_xyz123
          description: id of the payment associated with this checkout, when successful
        terminal_id:
          type: string
          format: uuid
          example: trm_xyz123
          description: id of the terminal used for this checkout, when mode is card
            present
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
    CheckoutRefund:
      type: object
      properties:
        id:
          description: unique checkout refund id
          type: string
          example: chr_xyz
        checkout_id:
          type: string
          format: uuid
          description: id of the checkout for this refund
        status:
          type: string
          enum:
          - succeeded
          - failed
          example: succeeded
          description: the status of the refund, only succeeded or failed
        refund_response:
          type: string
          example: invalid_amount
          description: when refund fails, related error description. when refund succeeded
            additional refund info (or null).
        refund_amount:
          type: integer
          example: 4900
          description: the amount requested to refund (or full checkout amount)
        created_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-01-01T12:00:00Z'
    ReportType:
      description: which report was generated
      type: string
      example: proceeds
      enum:
      - interchange_fee
    ReportProceedsParameters:
      type: object
      required:
      - report_type
      properties:
        report_type:
          type: string
          enum:
          - proceeds
        start_date:
          type: string
          format: date
          example: '2025-12-25'
          description: Start date to filter by. Maximum allowed date rage is 1 month
        end_date:
          type: string
          format: date
          example: '2025-12-30'
          description: End date to filter by. Maximum allowed date rage is 1 month
    ReportPayoutParameters:
      type: object
      required:
      - report_type
      properties:
        report_type:
          type: string
          enum:
          - payout
        start_date:
          type: string
          format: date
          example: '2025-12-25'
          description: Start date to filter by. Maximum allowed date rage is 1 month
        end_date:
          type: string
          format: date
          example: '2025-12-30'
          description: End date to filter by. Maximum allowed date rage is 1 month
    ReportInterchangeFeeParameters:
      type: object
      required:
      - report_type
      properties:
        report_type:
          type: string
          enum:
          - interchange_fee
        start_date:
          type: string
          format: date
          example: '2025-12-25'
          description: Start date to filter by. Maximum allowed date rage is 1 month
        end_date:
          type: string
          format: date
          example: '2025-12-30'
          description: End date to filter by. Maximum allowed date rage is 1 month
    ReportSubAccountSummaryParameters:
      type: object
      required:
      - report_type
      properties:
        report_type:
          type: string
          enum:
          - sub_account_summary
        start_date:
          type: string
          format: date
          example: '2025-12-25'
          description: Start date to filter by. Maximum allowed date rage is 1 month
        end_date:
          type: string
          format: date
          example: '2025-12-30'
          description: End date to filter by. Maximum allowed date rage is 1 month
    ReportPaymentListParameters:
      type: object
      required:
      - report_type
      properties:
        report_type:
          type: string
          enum:
          - payment_list
        payment_status:
          description: the payment status to filter by
          type: string
          enum:
          - authorized
          - failed
          - succeeded
          - canceled
          example: succeeded
        payment_method_id:
          description: the payment method id to filter by
          type: string
          example: pm_xyz
        terminal_id:
          description: the terminal_id to filter by
          type: string
          example: trm_xyz
        start_date:
          type: string
          format: date
          example: '2025-12-25'
          description: Start date to filter by. Maximum allowed date rage is 1 month
        end_date:
          type: string
          format: date
          example: '2025-12-30'
          description: End date to filter by. Maximum allowed date rage is 1 month
    ReportParameters:
      oneOf:
      - allOf:
        - $ref: '#/components/schemas/ReportProceedsParameters'
        - type: object
          properties:
            account_id:
              type: string
              example: acc_xyz
            platform_account_id:
              type: string
              example: acc_xyz
      - allOf:
        - $ref: '#/components/schemas/ReportPayoutParameters'
        - type: object
          properties:
            account_id:
              type: string
              example: acc_xyz
            platform_account_id:
              type: string
              example: acc_xyz
      - allOf:
        - $ref: '#/components/schemas/ReportInterchangeFeeParameters'
        - type: object
          properties:
            account_id:
              type: string
              example: acc_xyz
            platform_account_id:
              type: string
              example: acc_xyz
      - allOf:
        - $ref: '#/components/schemas/ReportSubAccountSummaryParameters'
        - type: object
          properties:
            account_id:
              type: string
              example: acc_xyz
            platform_account_id:
              type: string
              example: acc_xyz
      - allOf:
        - $ref: '#/components/schemas/ReportPaymentListParameters'
        - type: object
          properties:
            account_id:
              type: string
              example: acc_xyz
            platform_account_id:
              type: string
              example: acc_xyz
    Report:
      type: object
      properties:
        id:
          description: report unique id
          type: string
          example: rpt_xyz
        report_type:
          $ref: '#/components/schemas/ReportType'
        status:
          description: the report status
          type: string
          example: scheduled
          enum:
          - scheduled
          - processing
          - completed
          - failed
          - canceled
          - expired
        scheduled_at:
          description: when the report was scheduled
          type: string
          format: date
          example: '2025-12-25T14:44:45.026Z'
        run_at:
          description: when the report started processing
          type: string
          format: date
          example: '2025-12-30T14:44:45.026Z'
        created_at:
          description: when the report was created
          type: string
          format: date
          example: '2025-12-31T14:44:45.026Z'
        error_description:
          description: error description in case of errors
          type: string
        account_id:
          description: the account id the report was created for
          type: string
          example: acc_xyz
        presigned_url:
          description: the url to download the report when completed
          type: string
          format: url
        platform_account_id:
          description: the platform account id the report was created for
          type: string
          example: acc_xyz
        parameters:
          $ref: '#/components/schemas/ReportParameters'
    Event:
      type: object
      properties:
        id:
          description: event unique id
          type: string
          example: evt_123xyz
        idempotency_key:
          description: idempotency key for request, when available
          type: string
          nullable: true
        request_id:
          description: id for request, when available
          type: string
          nullable: true
        account_id:
          description: sub account id for event
          type: string
          example: acc_123xyz
        account_type:
          description: live or test account
          type: string
          example: test
        platform_account_id:
          description: platform account id for event, when available
          type: string
          example: acc_123xyz
          nullable: true
        data:
          description: the attributes for the object
          type: object
        version:
          description: version of the event payload
          type: string
          example: v1
        event_name:
          description: name of the event (payment.succeeded, sub_account.updated,
            etc.)
          example: payment.succeeded
          type: string
    ApplicationFeeRate:
      type: object
      properties:
        id:
          description: unique application fee rate id
          type: string
          format: uuid
          example: afr_123xyz
        transaction_fee:
          description: transaction fee amount, in cents
          type: number
          example: 50
        currency:
          type: string
          enum:
          - usd
          example: usd
        basis_point_rate:
          description: variable percentage of the payment amount that, combined with
            transaction fee, will be charged as the application fee. Expressed as
            the number of basis points
          type: number
          example: 250
        rate_type:
          type: string
          enum:
          - cc
          - ach
          example: cc
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        effective_start:
          description: date and time (UTC) application fee rate went into effect
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
        effective_end:
          description: date and time (UTC) application fee rate is effectively archived.
            If null, no end date is currently assigned and application fee rate is
            currently effective
          type: string
          format: date-time
          example: '2021-01-01T12:00:00Z'
    PaymentSetting:
      type: object
      properties:
        id:
          description: unique payment setting id
          type: string
          example: stpy_123abc
        account_id:
          description: unique id of the associated account
          type: string
          example: acc_123abc
        mcc_code:
          description: merchant category code configured
          type: string
          example: '5045'
        credit_card_payments:
          description: credit card payments enabled for processing
          type: boolean
          example: true
        ach_payments:
          description: ach payments enabled for processing
          type: boolean
          example: true
        card_present:
          description: card present feature enabled for processing
          type: boolean
          example: false
        bnpl_payments:
          description: buy now pay later feature enabled
          type: boolean
          example: false
        insurance_payments:
          description: insurance feature enabled
          type: boolean
          example: false
        platform_wallet_account:
          description: wether this account is configured as platform_wallet_account
          type: boolean
          example: false
    PayoutSetting:
      type: object
      properties:
        public_id:
          description: unique payout setting id
          type: string
          example: stpo_213abc
        account_id:
          description: unique id of the associated account
          type: string
          example: acc_123abc
        enabled:
          description: whether the payout setting is currently enabled
          type: boolean
          example: true
        interval:
          description: payout frequency
          type: string
          example: daily
        statement_descriptor:
          description: custom text to appear on bank statements
          type: string
          example: Name of Account
