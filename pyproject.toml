[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "justifi-mcp-server"
version = "2.0.0-dev"
description = "JustiFi MCP Server with multi-framework support for payment processing integration"
authors = [{ name = "JustiFi MCP Team", email = "support@justifi.ai" }]
license = "MIT"
requires-python = ">=3.11"
dependencies = [
    "mcp",
    "fastmcp",
    "httpx",
    "pydantic",
    "python-dotenv",
    "langsmith",
    "starlette",
    "uvicorn",
]
keywords = [
    "mcp",
    "model-context-protocol",
    "justifi",
    "payments",
    "ai",
    "langchain",
    "openai",
    "agent-toolkit",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial",
]

[project.urls]
Homepage = "https://github.com/justifi-tech/mcp-servers"
Documentation = "https://docs.justifi.ai/mcp"
Repository = "https://github.com/justifi-tech/mcp-servers"
Issues = "https://github.com/justifi-tech/mcp-servers/issues"

[project.scripts]
justifi-mcp-server = "main:cli_main"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "respx",
    "black",
    "ruff",
    "mypy",
    "watchdog",
    "pre-commit",
    "types-requests",
    "types-PyYAML",
    "langchain-core",
    "langchain-openai",
]
test = ["pytest", "pytest-asyncio", "pytest-cov", "respx"]
api = ["requests", "pyyaml", "deepdiff"]
docs = ["mkdocs", "mkdocs-material", "mkdocs-mermaid2-plugin"]
all = [
    # Include all dependencies from other extras
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "respx",
    "black",
    "ruff",
    "mypy",
    "watchdog",
    "pre-commit",
    "types-requests",
    "types-PyYAML",
    "langchain-core",
    "langchain-openai",
    "requests",
    "pyyaml",
    "deepdiff",
    "mkdocs",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
# Essential rules for code quality
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.isort]
known-first-party = ["justifi_mcp", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false       # Start gradual, can make stricter later
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false # Allow @traceable without types
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = []

# Per-module options
[[tool.mypy.overrides]]
module = [
    "respx.*",
    "mcp.*",
    "langsmith.*",
    "requests.*",
    "yaml.*",
    "deepdiff.*",
    "langchain_openai.*",
    "langchain_core.*",
]
ignore_missing_imports = true

[tool.setuptools.packages.find]
where = ["."]
include = ["justifi_mcp*"]
exclude = ["tests*", "archive*", "eval*", "docker*", "examples*", "scripts*"]
